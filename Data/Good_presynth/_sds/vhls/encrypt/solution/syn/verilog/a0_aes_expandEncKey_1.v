// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_aes_expandEncKey_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_k_AWVALID,
        m_axi_k_AWREADY,
        m_axi_k_AWADDR,
        m_axi_k_AWID,
        m_axi_k_AWLEN,
        m_axi_k_AWSIZE,
        m_axi_k_AWBURST,
        m_axi_k_AWLOCK,
        m_axi_k_AWCACHE,
        m_axi_k_AWPROT,
        m_axi_k_AWQOS,
        m_axi_k_AWREGION,
        m_axi_k_AWUSER,
        m_axi_k_WVALID,
        m_axi_k_WREADY,
        m_axi_k_WDATA,
        m_axi_k_WSTRB,
        m_axi_k_WLAST,
        m_axi_k_WID,
        m_axi_k_WUSER,
        m_axi_k_ARVALID,
        m_axi_k_ARREADY,
        m_axi_k_ARADDR,
        m_axi_k_ARID,
        m_axi_k_ARLEN,
        m_axi_k_ARSIZE,
        m_axi_k_ARBURST,
        m_axi_k_ARLOCK,
        m_axi_k_ARCACHE,
        m_axi_k_ARPROT,
        m_axi_k_ARQOS,
        m_axi_k_ARREGION,
        m_axi_k_ARUSER,
        m_axi_k_RVALID,
        m_axi_k_RREADY,
        m_axi_k_RDATA,
        m_axi_k_RLAST,
        m_axi_k_RID,
        m_axi_k_RUSER,
        m_axi_k_RRESP,
        m_axi_k_BVALID,
        m_axi_k_BREADY,
        m_axi_k_BRESP,
        m_axi_k_BID,
        m_axi_k_BUSER,
        k_offset,
        rc_read,
        ap_return,
        k_blk_n_AR,
        k_blk_n_R,
        k_blk_n_AW,
        k_blk_n_W,
        k_blk_n_B,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_k_AWVALID;
input   m_axi_k_AWREADY;
output  [31:0] m_axi_k_AWADDR;
output  [0:0] m_axi_k_AWID;
output  [31:0] m_axi_k_AWLEN;
output  [2:0] m_axi_k_AWSIZE;
output  [1:0] m_axi_k_AWBURST;
output  [1:0] m_axi_k_AWLOCK;
output  [3:0] m_axi_k_AWCACHE;
output  [2:0] m_axi_k_AWPROT;
output  [3:0] m_axi_k_AWQOS;
output  [3:0] m_axi_k_AWREGION;
output  [0:0] m_axi_k_AWUSER;
output   m_axi_k_WVALID;
input   m_axi_k_WREADY;
output  [1023:0] m_axi_k_WDATA;
output  [127:0] m_axi_k_WSTRB;
output   m_axi_k_WLAST;
output  [0:0] m_axi_k_WID;
output  [0:0] m_axi_k_WUSER;
output   m_axi_k_ARVALID;
input   m_axi_k_ARREADY;
output  [31:0] m_axi_k_ARADDR;
output  [0:0] m_axi_k_ARID;
output  [31:0] m_axi_k_ARLEN;
output  [2:0] m_axi_k_ARSIZE;
output  [1:0] m_axi_k_ARBURST;
output  [1:0] m_axi_k_ARLOCK;
output  [3:0] m_axi_k_ARCACHE;
output  [2:0] m_axi_k_ARPROT;
output  [3:0] m_axi_k_ARQOS;
output  [3:0] m_axi_k_ARREGION;
output  [0:0] m_axi_k_ARUSER;
input   m_axi_k_RVALID;
output   m_axi_k_RREADY;
input  [1023:0] m_axi_k_RDATA;
input   m_axi_k_RLAST;
input  [0:0] m_axi_k_RID;
input  [0:0] m_axi_k_RUSER;
input  [1:0] m_axi_k_RRESP;
input   m_axi_k_BVALID;
output   m_axi_k_BREADY;
input  [1:0] m_axi_k_BRESP;
input  [0:0] m_axi_k_BID;
input  [0:0] m_axi_k_BUSER;
input  [24:0] k_offset;
input  [7:0] rc_read;
output  [7:0] ap_return;
output   k_blk_n_AR;
output   k_blk_n_R;
output   k_blk_n_AW;
output   k_blk_n_W;
output   k_blk_n_B;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_k_AWVALID;
reg m_axi_k_WVALID;
reg m_axi_k_ARVALID;
reg m_axi_k_RREADY;
reg m_axi_k_BREADY;
reg k_blk_n_AR;
reg k_blk_n_R;
reg k_blk_n_AW;
reg k_blk_n_W;
reg k_blk_n_B;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
reg   [31:0] k_addr_reg_878;
reg    ap_sig_ioackin_m_axi_k_ARREADY;
reg   [1023:0] k_addr_read_reg_885;
reg   [7:0] tmp_3_reg_890;
reg   [7:0] tmp_6_reg_896;
reg   [7:0] tmp_7_reg_902;
reg   [7:0] tmp_9_reg_907;
reg   [7:0] tmp_10_reg_913;
reg   [7:0] tmp_12_reg_918;
reg   [7:0] tmp_13_reg_924;
reg   [7:0] tmp_17_reg_929;
reg   [7:0] tmp_19_reg_934;
reg   [7:0] tmp_26_reg_939;
reg   [7:0] tmp_28_reg_944;
reg   [7:0] tmp_30_reg_949;
reg   [7:0] tmp_31_reg_954;
reg   [7:0] tmp_32_reg_959;
reg   [7:0] tmp_33_reg_964;
reg   [7:0] tmp_34_reg_969;
reg   [7:0] tmp_35_reg_974;
reg   [7:0] tmp_36_reg_979;
reg   [7:0] tmp_37_reg_984;
reg   [7:0] tmp_39_reg_989;
reg   [7:0] tmp_42_reg_994;
reg   [7:0] tmp_45_reg_999;
reg   [7:0] tmp_48_reg_1004;
reg   [7:0] tmp_50_reg_1009;
reg   [7:0] tmp_52_reg_1014;
reg   [7:0] tmp_54_reg_1019;
reg   [7:0] tmp_56_reg_1024;
reg   [7:0] tmp_58_reg_1029;
reg   [7:0] tmp_59_reg_1034;
reg   [7:0] tmp_60_reg_1039;
reg   [7:0] tmp_61_reg_1044;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_s_fu_628_p2;
reg   [7:0] tmp_s_reg_1054;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_23_fu_660_p2;
reg   [7:0] tmp_23_reg_1065;
wire   [7:0] tmp_2_fu_666_p2;
reg   [7:0] tmp_2_reg_1069;
wire    ap_CS_fsm_state11;
wire   [7:0] tmp_16_fu_675_p2;
reg   [7:0] tmp_16_reg_1080;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_24_fu_684_p2;
reg   [7:0] tmp_24_reg_1091;
wire   [7:0] tmp_36_1_fu_688_p2;
reg   [7:0] tmp_36_1_reg_1096;
wire   [7:0] tmp_20_fu_693_p2;
reg   [7:0] tmp_20_reg_1102;
wire    ap_CS_fsm_state13;
wire   [7:0] tmp_25_fu_698_p2;
reg   [7:0] tmp_25_reg_1108;
wire   [7:0] tmp_39_1_fu_702_p2;
reg   [7:0] tmp_39_1_reg_1113;
wire   [7:0] tmp_36_2_fu_707_p2;
reg   [7:0] tmp_36_2_reg_1119;
wire   [7:0] tmp_27_fu_716_p2;
reg   [7:0] tmp_27_reg_1129;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_42_1_fu_720_p2;
reg   [7:0] tmp_42_1_reg_1134;
wire   [7:0] tmp_39_2_fu_725_p2;
reg   [7:0] tmp_39_2_reg_1140;
wire   [7:0] tmp_40_fu_729_p2;
reg   [7:0] tmp_40_reg_1145;
wire   [7:0] tmp_29_fu_739_p2;
reg   [7:0] tmp_29_reg_1156;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_45_1_fu_743_p2;
reg   [7:0] tmp_45_1_reg_1161;
wire   [7:0] tmp_42_2_fu_748_p2;
reg   [7:0] tmp_42_2_reg_1167;
wire   [7:0] tmp_43_fu_752_p2;
reg   [7:0] tmp_43_reg_1172;
wire   [7:0] tmp_45_2_fu_762_p2;
reg   [7:0] tmp_45_2_reg_1183;
wire    ap_CS_fsm_state16;
wire   [7:0] tmp_46_fu_766_p2;
reg   [7:0] tmp_46_reg_1188;
wire   [7:0] tmp_49_fu_776_p2;
reg   [7:0] tmp_49_reg_1199;
wire    ap_CS_fsm_state17;
wire   [7:0] tmp_51_fu_781_p2;
reg   [7:0] tmp_51_reg_1205;
reg    ap_sig_ioackin_m_axi_k_AWREADY;
wire   [7:0] tmp_53_fu_785_p2;
reg   [7:0] tmp_53_reg_1210;
wire   [7:0] tmp_55_fu_789_p2;
reg   [7:0] tmp_55_reg_1215;
wire   [7:0] tmp_57_fu_793_p2;
reg   [7:0] tmp_57_reg_1220;
wire   [7:0] tmp_57_1_fu_797_p2;
reg   [7:0] tmp_57_1_reg_1225;
wire   [7:0] tmp_60_1_fu_802_p2;
reg   [7:0] tmp_60_1_reg_1230;
wire   [7:0] tmp_63_1_fu_807_p2;
reg   [7:0] tmp_63_1_reg_1235;
wire   [7:0] tmp_66_1_fu_812_p2;
reg   [7:0] tmp_66_1_reg_1240;
wire   [7:0] tmp_57_2_fu_817_p2;
reg   [7:0] tmp_57_2_reg_1245;
wire   [7:0] tmp_60_2_fu_822_p2;
reg   [7:0] tmp_60_2_reg_1250;
wire   [7:0] tmp_63_2_fu_827_p2;
reg   [7:0] tmp_63_2_reg_1255;
wire   [7:0] tmp_66_2_fu_832_p2;
reg   [7:0] tmp_66_2_reg_1260;
reg   [7:0] ap_port_reg_rc_read;
wire   [31:0] tmp_fu_609_p1;
wire   [31:0] tmp_1_fu_634_p1;
wire   [31:0] tmp_15_fu_671_p1;
wire   [31:0] tmp_18_fu_680_p1;
wire   [31:0] tmp_38_fu_711_p1;
wire   [31:0] tmp_41_fu_734_p1;
wire   [31:0] tmp_44_fu_757_p1;
wire   [31:0] tmp_47_fu_771_p1;
wire   [31:0] k_offset_cast_fu_288_p1;
reg    ap_reg_ioackin_m_axi_k_ARREADY;
reg    ap_reg_ioackin_m_axi_k_AWREADY;
reg    ap_reg_ioackin_m_axi_k_WREADY;
reg    ap_sig_ioackin_m_axi_k_WREADY;
wire   [7:0] tmp_4_fu_613_p4;
wire   [7:0] tmp1_fu_622_p2;
wire   [0:0] tmp_22_fu_644_p3;
wire   [7:0] tmp_29_cast_cast_fu_652_p3;
wire   [7:0] tmp_21_fu_638_p2;
reg   [23:0] ap_NS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_reg_ioackin_m_axi_k_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_k_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_k_WREADY = 1'b0;
end

a0_aes_expandEncKey_bkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_ce == 1'b1))) begin
            if (~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY))) begin
                ap_reg_ioackin_m_axi_k_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == m_axi_k_ARREADY))) begin
                ap_reg_ioackin_m_axi_k_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1))) begin
            if ((ap_sig_ioackin_m_axi_k_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_k_AWREADY <= 1'b0;
            end else if ((1'b1 == m_axi_k_AWREADY)) begin
                ap_reg_ioackin_m_axi_k_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1))) begin
            if ((ap_sig_ioackin_m_axi_k_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_k_WREADY <= 1'b0;
            end else if ((1'b1 == m_axi_k_WREADY)) begin
                ap_reg_ioackin_m_axi_k_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY)) & (ap_ce == 1'b1))) begin
        ap_port_reg_rc_read <= rc_read;
        k_addr_reg_878[24 : 0] <= k_offset_cast_fu_288_p1[24 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
        k_addr_read_reg_885 <= m_axi_k_RDATA;
        tmp_10_reg_913 <= {{m_axi_k_RDATA[535:528]}};
        tmp_12_reg_918 <= {{m_axi_k_RDATA[743:736]}};
        tmp_13_reg_924 <= {{m_axi_k_RDATA[543:536]}};
        tmp_17_reg_929 <= {{m_axi_k_RDATA[551:544]}};
        tmp_19_reg_934 <= {{m_axi_k_RDATA[559:552]}};
        tmp_26_reg_939 <= {{m_axi_k_RDATA[567:560]}};
        tmp_28_reg_944 <= {{m_axi_k_RDATA[575:568]}};
        tmp_30_reg_949 <= {{m_axi_k_RDATA[583:576]}};
        tmp_31_reg_954 <= {{m_axi_k_RDATA[591:584]}};
        tmp_32_reg_959 <= {{m_axi_k_RDATA[599:592]}};
        tmp_33_reg_964 <= {{m_axi_k_RDATA[607:600]}};
        tmp_34_reg_969 <= {{m_axi_k_RDATA[615:608]}};
        tmp_35_reg_974 <= {{m_axi_k_RDATA[623:616]}};
        tmp_36_reg_979 <= {{m_axi_k_RDATA[631:624]}};
        tmp_37_reg_984 <= {{m_axi_k_RDATA[639:632]}};
        tmp_39_reg_989 <= {{m_axi_k_RDATA[647:640]}};
        tmp_3_reg_890 <= {{m_axi_k_RDATA[751:744]}};
        tmp_42_reg_994 <= {{m_axi_k_RDATA[655:648]}};
        tmp_45_reg_999 <= {{m_axi_k_RDATA[663:656]}};
        tmp_48_reg_1004 <= {{m_axi_k_RDATA[671:664]}};
        tmp_50_reg_1009 <= {{m_axi_k_RDATA[679:672]}};
        tmp_52_reg_1014 <= {{m_axi_k_RDATA[687:680]}};
        tmp_54_reg_1019 <= {{m_axi_k_RDATA[695:688]}};
        tmp_56_reg_1024 <= {{m_axi_k_RDATA[703:696]}};
        tmp_58_reg_1029 <= {{m_axi_k_RDATA[711:704]}};
        tmp_59_reg_1034 <= {{m_axi_k_RDATA[719:712]}};
        tmp_60_reg_1039 <= {{m_axi_k_RDATA[727:720]}};
        tmp_61_reg_1044 <= {{m_axi_k_RDATA[735:728]}};
        tmp_6_reg_896 <= {{m_axi_k_RDATA[759:752]}};
        tmp_7_reg_902 <= {{m_axi_k_RDATA[527:520]}};
        tmp_9_reg_907 <= {{m_axi_k_RDATA[767:760]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_16_reg_1080 <= tmp_16_fu_675_p2;
        tmp_24_reg_1091 <= tmp_24_fu_684_p2;
        tmp_36_1_reg_1096 <= tmp_36_1_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_20_reg_1102 <= tmp_20_fu_693_p2;
        tmp_25_reg_1108 <= tmp_25_fu_698_p2;
        tmp_36_2_reg_1119 <= tmp_36_2_fu_707_p2;
        tmp_39_1_reg_1113 <= tmp_39_1_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_23_reg_1065 <= tmp_23_fu_660_p2;
        tmp_s_reg_1054 <= tmp_s_fu_628_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_27_reg_1129 <= tmp_27_fu_716_p2;
        tmp_39_2_reg_1140 <= tmp_39_2_fu_725_p2;
        tmp_40_reg_1145 <= tmp_40_fu_729_p2;
        tmp_42_1_reg_1134 <= tmp_42_1_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_29_reg_1156 <= tmp_29_fu_739_p2;
        tmp_42_2_reg_1167 <= tmp_42_2_fu_748_p2;
        tmp_43_reg_1172 <= tmp_43_fu_752_p2;
        tmp_45_1_reg_1161 <= tmp_45_1_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_2_reg_1069 <= tmp_2_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_45_2_reg_1183 <= tmp_45_2_fu_762_p2;
        tmp_46_reg_1188 <= tmp_46_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_49_reg_1199 <= tmp_49_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_AWREADY == 1'b1))) begin
        tmp_51_reg_1205 <= tmp_51_fu_781_p2;
        tmp_53_reg_1210 <= tmp_53_fu_785_p2;
        tmp_55_reg_1215 <= tmp_55_fu_789_p2;
        tmp_57_1_reg_1225 <= tmp_57_1_fu_797_p2;
        tmp_57_2_reg_1245 <= tmp_57_2_fu_817_p2;
        tmp_57_reg_1220 <= tmp_57_fu_793_p2;
        tmp_60_1_reg_1230 <= tmp_60_1_fu_802_p2;
        tmp_60_2_reg_1250 <= tmp_60_2_fu_822_p2;
        tmp_63_1_reg_1235 <= tmp_63_1_fu_807_p2;
        tmp_63_2_reg_1255 <= tmp_63_2_fu_827_p2;
        tmp_66_1_reg_1240 <= tmp_66_1_fu_812_p2;
        tmp_66_2_reg_1260 <= tmp_66_2_fu_832_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_ARREADY)) begin
        ap_sig_ioackin_m_axi_k_ARREADY = m_axi_k_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_AWREADY)) begin
        ap_sig_ioackin_m_axi_k_AWREADY = m_axi_k_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_WREADY)) begin
        ap_sig_ioackin_m_axi_k_WREADY = m_axi_k_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_blk_n_AR = m_axi_k_ARREADY;
    end else begin
        k_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k_blk_n_AW = m_axi_k_AWREADY;
    end else begin
        k_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        k_blk_n_B = m_axi_k_BVALID;
    end else begin
        k_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_blk_n_R = m_axi_k_RVALID;
    end else begin
        k_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        k_blk_n_W = m_axi_k_WREADY;
    end else begin
        k_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_ARREADY))) begin
        m_axi_k_ARVALID = 1'b1;
    end else begin
        m_axi_k_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_AWREADY))) begin
        m_axi_k_AWVALID = 1'b1;
    end else begin
        m_axi_k_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
        m_axi_k_BREADY = 1'b1;
    end else begin
        m_axi_k_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
        m_axi_k_RREADY = 1'b1;
    end else begin
        m_axi_k_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_WREADY))) begin
        m_axi_k_WVALID = 1'b1;
    end else begin
        m_axi_k_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sbox_address0 = tmp_47_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_address0 = tmp_44_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sbox_address0 = tmp_41_fu_734_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sbox_address0 = tmp_38_fu_711_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sbox_address0 = tmp_18_fu_680_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sbox_address0 = tmp_15_fu_671_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address0 = tmp_1_fu_634_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = tmp_fu_609_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY)) & (ap_ce == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = tmp_23_reg_1065;

assign k_offset_cast_fu_288_p1 = k_offset;

assign m_axi_k_ARADDR = k_offset_cast_fu_288_p1;

assign m_axi_k_ARBURST = 2'd0;

assign m_axi_k_ARCACHE = 4'd0;

assign m_axi_k_ARID = 1'd0;

assign m_axi_k_ARLEN = 32'd1;

assign m_axi_k_ARLOCK = 2'd0;

assign m_axi_k_ARPROT = 3'd0;

assign m_axi_k_ARQOS = 4'd0;

assign m_axi_k_ARREGION = 4'd0;

assign m_axi_k_ARSIZE = 3'd0;

assign m_axi_k_ARUSER = 1'd0;

assign m_axi_k_AWADDR = k_addr_reg_878;

assign m_axi_k_AWBURST = 2'd0;

assign m_axi_k_AWCACHE = 4'd0;

assign m_axi_k_AWID = 1'd0;

assign m_axi_k_AWLEN = 32'd1;

assign m_axi_k_AWLOCK = 2'd0;

assign m_axi_k_AWPROT = 3'd0;

assign m_axi_k_AWQOS = 4'd0;

assign m_axi_k_AWREGION = 4'd0;

assign m_axi_k_AWSIZE = 3'd0;

assign m_axi_k_AWUSER = 1'd0;

assign m_axi_k_WDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{256'd0}, {tmp_66_2_reg_1260}}}, {tmp_63_2_reg_1255}}}, {tmp_60_2_reg_1250}}}, {tmp_57_2_reg_1245}}}, {tmp_66_1_reg_1240}}}, {tmp_63_1_reg_1235}}}, {tmp_60_1_reg_1230}}}, {tmp_57_1_reg_1225}}}, {tmp_57_reg_1220}}}, {tmp_55_reg_1215}}}, {tmp_53_reg_1210}}}, {tmp_51_reg_1205}}}, {tmp_49_reg_1199}}}, {tmp_46_reg_1188}}}, {tmp_43_reg_1172}}}, {tmp_40_reg_1145}}}, {tmp_45_2_reg_1183}}}, {tmp_42_2_reg_1167}}}, {tmp_39_2_reg_1140}}}, {tmp_36_2_reg_1119}}}, {tmp_45_1_reg_1161}}}, {tmp_42_1_reg_1134}}}, {tmp_39_1_reg_1113}}}, {tmp_36_1_reg_1096}}}, {tmp_29_reg_1156}}}, {tmp_27_reg_1129}}}, {tmp_25_reg_1108}}}, {tmp_24_reg_1091}}}, {tmp_20_reg_1102}}}, {tmp_16_reg_1080}}}, {tmp_2_reg_1069}}}, {tmp_s_reg_1054}}}, {512'd0}};

assign m_axi_k_WID = 1'd0;

assign m_axi_k_WLAST = 1'b0;

assign m_axi_k_WSTRB = 128'd79228162495817593519834398720;

assign m_axi_k_WUSER = 1'd0;

assign tmp1_fu_622_p2 = (tmp_4_fu_613_p4 ^ ap_port_reg_rc_read);

assign tmp_15_fu_671_p1 = tmp_9_reg_907;

assign tmp_16_fu_675_p2 = (sbox_q0 ^ tmp_10_reg_913);

assign tmp_18_fu_680_p1 = tmp_12_reg_918;

assign tmp_1_fu_634_p1 = tmp_6_reg_896;

assign tmp_20_fu_693_p2 = (sbox_q0 ^ tmp_13_reg_924);

assign tmp_21_fu_638_p2 = ap_port_reg_rc_read << 8'd1;

assign tmp_22_fu_644_p3 = ap_port_reg_rc_read[32'd7];

assign tmp_23_fu_660_p2 = (tmp_29_cast_cast_fu_652_p3 ^ tmp_21_fu_638_p2);

assign tmp_24_fu_684_p2 = (tmp_17_reg_929 ^ tmp_s_reg_1054);

assign tmp_25_fu_698_p2 = (tmp_19_reg_934 ^ tmp_2_reg_1069);

assign tmp_27_fu_716_p2 = (tmp_26_reg_939 ^ tmp_16_reg_1080);

assign tmp_29_cast_cast_fu_652_p3 = ((tmp_22_fu_644_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_29_fu_739_p2 = (tmp_28_reg_944 ^ tmp_20_reg_1102);

assign tmp_2_fu_666_p2 = (sbox_q0 ^ tmp_7_reg_902);

assign tmp_36_1_fu_688_p2 = (tmp_30_reg_949 ^ tmp_24_fu_684_p2);

assign tmp_36_2_fu_707_p2 = (tmp_34_reg_969 ^ tmp_36_1_reg_1096);

assign tmp_38_fu_711_p1 = tmp_36_2_fu_707_p2;

assign tmp_39_1_fu_702_p2 = (tmp_31_reg_954 ^ tmp_25_fu_698_p2);

assign tmp_39_2_fu_725_p2 = (tmp_35_reg_974 ^ tmp_39_1_reg_1113);

assign tmp_40_fu_729_p2 = (sbox_q0 ^ tmp_39_reg_989);

assign tmp_41_fu_734_p1 = tmp_39_2_fu_725_p2;

assign tmp_42_1_fu_720_p2 = (tmp_32_reg_959 ^ tmp_27_fu_716_p2);

assign tmp_42_2_fu_748_p2 = (tmp_36_reg_979 ^ tmp_42_1_reg_1134);

assign tmp_43_fu_752_p2 = (sbox_q0 ^ tmp_42_reg_994);

assign tmp_44_fu_757_p1 = tmp_42_2_fu_748_p2;

assign tmp_45_1_fu_743_p2 = (tmp_33_reg_964 ^ tmp_29_fu_739_p2);

assign tmp_45_2_fu_762_p2 = (tmp_37_reg_984 ^ tmp_45_1_reg_1161);

assign tmp_46_fu_766_p2 = (sbox_q0 ^ tmp_45_reg_999);

assign tmp_47_fu_771_p1 = tmp_45_2_fu_762_p2;

assign tmp_49_fu_776_p2 = (sbox_q0 ^ tmp_48_reg_1004);

assign tmp_4_fu_613_p4 = {{k_addr_read_reg_885[519:512]}};

assign tmp_51_fu_781_p2 = (tmp_50_reg_1009 ^ tmp_40_reg_1145);

assign tmp_53_fu_785_p2 = (tmp_52_reg_1014 ^ tmp_43_reg_1172);

assign tmp_55_fu_789_p2 = (tmp_54_reg_1019 ^ tmp_46_reg_1188);

assign tmp_57_1_fu_797_p2 = (tmp_58_reg_1029 ^ tmp_51_fu_781_p2);

assign tmp_57_2_fu_817_p2 = (tmp_12_reg_918 ^ tmp_57_1_fu_797_p2);

assign tmp_57_fu_793_p2 = (tmp_56_reg_1024 ^ tmp_49_reg_1199);

assign tmp_60_1_fu_802_p2 = (tmp_59_reg_1034 ^ tmp_53_fu_785_p2);

assign tmp_60_2_fu_822_p2 = (tmp_3_reg_890 ^ tmp_60_1_fu_802_p2);

assign tmp_63_1_fu_807_p2 = (tmp_60_reg_1039 ^ tmp_55_fu_789_p2);

assign tmp_63_2_fu_827_p2 = (tmp_6_reg_896 ^ tmp_63_1_fu_807_p2);

assign tmp_66_1_fu_812_p2 = (tmp_61_reg_1044 ^ tmp_57_fu_793_p2);

assign tmp_66_2_fu_832_p2 = (tmp_9_reg_907 ^ tmp_66_1_fu_812_p2);

assign tmp_fu_609_p1 = tmp_3_reg_890;

assign tmp_s_fu_628_p2 = (tmp1_fu_622_p2 ^ sbox_q0);

always @ (posedge ap_clk) begin
    k_addr_reg_878[31:25] <= 7'b0000000;
end

endmodule //a0_aes_expandEncKey_1
