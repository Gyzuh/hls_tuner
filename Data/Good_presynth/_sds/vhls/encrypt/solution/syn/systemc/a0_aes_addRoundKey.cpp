// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_aes_addRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_aes_addRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_aes_addRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage4 = "100000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage5 = "1000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage6 = "10000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage7 = "100000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage8 = "1000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage9 = "10000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage10 = "100000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage11 = "1000000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage12 = "10000000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage13 = "100000000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_pp0_stage14 = "1000000000000000";
const sc_lv<17> a0_aes_addRoundKey::ap_ST_fsm_state25 = "10000000000000000";
const bool a0_aes_addRoundKey::ap_const_boolean_1 = true;
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> a0_aes_addRoundKey::ap_const_lv1_0 = "0";
const sc_lv<3> a0_aes_addRoundKey::ap_const_lv3_0 = "000";
const sc_lv<2> a0_aes_addRoundKey::ap_const_lv2_0 = "00";
const sc_lv<4> a0_aes_addRoundKey::ap_const_lv4_0 = "0000";
const sc_lv<1024> a0_aes_addRoundKey::ap_const_lv1024_lc
const sc_lv<128> a0_aes_addRoundKey::ap_const_lv128_lc_2 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_9 = "1001";
const bool a0_aes_addRoundKey::ap_const_boolean_0 = false;
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_1 = "1";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_8 = "1000";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_A = "1010";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_B = "1011";
const sc_lv<1> a0_aes_addRoundKey::ap_const_lv1_1 = "1";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_F = "1111";
const sc_lv<5> a0_aes_addRoundKey::ap_const_lv5_10 = "10000";
const sc_lv<5> a0_aes_addRoundKey::ap_const_lv5_1F = "11111";
const sc_lv<5> a0_aes_addRoundKey::ap_const_lv5_0 = "00000";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_FF = "11111111";
const sc_lv<8> a0_aes_addRoundKey::ap_const_lv8_7 = "111";
const sc_lv<9> a0_aes_addRoundKey::ap_const_lv9_FF = "11111111";
const sc_lv<256> a0_aes_addRoundKey::ap_const_lv256_lc_4 = "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_C = "1100";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_D = "1101";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_E = "1110";
const sc_lv<32> a0_aes_addRoundKey::ap_const_lv32_10 = "10000";

a0_aes_addRoundKey::a0_aes_addRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {
    encrypt_lshr_256ncud_x_U45 = new a0_encrypt_lshr_256ncud<1,6,1,256,9,256>("encrypt_lshr_256ncud_x_U45");
    encrypt_lshr_256ncud_x_U45->clk(ap_clk);
    encrypt_lshr_256ncud_x_U45->reset(ap_rst);
    encrypt_lshr_256ncud_x_U45->din0(tmp_880_reg_370);
    encrypt_lshr_256ncud_x_U45->din1(grp_fu_295_p1);
    encrypt_lshr_256ncud_x_U45->ce(grp_fu_295_ce);
    encrypt_lshr_256ncud_x_U45->dout(grp_fu_295_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage10);

    SC_METHOD(thread_ap_block_pp0_stage10_11001);

    SC_METHOD(thread_ap_block_pp0_stage10_subdone);

    SC_METHOD(thread_ap_block_pp0_stage11_11001);

    SC_METHOD(thread_ap_block_pp0_stage11_subdone);

    SC_METHOD(thread_ap_block_pp0_stage12_11001);

    SC_METHOD(thread_ap_block_pp0_stage12_subdone);

    SC_METHOD(thread_ap_block_pp0_stage13_11001);

    SC_METHOD(thread_ap_block_pp0_stage13_subdone);

    SC_METHOD(thread_ap_block_pp0_stage14_11001);

    SC_METHOD(thread_ap_block_pp0_stage14_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1_01001);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state18_io );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_01001);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state19_io );

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state19_io );

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);

    SC_METHOD(thread_ap_block_pp0_stage4_subdone);

    SC_METHOD(thread_ap_block_pp0_stage5_subdone);

    SC_METHOD(thread_ap_block_pp0_stage6_subdone);

    SC_METHOD(thread_ap_block_pp0_stage7);

    SC_METHOD(thread_ap_block_pp0_stage7_11001);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );

    SC_METHOD(thread_ap_block_pp0_stage7_subdone);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );

    SC_METHOD(thread_ap_block_pp0_stage8);

    SC_METHOD(thread_ap_block_pp0_stage8_01001);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_ap_block_pp0_stage8_11001);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_ap_block_pp0_stage8_subdone);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_block_state10_io );

    SC_METHOD(thread_ap_block_pp0_stage9);

    SC_METHOD(thread_ap_block_pp0_stage9_11001);

    SC_METHOD(thread_ap_block_pp0_stage9_subdone);

    SC_METHOD(thread_ap_block_state10_io);
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_block_state10_pp0_stage8_iter0);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_ap_block_state11_pp0_stage9_iter0);

    SC_METHOD(thread_ap_block_state12_pp0_stage10_iter0);

    SC_METHOD(thread_ap_block_state13_pp0_stage11_iter0);

    SC_METHOD(thread_ap_block_state14_pp0_stage12_iter0);

    SC_METHOD(thread_ap_block_state15_pp0_stage13_iter0);

    SC_METHOD(thread_ap_block_state16_pp0_stage14_iter0);

    SC_METHOD(thread_ap_block_state17_pp0_stage0_iter1);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_ap_block_state18_io);
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_block_state18_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state19_io);
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_block_state19_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state20_pp0_stage3_iter1);

    SC_METHOD(thread_ap_block_state21_pp0_stage4_iter1);

    SC_METHOD(thread_ap_block_state22_pp0_stage5_iter1);

    SC_METHOD(thread_ap_block_state23_pp0_stage6_iter1);

    SC_METHOD(thread_ap_block_state24_pp0_stage7_iter1);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_sig_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);

    SC_METHOD(thread_ap_block_state6_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage7_iter0);

    SC_METHOD(thread_ap_condition_690);
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_ap_condition_694);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );

    SC_METHOD(thread_ap_condition_699);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );

    SC_METHOD(thread_ap_condition_704);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_169_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_ARREADY);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_AWREADY);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_WREADY);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_key_ARREADY);
    sensitive << ( m_axi_key_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );

    SC_METHOD(thread_buf_r_blk_n_AR);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage8 );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_buf_r_blk_n_AW);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );

    SC_METHOD(thread_buf_r_blk_n_B);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7 );

    SC_METHOD(thread_buf_r_blk_n_R);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_buf_r_blk_n_W);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );

    SC_METHOD(thread_grp_fu_295_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage10 );
    sensitive << ( ap_block_pp0_stage10_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage14 );
    sensitive << ( ap_block_pp0_stage11_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage11 );
    sensitive << ( ap_block_pp0_stage12_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage12 );
    sensitive << ( ap_block_pp0_stage13_11001 );
    sensitive << ( ap_CS_fsm_pp0_stage13 );
    sensitive << ( ap_block_pp0_stage14_11001 );

    SC_METHOD(thread_grp_fu_295_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_881_reg_375 );
    sensitive << ( ap_CS_fsm_pp0_stage10 );
    sensitive << ( ap_block_pp0_stage10 );

    SC_METHOD(thread_i_6_cast_fu_181_p1);
    sensitive << ( i_6_fu_175_p2 );

    SC_METHOD(thread_i_6_fu_175_p2);
    sensitive << ( i_phi_fu_142_p4 );

    SC_METHOD(thread_i_phi_fu_142_p4);
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( i_reg_138 );
    sensitive << ( i_6_reg_343 );

    SC_METHOD(thread_key_blk_n_AR);
    sensitive << ( m_axi_key_ARREADY );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );

    SC_METHOD(thread_key_blk_n_R);
    sensitive << ( m_axi_key_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage8 );
    sensitive << ( tmp_reg_339 );

    SC_METHOD(thread_key_offset_cast_fu_149_p1);
    sensitive << ( key_offset );

    SC_METHOD(thread_m_axi_buf_r_ARADDR);
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( buf_addr_reg_353 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );
    sensitive << ( ap_block_pp0_stage8_01001 );

    SC_METHOD(thread_m_axi_buf_r_ARBURST);

    SC_METHOD(thread_m_axi_buf_r_ARCACHE);

    SC_METHOD(thread_m_axi_buf_r_ARID);

    SC_METHOD(thread_m_axi_buf_r_ARLEN);
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );
    sensitive << ( ap_block_pp0_stage8_01001 );

    SC_METHOD(thread_m_axi_buf_r_ARLOCK);

    SC_METHOD(thread_m_axi_buf_r_ARPROT);

    SC_METHOD(thread_m_axi_buf_r_ARQOS);

    SC_METHOD(thread_m_axi_buf_r_ARREGION);

    SC_METHOD(thread_m_axi_buf_r_ARSIZE);

    SC_METHOD(thread_m_axi_buf_r_ARUSER);

    SC_METHOD(thread_m_axi_buf_r_ARVALID);
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );
    sensitive << ( ap_block_pp0_stage8_01001 );

    SC_METHOD(thread_m_axi_buf_r_AWADDR);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_reg_pp0_iter1_buf_addr_reg_353 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWBURST);

    SC_METHOD(thread_m_axi_buf_r_AWCACHE);

    SC_METHOD(thread_m_axi_buf_r_AWID);

    SC_METHOD(thread_m_axi_buf_r_AWLEN);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWLOCK);

    SC_METHOD(thread_m_axi_buf_r_AWPROT);

    SC_METHOD(thread_m_axi_buf_r_AWQOS);

    SC_METHOD(thread_m_axi_buf_r_AWREGION);

    SC_METHOD(thread_m_axi_buf_r_AWSIZE);

    SC_METHOD(thread_m_axi_buf_r_AWUSER);

    SC_METHOD(thread_m_axi_buf_r_AWVALID);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_block_pp0_stage1_01001 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_block_pp0_stage7_11001 );

    SC_METHOD(thread_m_axi_buf_r_RREADY);
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_buf_r_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( tmp_55_reg_400 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_m_axi_buf_r_WID);

    SC_METHOD(thread_m_axi_buf_r_WLAST);

    SC_METHOD(thread_m_axi_buf_r_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_m_axi_buf_r_WUSER);

    SC_METHOD(thread_m_axi_buf_r_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_reg_pp0_iter1_tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );
    sensitive << ( ap_block_pp0_stage2_01001 );

    SC_METHOD(thread_m_axi_key_ARADDR);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( key_addr_reg_328 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_m_axi_key_ARBURST);

    SC_METHOD(thread_m_axi_key_ARCACHE);

    SC_METHOD(thread_m_axi_key_ARID);

    SC_METHOD(thread_m_axi_key_ARLEN);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_m_axi_key_ARLOCK);

    SC_METHOD(thread_m_axi_key_ARPROT);

    SC_METHOD(thread_m_axi_key_ARQOS);

    SC_METHOD(thread_m_axi_key_ARREGION);

    SC_METHOD(thread_m_axi_key_ARSIZE);

    SC_METHOD(thread_m_axi_key_ARUSER);

    SC_METHOD(thread_m_axi_key_ARVALID);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_reg_ioackin_m_axi_key_ARREADY );
    sensitive << ( ap_block_pp0_stage1_01001 );

    SC_METHOD(thread_m_axi_key_AWADDR);

    SC_METHOD(thread_m_axi_key_AWBURST);

    SC_METHOD(thread_m_axi_key_AWCACHE);

    SC_METHOD(thread_m_axi_key_AWID);

    SC_METHOD(thread_m_axi_key_AWLEN);

    SC_METHOD(thread_m_axi_key_AWLOCK);

    SC_METHOD(thread_m_axi_key_AWPROT);

    SC_METHOD(thread_m_axi_key_AWQOS);

    SC_METHOD(thread_m_axi_key_AWREGION);

    SC_METHOD(thread_m_axi_key_AWSIZE);

    SC_METHOD(thread_m_axi_key_AWUSER);

    SC_METHOD(thread_m_axi_key_AWVALID);

    SC_METHOD(thread_m_axi_key_BREADY);

    SC_METHOD(thread_m_axi_key_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_block_pp0_stage8_11001 );

    SC_METHOD(thread_m_axi_key_WDATA);

    SC_METHOD(thread_m_axi_key_WID);

    SC_METHOD(thread_m_axi_key_WLAST);

    SC_METHOD(thread_m_axi_key_WSTRB);

    SC_METHOD(thread_m_axi_key_WUSER);

    SC_METHOD(thread_m_axi_key_WVALID);

    SC_METHOD(thread_sum_fu_194_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_s_fu_185_p1 );

    SC_METHOD(thread_tmp1_fu_163_p2);
    sensitive << ( tmp_870_fu_159_p1 );

    SC_METHOD(thread_tmp_215_fu_189_p2);
    sensitive << ( tmp1_reg_334 );
    sensitive << ( i_phi_fu_142_p4 );

    SC_METHOD(thread_tmp_216_fu_219_p3);
    sensitive << ( tmp_215_reg_348 );

    SC_METHOD(thread_tmp_217_fu_226_p2);
    sensitive << ( tmp_216_fu_219_p3 );

    SC_METHOD(thread_tmp_55_fu_318_p2);
    sensitive << ( buf_addr_read_reg_395 );
    sensitive << ( tmp_888_fu_314_p1 );

    SC_METHOD(thread_tmp_870_fu_159_p1);
    sensitive << ( key_offset_offset );

    SC_METHOD(thread_tmp_871_fu_205_p1);
    sensitive << ( m_axi_key_RDATA );

    SC_METHOD(thread_tmp_872_fu_232_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_reg_339 );
    sensitive << ( ap_CS_fsm_pp0_stage9 );
    sensitive << ( ap_block_pp0_stage9_11001 );
    sensitive << ( tmp_216_fu_219_p3 );
    sensitive << ( tmp_217_fu_226_p2 );

    SC_METHOD(thread_tmp_873_fu_238_p1);
    sensitive << ( tmp_216_fu_219_p3 );

    SC_METHOD(thread_tmp_874_fu_242_p1);
    sensitive << ( tmp_217_fu_226_p2 );

    SC_METHOD(thread_tmp_875_fu_209_p4);
    sensitive << ( m_axi_key_RDATA );

    SC_METHOD(thread_tmp_876_fu_246_p2);
    sensitive << ( tmp_873_fu_238_p1 );
    sensitive << ( tmp_874_fu_242_p1 );

    SC_METHOD(thread_tmp_877_fu_252_p2);
    sensitive << ( tmp_873_fu_238_p1 );

    SC_METHOD(thread_tmp_878_fu_258_p2);
    sensitive << ( tmp_873_fu_238_p1 );
    sensitive << ( tmp_874_fu_242_p1 );

    SC_METHOD(thread_tmp_879_fu_264_p3);
    sensitive << ( tmp_872_fu_232_p2 );
    sensitive << ( tmp_876_fu_246_p2 );
    sensitive << ( tmp_878_fu_258_p2 );

    SC_METHOD(thread_tmp_880_fu_272_p3);
    sensitive << ( tmp_871_reg_360 );
    sensitive << ( tmp_875_reg_365 );
    sensitive << ( tmp_872_fu_232_p2 );

    SC_METHOD(thread_tmp_881_fu_278_p3);
    sensitive << ( tmp_873_fu_238_p1 );
    sensitive << ( tmp_872_fu_232_p2 );
    sensitive << ( tmp_877_fu_252_p2 );

    SC_METHOD(thread_tmp_882_fu_286_p2);
    sensitive << ( tmp_879_fu_264_p3 );

    SC_METHOD(thread_tmp_884_fu_300_p1);
    sensitive << ( tmp_882_reg_380 );

    SC_METHOD(thread_tmp_886_fu_303_p2);
    sensitive << ( tmp_884_fu_300_p1 );

    SC_METHOD(thread_tmp_887_fu_309_p2);
    sensitive << ( tmp_885_reg_390 );
    sensitive << ( tmp_886_fu_303_p2 );

    SC_METHOD(thread_tmp_888_fu_314_p1);
    sensitive << ( tmp_887_fu_309_p2 );

    SC_METHOD(thread_tmp_fu_169_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( i_phi_fu_142_p4 );

    SC_METHOD(thread_tmp_s_fu_185_p1);
    sensitive << ( i_6_cast_fu_181_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( tmp_fu_169_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage14_subdone );
    sensitive << ( ap_block_pp0_stage7_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage4_subdone );
    sensitive << ( ap_block_pp0_stage5_subdone );
    sensitive << ( ap_block_pp0_stage6_subdone );
    sensitive << ( ap_block_pp0_stage8_subdone );
    sensitive << ( ap_block_pp0_stage9_subdone );
    sensitive << ( ap_block_pp0_stage10_subdone );
    sensitive << ( ap_block_pp0_stage11_subdone );
    sensitive << ( ap_block_pp0_stage12_subdone );
    sensitive << ( ap_block_pp0_stage13_subdone );

    ap_CS_fsm = "00000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_key_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_aes_addRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_buf_r_AWVALID, "(port)m_axi_buf_r_AWVALID");
    sc_trace(mVcdFile, m_axi_buf_r_AWREADY, "(port)m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, m_axi_buf_r_AWADDR, "(port)m_axi_buf_r_AWADDR");
    sc_trace(mVcdFile, m_axi_buf_r_AWID, "(port)m_axi_buf_r_AWID");
    sc_trace(mVcdFile, m_axi_buf_r_AWLEN, "(port)m_axi_buf_r_AWLEN");
    sc_trace(mVcdFile, m_axi_buf_r_AWSIZE, "(port)m_axi_buf_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_AWBURST, "(port)m_axi_buf_r_AWBURST");
    sc_trace(mVcdFile, m_axi_buf_r_AWLOCK, "(port)m_axi_buf_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_AWCACHE, "(port)m_axi_buf_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_AWPROT, "(port)m_axi_buf_r_AWPROT");
    sc_trace(mVcdFile, m_axi_buf_r_AWQOS, "(port)m_axi_buf_r_AWQOS");
    sc_trace(mVcdFile, m_axi_buf_r_AWREGION, "(port)m_axi_buf_r_AWREGION");
    sc_trace(mVcdFile, m_axi_buf_r_AWUSER, "(port)m_axi_buf_r_AWUSER");
    sc_trace(mVcdFile, m_axi_buf_r_WVALID, "(port)m_axi_buf_r_WVALID");
    sc_trace(mVcdFile, m_axi_buf_r_WREADY, "(port)m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, m_axi_buf_r_WDATA, "(port)m_axi_buf_r_WDATA");
    sc_trace(mVcdFile, m_axi_buf_r_WSTRB, "(port)m_axi_buf_r_WSTRB");
    sc_trace(mVcdFile, m_axi_buf_r_WLAST, "(port)m_axi_buf_r_WLAST");
    sc_trace(mVcdFile, m_axi_buf_r_WID, "(port)m_axi_buf_r_WID");
    sc_trace(mVcdFile, m_axi_buf_r_WUSER, "(port)m_axi_buf_r_WUSER");
    sc_trace(mVcdFile, m_axi_buf_r_ARVALID, "(port)m_axi_buf_r_ARVALID");
    sc_trace(mVcdFile, m_axi_buf_r_ARREADY, "(port)m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, m_axi_buf_r_ARADDR, "(port)m_axi_buf_r_ARADDR");
    sc_trace(mVcdFile, m_axi_buf_r_ARID, "(port)m_axi_buf_r_ARID");
    sc_trace(mVcdFile, m_axi_buf_r_ARLEN, "(port)m_axi_buf_r_ARLEN");
    sc_trace(mVcdFile, m_axi_buf_r_ARSIZE, "(port)m_axi_buf_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_ARBURST, "(port)m_axi_buf_r_ARBURST");
    sc_trace(mVcdFile, m_axi_buf_r_ARLOCK, "(port)m_axi_buf_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_ARCACHE, "(port)m_axi_buf_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_ARPROT, "(port)m_axi_buf_r_ARPROT");
    sc_trace(mVcdFile, m_axi_buf_r_ARQOS, "(port)m_axi_buf_r_ARQOS");
    sc_trace(mVcdFile, m_axi_buf_r_ARREGION, "(port)m_axi_buf_r_ARREGION");
    sc_trace(mVcdFile, m_axi_buf_r_ARUSER, "(port)m_axi_buf_r_ARUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RVALID, "(port)m_axi_buf_r_RVALID");
    sc_trace(mVcdFile, m_axi_buf_r_RREADY, "(port)m_axi_buf_r_RREADY");
    sc_trace(mVcdFile, m_axi_buf_r_RDATA, "(port)m_axi_buf_r_RDATA");
    sc_trace(mVcdFile, m_axi_buf_r_RLAST, "(port)m_axi_buf_r_RLAST");
    sc_trace(mVcdFile, m_axi_buf_r_RID, "(port)m_axi_buf_r_RID");
    sc_trace(mVcdFile, m_axi_buf_r_RUSER, "(port)m_axi_buf_r_RUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RRESP, "(port)m_axi_buf_r_RRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BVALID, "(port)m_axi_buf_r_BVALID");
    sc_trace(mVcdFile, m_axi_buf_r_BREADY, "(port)m_axi_buf_r_BREADY");
    sc_trace(mVcdFile, m_axi_buf_r_BRESP, "(port)m_axi_buf_r_BRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BID, "(port)m_axi_buf_r_BID");
    sc_trace(mVcdFile, m_axi_buf_r_BUSER, "(port)m_axi_buf_r_BUSER");
    sc_trace(mVcdFile, buf_offset, "(port)buf_offset");
    sc_trace(mVcdFile, m_axi_key_AWVALID, "(port)m_axi_key_AWVALID");
    sc_trace(mVcdFile, m_axi_key_AWREADY, "(port)m_axi_key_AWREADY");
    sc_trace(mVcdFile, m_axi_key_AWADDR, "(port)m_axi_key_AWADDR");
    sc_trace(mVcdFile, m_axi_key_AWID, "(port)m_axi_key_AWID");
    sc_trace(mVcdFile, m_axi_key_AWLEN, "(port)m_axi_key_AWLEN");
    sc_trace(mVcdFile, m_axi_key_AWSIZE, "(port)m_axi_key_AWSIZE");
    sc_trace(mVcdFile, m_axi_key_AWBURST, "(port)m_axi_key_AWBURST");
    sc_trace(mVcdFile, m_axi_key_AWLOCK, "(port)m_axi_key_AWLOCK");
    sc_trace(mVcdFile, m_axi_key_AWCACHE, "(port)m_axi_key_AWCACHE");
    sc_trace(mVcdFile, m_axi_key_AWPROT, "(port)m_axi_key_AWPROT");
    sc_trace(mVcdFile, m_axi_key_AWQOS, "(port)m_axi_key_AWQOS");
    sc_trace(mVcdFile, m_axi_key_AWREGION, "(port)m_axi_key_AWREGION");
    sc_trace(mVcdFile, m_axi_key_AWUSER, "(port)m_axi_key_AWUSER");
    sc_trace(mVcdFile, m_axi_key_WVALID, "(port)m_axi_key_WVALID");
    sc_trace(mVcdFile, m_axi_key_WREADY, "(port)m_axi_key_WREADY");
    sc_trace(mVcdFile, m_axi_key_WDATA, "(port)m_axi_key_WDATA");
    sc_trace(mVcdFile, m_axi_key_WSTRB, "(port)m_axi_key_WSTRB");
    sc_trace(mVcdFile, m_axi_key_WLAST, "(port)m_axi_key_WLAST");
    sc_trace(mVcdFile, m_axi_key_WID, "(port)m_axi_key_WID");
    sc_trace(mVcdFile, m_axi_key_WUSER, "(port)m_axi_key_WUSER");
    sc_trace(mVcdFile, m_axi_key_ARVALID, "(port)m_axi_key_ARVALID");
    sc_trace(mVcdFile, m_axi_key_ARREADY, "(port)m_axi_key_ARREADY");
    sc_trace(mVcdFile, m_axi_key_ARADDR, "(port)m_axi_key_ARADDR");
    sc_trace(mVcdFile, m_axi_key_ARID, "(port)m_axi_key_ARID");
    sc_trace(mVcdFile, m_axi_key_ARLEN, "(port)m_axi_key_ARLEN");
    sc_trace(mVcdFile, m_axi_key_ARSIZE, "(port)m_axi_key_ARSIZE");
    sc_trace(mVcdFile, m_axi_key_ARBURST, "(port)m_axi_key_ARBURST");
    sc_trace(mVcdFile, m_axi_key_ARLOCK, "(port)m_axi_key_ARLOCK");
    sc_trace(mVcdFile, m_axi_key_ARCACHE, "(port)m_axi_key_ARCACHE");
    sc_trace(mVcdFile, m_axi_key_ARPROT, "(port)m_axi_key_ARPROT");
    sc_trace(mVcdFile, m_axi_key_ARQOS, "(port)m_axi_key_ARQOS");
    sc_trace(mVcdFile, m_axi_key_ARREGION, "(port)m_axi_key_ARREGION");
    sc_trace(mVcdFile, m_axi_key_ARUSER, "(port)m_axi_key_ARUSER");
    sc_trace(mVcdFile, m_axi_key_RVALID, "(port)m_axi_key_RVALID");
    sc_trace(mVcdFile, m_axi_key_RREADY, "(port)m_axi_key_RREADY");
    sc_trace(mVcdFile, m_axi_key_RDATA, "(port)m_axi_key_RDATA");
    sc_trace(mVcdFile, m_axi_key_RLAST, "(port)m_axi_key_RLAST");
    sc_trace(mVcdFile, m_axi_key_RID, "(port)m_axi_key_RID");
    sc_trace(mVcdFile, m_axi_key_RUSER, "(port)m_axi_key_RUSER");
    sc_trace(mVcdFile, m_axi_key_RRESP, "(port)m_axi_key_RRESP");
    sc_trace(mVcdFile, m_axi_key_BVALID, "(port)m_axi_key_BVALID");
    sc_trace(mVcdFile, m_axi_key_BREADY, "(port)m_axi_key_BREADY");
    sc_trace(mVcdFile, m_axi_key_BRESP, "(port)m_axi_key_BRESP");
    sc_trace(mVcdFile, m_axi_key_BID, "(port)m_axi_key_BID");
    sc_trace(mVcdFile, m_axi_key_BUSER, "(port)m_axi_key_BUSER");
    sc_trace(mVcdFile, key_offset, "(port)key_offset");
    sc_trace(mVcdFile, key_offset_offset, "(port)key_offset_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, buf_r_blk_n_AR, "buf_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage8, "ap_CS_fsm_pp0_stage8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage8, "ap_block_pp0_stage8");
    sc_trace(mVcdFile, tmp_reg_339, "tmp_reg_339");
    sc_trace(mVcdFile, buf_r_blk_n_R, "buf_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, buf_r_blk_n_AW, "buf_r_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_reg_339, "ap_reg_pp0_iter1_tmp_reg_339");
    sc_trace(mVcdFile, buf_r_blk_n_W, "buf_r_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, buf_r_blk_n_B, "buf_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_pp0_stage7, "ap_block_pp0_stage7");
    sc_trace(mVcdFile, key_blk_n_AR, "key_blk_n_AR");
    sc_trace(mVcdFile, key_blk_n_R, "key_blk_n_R");
    sc_trace(mVcdFile, i_reg_138, "i_reg_138");
    sc_trace(mVcdFile, key_addr_reg_328, "key_addr_reg_328");
    sc_trace(mVcdFile, tmp1_fu_163_p2, "tmp1_fu_163_p2");
    sc_trace(mVcdFile, tmp1_reg_334, "tmp1_reg_334");
    sc_trace(mVcdFile, tmp_fu_169_p2, "tmp_fu_169_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage0_iter1, "ap_block_state17_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_6_fu_175_p2, "i_6_fu_175_p2");
    sc_trace(mVcdFile, i_6_reg_343, "i_6_reg_343");
    sc_trace(mVcdFile, tmp_215_fu_189_p2, "tmp_215_fu_189_p2");
    sc_trace(mVcdFile, tmp_215_reg_348, "tmp_215_reg_348");
    sc_trace(mVcdFile, buf_addr_reg_353, "buf_addr_reg_353");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_buf_addr_reg_353, "ap_reg_pp0_iter1_buf_addr_reg_353");
    sc_trace(mVcdFile, tmp_871_fu_205_p1, "tmp_871_fu_205_p1");
    sc_trace(mVcdFile, tmp_871_reg_360, "tmp_871_reg_360");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage8_iter0, "ap_block_state10_pp0_stage8_iter0");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_ARREADY, "ap_sig_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_block_state10_io, "ap_block_state10_io");
    sc_trace(mVcdFile, ap_block_pp0_stage8_11001, "ap_block_pp0_stage8_11001");
    sc_trace(mVcdFile, tmp_875_fu_209_p4, "tmp_875_fu_209_p4");
    sc_trace(mVcdFile, tmp_875_reg_365, "tmp_875_reg_365");
    sc_trace(mVcdFile, tmp_880_fu_272_p3, "tmp_880_fu_272_p3");
    sc_trace(mVcdFile, tmp_880_reg_370, "tmp_880_reg_370");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage9, "ap_CS_fsm_pp0_stage9");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage9_iter0, "ap_block_state11_pp0_stage9_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage9_11001, "ap_block_pp0_stage9_11001");
    sc_trace(mVcdFile, tmp_881_fu_278_p3, "tmp_881_fu_278_p3");
    sc_trace(mVcdFile, tmp_881_reg_375, "tmp_881_reg_375");
    sc_trace(mVcdFile, tmp_882_fu_286_p2, "tmp_882_fu_286_p2");
    sc_trace(mVcdFile, tmp_882_reg_380, "tmp_882_reg_380");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage10, "ap_CS_fsm_pp0_stage10");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage10_iter0, "ap_block_state12_pp0_stage10_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage10_11001, "ap_block_pp0_stage10_11001");
    sc_trace(mVcdFile, grp_fu_295_p2, "grp_fu_295_p2");
    sc_trace(mVcdFile, tmp_885_reg_390, "tmp_885_reg_390");
    sc_trace(mVcdFile, buf_addr_read_reg_395, "buf_addr_read_reg_395");
    sc_trace(mVcdFile, tmp_55_fu_318_p2, "tmp_55_fu_318_p2");
    sc_trace(mVcdFile, tmp_55_reg_400, "tmp_55_reg_400");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_key_ARREADY, "ap_sig_ioackin_m_axi_key_ARREADY");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage1_iter1, "ap_block_state18_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_AWREADY, "ap_sig_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, ap_block_state18_io, "ap_block_state18_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage14_iter0, "ap_block_state16_pp0_stage14_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage14_subdone, "ap_block_pp0_stage14_subdone");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage14, "ap_CS_fsm_pp0_stage14");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage7_iter0, "ap_block_state9_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_state24_pp0_stage7_iter1, "ap_block_state24_pp0_stage7_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage7_subdone, "ap_block_pp0_stage7_subdone");
    sc_trace(mVcdFile, i_phi_fu_142_p4, "i_phi_fu_142_p4");
    sc_trace(mVcdFile, key_offset_cast_fu_149_p1, "key_offset_cast_fu_149_p1");
    sc_trace(mVcdFile, sum_fu_194_p2, "sum_fu_194_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_key_ARREADY, "ap_reg_ioackin_m_axi_key_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage1_01001, "ap_block_pp0_stage1_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_ARREADY, "ap_reg_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage8_01001, "ap_block_pp0_stage8_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_AWREADY, "ap_reg_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage7_11001, "ap_block_pp0_stage7_11001");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_WREADY, "ap_reg_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_WREADY, "ap_sig_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage2_iter1, "ap_block_state19_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_01001, "ap_block_pp0_stage2_01001");
    sc_trace(mVcdFile, ap_block_state19_io, "ap_block_state19_io");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, tmp_870_fu_159_p1, "tmp_870_fu_159_p1");
    sc_trace(mVcdFile, i_6_cast_fu_181_p1, "i_6_cast_fu_181_p1");
    sc_trace(mVcdFile, tmp_s_fu_185_p1, "tmp_s_fu_185_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage9, "ap_block_pp0_stage9");
    sc_trace(mVcdFile, tmp_216_fu_219_p3, "tmp_216_fu_219_p3");
    sc_trace(mVcdFile, tmp_217_fu_226_p2, "tmp_217_fu_226_p2");
    sc_trace(mVcdFile, tmp_873_fu_238_p1, "tmp_873_fu_238_p1");
    sc_trace(mVcdFile, tmp_874_fu_242_p1, "tmp_874_fu_242_p1");
    sc_trace(mVcdFile, tmp_872_fu_232_p2, "tmp_872_fu_232_p2");
    sc_trace(mVcdFile, tmp_876_fu_246_p2, "tmp_876_fu_246_p2");
    sc_trace(mVcdFile, tmp_878_fu_258_p2, "tmp_878_fu_258_p2");
    sc_trace(mVcdFile, tmp_877_fu_252_p2, "tmp_877_fu_252_p2");
    sc_trace(mVcdFile, tmp_879_fu_264_p3, "tmp_879_fu_264_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage10, "ap_block_pp0_stage10");
    sc_trace(mVcdFile, grp_fu_295_p1, "grp_fu_295_p1");
    sc_trace(mVcdFile, tmp_884_fu_300_p1, "tmp_884_fu_300_p1");
    sc_trace(mVcdFile, tmp_886_fu_303_p2, "tmp_886_fu_303_p2");
    sc_trace(mVcdFile, tmp_887_fu_309_p2, "tmp_887_fu_309_p2");
    sc_trace(mVcdFile, tmp_888_fu_314_p1, "tmp_888_fu_314_p1");
    sc_trace(mVcdFile, grp_fu_295_ce, "grp_fu_295_ce");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage11_iter0, "ap_block_state13_pp0_stage11_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage11_11001, "ap_block_pp0_stage11_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage11, "ap_CS_fsm_pp0_stage11");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage12_iter0, "ap_block_state14_pp0_stage12_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage12_11001, "ap_block_pp0_stage12_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage12, "ap_CS_fsm_pp0_stage12");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage13_iter0, "ap_block_state15_pp0_stage13_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage13_11001, "ap_block_pp0_stage13_11001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage13, "ap_CS_fsm_pp0_stage13");
    sc_trace(mVcdFile, ap_block_pp0_stage14_11001, "ap_block_pp0_stage14_11001");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage3_iter1, "ap_block_state20_pp0_stage3_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage4_iter0, "ap_block_state6_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage4_iter1, "ap_block_state21_pp0_stage4_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage4_subdone, "ap_block_pp0_stage4_subdone");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage5_iter0, "ap_block_state7_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_state22_pp0_stage5_iter1, "ap_block_state22_pp0_stage5_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage5_subdone, "ap_block_pp0_stage5_subdone");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage6_iter0, "ap_block_state8_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_state23_pp0_stage6_iter1, "ap_block_state23_pp0_stage6_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage6_subdone, "ap_block_pp0_stage6_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage8_subdone, "ap_block_pp0_stage8_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage9_subdone, "ap_block_pp0_stage9_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage10_subdone, "ap_block_pp0_stage10_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage11_subdone, "ap_block_pp0_stage11_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage12_subdone, "ap_block_pp0_stage12_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage13_subdone, "ap_block_pp0_stage13_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_690, "ap_condition_690");
    sc_trace(mVcdFile, ap_condition_694, "ap_condition_694");
    sc_trace(mVcdFile, ap_condition_699, "ap_condition_699");
    sc_trace(mVcdFile, ap_condition_704, "ap_condition_704");
#endif

    }
}

a0_aes_addRoundKey::~a0_aes_addRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete encrypt_lshr_256ncud_x_U45;
}

void a0_aes_addRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             ((esl_seteq<1,1,1>(ap_block_pp0_stage14_subdone.read(), ap_const_boolean_0) && 
               esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage14.read())) || 
              (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
               esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0))))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage14_subdone.read(), ap_const_boolean_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage14.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_690.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage8_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_694.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
                        esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read()))) {
                ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_699.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_704.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_key_ARREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_key_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_138 = i_6_reg_343.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_138 = ap_const_lv5_10;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_buf_addr_reg_353 = buf_addr_reg_353.read();
        ap_reg_pp0_iter1_tmp_reg_339 = tmp_reg_339.read();
        tmp_reg_339 = tmp_fu_169_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        buf_addr_read_reg_395 = m_axi_buf_r_RDATA.read();
        tmp_885_reg_390 = grp_fu_295_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_169_p2.read()))) {
        buf_addr_reg_353 = sum_fu_194_p2.read();
        tmp_215_reg_348 = tmp_215_fu_189_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_169_p2.read()))) {
        i_6_reg_343 = i_6_fu_175_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        key_addr_reg_328 = key_offset_cast_fu_149_p1.read();
        tmp1_reg_334 = tmp1_fu_163_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_55_reg_400 = tmp_55_fu_318_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        tmp_871_reg_360 = tmp_871_fu_205_p1.read();
        tmp_875_reg_365 = tmp_875_fu_209_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage9.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage9_11001.read(), ap_const_boolean_0))) {
        tmp_880_reg_370 = tmp_880_fu_272_p3.read();
        tmp_881_reg_375 = tmp_881_fu_278_p3.read();
        tmp_882_reg_380 = tmp_882_fu_286_p2.read();
    }
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage10() {
    ap_CS_fsm_pp0_stage10 = ap_CS_fsm.read()[11];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage11() {
    ap_CS_fsm_pp0_stage11 = ap_CS_fsm.read()[12];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage12() {
    ap_CS_fsm_pp0_stage12 = ap_CS_fsm.read()[13];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage13() {
    ap_CS_fsm_pp0_stage13 = ap_CS_fsm.read()[14];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage14() {
    ap_CS_fsm_pp0_stage14 = ap_CS_fsm.read()[15];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[8];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage8() {
    ap_CS_fsm_pp0_stage8 = ap_CS_fsm.read()[9];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_pp0_stage9() {
    ap_CS_fsm_pp0_stage9 = ap_CS_fsm.read()[10];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_aes_addRoundKey::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[16];
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage10() {
    ap_block_pp0_stage10 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage10_11001() {
    ap_block_pp0_stage10_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage10_subdone() {
    ap_block_pp0_stage10_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage11_11001() {
    ap_block_pp0_stage11_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage11_subdone() {
    ap_block_pp0_stage11_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage12_11001() {
    ap_block_pp0_stage12_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage12_subdone() {
    ap_block_pp0_stage12_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage13_11001() {
    ap_block_pp0_stage13_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage13_subdone() {
    ap_block_pp0_stage13_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage14_11001() {
    ap_block_pp0_stage14_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage14_subdone() {
    ap_block_pp0_stage14_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage1_01001() {
    ap_block_pp0_stage1_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state18_io.read())));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage2_01001() {
    ap_block_pp0_stage2_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state19_io.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage4_subdone() {
    ap_block_pp0_stage4_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage5_subdone() {
    ap_block_pp0_stage5_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage6_subdone() {
    ap_block_pp0_stage6_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage7() {
    ap_block_pp0_stage7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage7_11001() {
    ap_block_pp0_stage7_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage7_subdone() {
    ap_block_pp0_stage7_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage8() {
    ap_block_pp0_stage8 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage8_01001() {
    ap_block_pp0_stage8_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage8_11001() {
    ap_block_pp0_stage8_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage8_subdone() {
    ap_block_pp0_stage8_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state10_io.read())));
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage9() {
    ap_block_pp0_stage9 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage9_11001() {
    ap_block_pp0_stage9_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_pp0_stage9_subdone() {
    ap_block_pp0_stage9_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state10_io() {
    ap_block_state10_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_ARREADY.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state10_pp0_stage8_iter0() {
    ap_block_state10_pp0_stage8_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_key_RVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state11_pp0_stage9_iter0() {
    ap_block_state11_pp0_stage9_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state12_pp0_stage10_iter0() {
    ap_block_state12_pp0_stage10_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state13_pp0_stage11_iter0() {
    ap_block_state13_pp0_stage11_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state14_pp0_stage12_iter0() {
    ap_block_state14_pp0_stage12_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state15_pp0_stage13_iter0() {
    ap_block_state15_pp0_stage13_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state16_pp0_stage14_iter0() {
    ap_block_state16_pp0_stage14_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state17_pp0_stage0_iter1() {
    ap_block_state17_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_RVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state18_io() {
    ap_block_state18_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state18_pp0_stage1_iter1() {
    ap_block_state18_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state19_io() {
    ap_block_state19_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_WREADY.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state19_pp0_stage2_iter1() {
    ap_block_state19_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state20_pp0_stage3_iter1() {
    ap_block_state20_pp0_stage3_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state21_pp0_stage4_iter1() {
    ap_block_state21_pp0_stage4_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state22_pp0_stage5_iter1() {
    ap_block_state22_pp0_stage5_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state23_pp0_stage6_iter1() {
    ap_block_state23_pp0_stage6_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state24_pp0_stage7_iter1() {
    ap_block_state24_pp0_stage7_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_key_ARREADY.read()));
}

void a0_aes_addRoundKey::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state6_pp0_stage4_iter0() {
    ap_block_state6_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state7_pp0_stage5_iter0() {
    ap_block_state7_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state8_pp0_stage6_iter0() {
    ap_block_state8_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_block_state9_pp0_stage7_iter0() {
    ap_block_state9_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_aes_addRoundKey::thread_ap_condition_690() {
    ap_condition_690 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()));
}

void a0_aes_addRoundKey::thread_ap_condition_694() {
    ap_condition_694 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()));
}

void a0_aes_addRoundKey::thread_ap_condition_699() {
    ap_condition_699 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()));
}

void a0_aes_addRoundKey::thread_ap_condition_704() {
    ap_condition_704 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()));
}

void a0_aes_addRoundKey::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_fu_169_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void a0_aes_addRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_ap_sig_ioackin_m_axi_buf_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = m_axi_buf_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_ap_sig_ioackin_m_axi_buf_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = m_axi_buf_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_ap_sig_ioackin_m_axi_buf_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_WREADY = m_axi_buf_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_ap_sig_ioackin_m_axi_key_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read())) {
        ap_sig_ioackin_m_axi_key_ARREADY = m_axi_key_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_key_ARREADY = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_buf_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage8.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()))) {
        buf_r_blk_n_AR = m_axi_buf_r_ARREADY.read();
    } else {
        buf_r_blk_n_AR = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_buf_r_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()))) {
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY.read();
    } else {
        buf_r_blk_n_AW = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_buf_r_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage7.read(), ap_const_boolean_0))) {
        buf_r_blk_n_B = m_axi_buf_r_BVALID.read();
    } else {
        buf_r_blk_n_B = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_buf_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        buf_r_blk_n_R = m_axi_buf_r_RVALID.read();
    } else {
        buf_r_blk_n_R = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_buf_r_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0))) {
        buf_r_blk_n_W = m_axi_buf_r_WREADY.read();
    } else {
        buf_r_blk_n_W = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_grp_fu_295_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage10.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage10_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage11.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage11_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage12.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage12_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage13.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage13_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage14.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage14_11001.read(), ap_const_boolean_0)))) {
        grp_fu_295_ce = ap_const_logic_1;
    } else {
        grp_fu_295_ce = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_grp_fu_295_p1() {
    grp_fu_295_p1 = esl_zext<256,9>(tmp_881_reg_375.read());
}

void a0_aes_addRoundKey::thread_i_6_cast_fu_181_p1() {
    i_6_cast_fu_181_p1 = esl_sext<8,5>(i_6_fu_175_p2.read());
}

void a0_aes_addRoundKey::thread_i_6_fu_175_p2() {
    i_6_fu_175_p2 = (!ap_const_lv5_1F.is_01() || !i_phi_fu_142_p4.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(i_phi_fu_142_p4.read()));
}

void a0_aes_addRoundKey::thread_i_phi_fu_142_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        i_phi_fu_142_p4 = i_6_reg_343.read();
    } else {
        i_phi_fu_142_p4 = i_reg_138.read();
    }
}

void a0_aes_addRoundKey::thread_key_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0))) {
        key_blk_n_AR = m_axi_key_ARREADY.read();
    } else {
        key_blk_n_AR = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_key_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage8.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()))) {
        key_blk_n_R = m_axi_key_RVALID.read();
    } else {
        key_blk_n_R = ap_const_logic_1;
    }
}

void a0_aes_addRoundKey::thread_key_offset_cast_fu_149_p1() {
    key_offset_cast_fu_149_p1 = esl_zext<32,25>(key_offset.read());
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARADDR() {
    m_axi_buf_r_ARADDR = buf_addr_reg_353.read();
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARBURST() {
    m_axi_buf_r_ARBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARCACHE() {
    m_axi_buf_r_ARCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARID() {
    m_axi_buf_r_ARID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARLEN() {
    m_axi_buf_r_ARLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARLOCK() {
    m_axi_buf_r_ARLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARPROT() {
    m_axi_buf_r_ARPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARQOS() {
    m_axi_buf_r_ARQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARREGION() {
    m_axi_buf_r_ARREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARSIZE() {
    m_axi_buf_r_ARSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARUSER() {
    m_axi_buf_r_ARUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage8_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read()))) {
        m_axi_buf_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_ARVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWADDR() {
    m_axi_buf_r_AWADDR = ap_reg_pp0_iter1_buf_addr_reg_353.read();
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWBURST() {
    m_axi_buf_r_AWBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWCACHE() {
    m_axi_buf_r_AWCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWID() {
    m_axi_buf_r_AWID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWLEN() {
    m_axi_buf_r_AWLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWLOCK() {
    m_axi_buf_r_AWLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWPROT() {
    m_axi_buf_r_AWPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWQOS() {
    m_axi_buf_r_AWQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWREGION() {
    m_axi_buf_r_AWREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWSIZE() {
    m_axi_buf_r_AWSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWUSER() {
    m_axi_buf_r_AWUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read()))) {
        m_axi_buf_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_AWVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage7_11001.read(), ap_const_boolean_0))) {
        m_axi_buf_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_BREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_buf_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_RREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WDATA() {
    m_axi_buf_r_WDATA = tmp_55_reg_400.read();
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WID() {
    m_axi_buf_r_WID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WLAST() {
    m_axi_buf_r_WLAST = ap_const_logic_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WSTRB() {
    m_axi_buf_r_WSTRB = ap_const_lv1_1;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WUSER() {
    m_axi_buf_r_WUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_buf_r_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read()))) {
        m_axi_buf_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_WVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_key_ARADDR() {
    m_axi_key_ARADDR = key_addr_reg_328.read();
}

void a0_aes_addRoundKey::thread_m_axi_key_ARBURST() {
    m_axi_key_ARBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARCACHE() {
    m_axi_key_ARCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARID() {
    m_axi_key_ARID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARLEN() {
    m_axi_key_ARLEN = ap_const_lv32_1;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARLOCK() {
    m_axi_key_ARLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARPROT() {
    m_axi_key_ARPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARQOS() {
    m_axi_key_ARQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARREGION() {
    m_axi_key_ARREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARSIZE() {
    m_axi_key_ARSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARUSER() {
    m_axi_key_ARUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_key_ARREADY.read()))) {
        m_axi_key_ARVALID = ap_const_logic_1;
    } else {
        m_axi_key_ARVALID = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_key_AWADDR() {
    m_axi_key_AWADDR = ap_const_lv32_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWBURST() {
    m_axi_key_AWBURST = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWCACHE() {
    m_axi_key_AWCACHE = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWID() {
    m_axi_key_AWID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWLEN() {
    m_axi_key_AWLEN = ap_const_lv32_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWLOCK() {
    m_axi_key_AWLOCK = ap_const_lv2_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWPROT() {
    m_axi_key_AWPROT = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWQOS() {
    m_axi_key_AWQOS = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWREGION() {
    m_axi_key_AWREGION = ap_const_lv4_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWSIZE() {
    m_axi_key_AWSIZE = ap_const_lv3_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWUSER() {
    m_axi_key_AWUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_AWVALID() {
    m_axi_key_AWVALID = ap_const_logic_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_BREADY() {
    m_axi_key_BREADY = ap_const_logic_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage8.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_reg_339.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage8_11001.read(), ap_const_boolean_0))) {
        m_axi_key_RREADY = ap_const_logic_1;
    } else {
        m_axi_key_RREADY = ap_const_logic_0;
    }
}

void a0_aes_addRoundKey::thread_m_axi_key_WDATA() {
    m_axi_key_WDATA = ap_const_lv1024_lc_2;
}

void a0_aes_addRoundKey::thread_m_axi_key_WID() {
    m_axi_key_WID = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_WLAST() {
    m_axi_key_WLAST = ap_const_logic_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_WSTRB() {
    m_axi_key_WSTRB = ap_const_lv128_lc_2;
}

void a0_aes_addRoundKey::thread_m_axi_key_WUSER() {
    m_axi_key_WUSER = ap_const_lv1_0;
}

void a0_aes_addRoundKey::thread_m_axi_key_WVALID() {
    m_axi_key_WVALID = ap_const_logic_0;
}

void a0_aes_addRoundKey::thread_sum_fu_194_p2() {
    sum_fu_194_p2 = (!buf_offset.read().is_01() || !tmp_s_fu_185_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_s_fu_185_p1.read()));
}

void a0_aes_addRoundKey::thread_tmp1_fu_163_p2() {
    tmp1_fu_163_p2 = (!ap_const_lv5_1F.is_01() || !tmp_870_fu_159_p1.read().is_01())? sc_lv<5>(): (sc_bigint<5>(ap_const_lv5_1F) + sc_biguint<5>(tmp_870_fu_159_p1.read()));
}

void a0_aes_addRoundKey::thread_tmp_215_fu_189_p2() {
    tmp_215_fu_189_p2 = (!tmp1_reg_334.read().is_01() || !i_phi_fu_142_p4.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp1_reg_334.read()) + sc_biguint<5>(i_phi_fu_142_p4.read()));
}

void a0_aes_addRoundKey::thread_tmp_216_fu_219_p3() {
    tmp_216_fu_219_p3 = esl_concat<5,3>(tmp_215_reg_348.read(), ap_const_lv3_0);
}

void a0_aes_addRoundKey::thread_tmp_217_fu_226_p2() {
    tmp_217_fu_226_p2 = (tmp_216_fu_219_p3.read() | ap_const_lv8_7);
}

void a0_aes_addRoundKey::thread_tmp_55_fu_318_p2() {
    tmp_55_fu_318_p2 = (buf_addr_read_reg_395.read() ^ tmp_888_fu_314_p1.read());
}

void a0_aes_addRoundKey::thread_tmp_870_fu_159_p1() {
    tmp_870_fu_159_p1 = key_offset_offset.read().range(5-1, 0);
}

void a0_aes_addRoundKey::thread_tmp_871_fu_205_p1() {
    tmp_871_fu_205_p1 = m_axi_key_RDATA.read().range(256-1, 0);
}

void a0_aes_addRoundKey::thread_tmp_872_fu_232_p2() {
    tmp_872_fu_232_p2 = (!tmp_216_fu_219_p3.read().is_01() || !tmp_217_fu_226_p2.read().is_01())? sc_lv<1>(): (sc_biguint<8>(tmp_216_fu_219_p3.read()) > sc_biguint<8>(tmp_217_fu_226_p2.read()));
}

void a0_aes_addRoundKey::thread_tmp_873_fu_238_p1() {
    tmp_873_fu_238_p1 = esl_zext<9,8>(tmp_216_fu_219_p3.read());
}

void a0_aes_addRoundKey::thread_tmp_874_fu_242_p1() {
    tmp_874_fu_242_p1 = esl_zext<9,8>(tmp_217_fu_226_p2.read());
}

void a0_aes_addRoundKey::thread_tmp_875_fu_209_p4() {
    tmp_875_fu_209_p4 = m_axi_key_RDATA.read().range(0, 255);
}

void a0_aes_addRoundKey::thread_tmp_876_fu_246_p2() {
    tmp_876_fu_246_p2 = (!tmp_873_fu_238_p1.read().is_01() || !tmp_874_fu_242_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_873_fu_238_p1.read()) - sc_biguint<9>(tmp_874_fu_242_p1.read()));
}

void a0_aes_addRoundKey::thread_tmp_877_fu_252_p2() {
    tmp_877_fu_252_p2 = (tmp_873_fu_238_p1.read() ^ ap_const_lv9_FF);
}

void a0_aes_addRoundKey::thread_tmp_878_fu_258_p2() {
    tmp_878_fu_258_p2 = (!tmp_874_fu_242_p1.read().is_01() || !tmp_873_fu_238_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_874_fu_242_p1.read()) - sc_biguint<9>(tmp_873_fu_238_p1.read()));
}

void a0_aes_addRoundKey::thread_tmp_879_fu_264_p3() {
    tmp_879_fu_264_p3 = (!tmp_872_fu_232_p2.read()[0].is_01())? sc_lv<9>(): ((tmp_872_fu_232_p2.read()[0].to_bool())? tmp_876_fu_246_p2.read(): tmp_878_fu_258_p2.read());
}

void a0_aes_addRoundKey::thread_tmp_880_fu_272_p3() {
    tmp_880_fu_272_p3 = (!tmp_872_fu_232_p2.read()[0].is_01())? sc_lv<256>(): ((tmp_872_fu_232_p2.read()[0].to_bool())? tmp_875_reg_365.read(): tmp_871_reg_360.read());
}

void a0_aes_addRoundKey::thread_tmp_881_fu_278_p3() {
    tmp_881_fu_278_p3 = (!tmp_872_fu_232_p2.read()[0].is_01())? sc_lv<9>(): ((tmp_872_fu_232_p2.read()[0].to_bool())? tmp_877_fu_252_p2.read(): tmp_873_fu_238_p1.read());
}

void a0_aes_addRoundKey::thread_tmp_882_fu_286_p2() {
    tmp_882_fu_286_p2 = (!ap_const_lv9_FF.is_01() || !tmp_879_fu_264_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_FF) - sc_biguint<9>(tmp_879_fu_264_p3.read()));
}

void a0_aes_addRoundKey::thread_tmp_884_fu_300_p1() {
    tmp_884_fu_300_p1 = esl_zext<256,9>(tmp_882_reg_380.read());
}

void a0_aes_addRoundKey::thread_tmp_886_fu_303_p2() {
    tmp_886_fu_303_p2 = (!tmp_884_fu_300_p1.read().is_01())? sc_lv<256>(): ap_const_lv256_lc_4 >> (unsigned short)tmp_884_fu_300_p1.read().to_uint();
}

void a0_aes_addRoundKey::thread_tmp_887_fu_309_p2() {
    tmp_887_fu_309_p2 = (tmp_885_reg_390.read() & tmp_886_fu_303_p2.read());
}

void a0_aes_addRoundKey::thread_tmp_888_fu_314_p1() {
    tmp_888_fu_314_p1 = tmp_887_fu_309_p2.read().range(8-1, 0);
}

void a0_aes_addRoundKey::thread_tmp_fu_169_p2() {
    tmp_fu_169_p2 = (!i_phi_fu_142_p4.read().is_01() || !ap_const_lv5_0.is_01())? sc_lv<1>(): sc_lv<1>(i_phi_fu_142_p4.read() == ap_const_lv5_0);
}

void a0_aes_addRoundKey::thread_tmp_s_fu_185_p1() {
    tmp_s_fu_185_p1 = esl_zext<32,8>(i_6_cast_fu_181_p1.read());
}

void a0_aes_addRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_169_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_169_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 128 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage7_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage8_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            }
            break;
        case 1024 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage9_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage10_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            }
            break;
        case 4096 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage11_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            }
            break;
        case 8192 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage12_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            }
            break;
        case 16384 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage13_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            }
            break;
        case 32768 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage14_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXX";
            break;
    }
}

}

