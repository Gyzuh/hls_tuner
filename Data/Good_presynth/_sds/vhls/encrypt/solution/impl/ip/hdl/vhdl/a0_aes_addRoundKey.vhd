-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_addRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    buf_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWVALID : OUT STD_LOGIC;
    m_axi_key_AWREADY : IN STD_LOGIC;
    m_axi_key_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WVALID : OUT STD_LOGIC;
    m_axi_key_WREADY : IN STD_LOGIC;
    m_axi_key_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_key_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_key_WLAST : OUT STD_LOGIC;
    m_axi_key_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARVALID : OUT STD_LOGIC;
    m_axi_key_ARREADY : IN STD_LOGIC;
    m_axi_key_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_key_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_key_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_key_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RVALID : IN STD_LOGIC;
    m_axi_key_RREADY : OUT STD_LOGIC;
    m_axi_key_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_key_RLAST : IN STD_LOGIC;
    m_axi_key_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BVALID : IN STD_LOGIC;
    m_axi_key_BREADY : OUT STD_LOGIC;
    m_axi_key_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_key_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_key_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    key_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    key_offset_offset : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of a0_aes_addRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1024_lc_2 : STD_LOGIC_VECTOR (1023 downto
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv256_lc_4 : STD_LOGIC_VECTOR (255 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal tmp_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal key_blk_n_AR : STD_LOGIC;
    signal key_blk_n_R : STD_LOGIC;
    signal i_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_addr_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_163_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_6_fu_175_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_343 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_215_fu_189_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_215_reg_348 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_addr_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_buf_addr_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_871_fu_205_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_871_reg_360 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_875_fu_209_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_875_reg_365 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_880_fu_272_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_880_reg_370 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal tmp_881_fu_278_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_881_reg_375 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_882_fu_286_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_882_reg_380 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_885_reg_390 : STD_LOGIC_VECTOR (255 downto 0);
    signal buf_addr_read_reg_395 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_400 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_key_ARREADY : STD_LOGIC;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC;
    signal ap_block_state18_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal i_phi_fu_142_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal key_offset_cast_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_fu_194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_key_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage8_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_buf_r_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_buf_r_WREADY : STD_LOGIC;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_870_fu_159_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_cast_fu_181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal tmp_216_fu_219_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_217_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_873_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_874_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_872_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_876_fu_246_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_878_fu_258_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_877_fu_252_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_879_fu_264_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_884_fu_300_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_886_fu_303_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_887_fu_309_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_888_fu_314_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_295_ce : STD_LOGIC;
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_690 : BOOLEAN;
    signal ap_condition_694 : BOOLEAN;
    signal ap_condition_699 : BOOLEAN;
    signal ap_condition_704 : BOOLEAN;

    component a0_encrypt_lshr_256ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (255 downto 0);
        din1 : IN STD_LOGIC_VECTOR (255 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    encrypt_lshr_256ncud_x_U45 : component a0_encrypt_lshr_256ncud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        OP => 1,
        din0_WIDTH => 256,
        din1_WIDTH => 9,
        dout_WIDTH => 256)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_880_reg_370,
        din1 => grp_fu_295_p1,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_block_pp0_stage14_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_subdone = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                elsif ((((ap_block_pp0_stage14_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_subdone = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_condition_690 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage8_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_buf_r_ARREADY) and (ap_block_pp0_stage8_01001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
            else
                if ((ap_condition_694 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage1_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_buf_r_AWREADY))) then 
                        ap_reg_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_buf_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
            else
                if ((ap_condition_699 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage2_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_buf_r_WREADY) and (ap_block_pp0_stage2_01001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_key_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
            else
                if ((ap_condition_704 = ap_const_boolean_1)) then
                    if ((ap_block_pp0_stage1_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_key_ARREADY) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
                i_reg_138 <= i_6_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_138 <= ap_const_lv5_10;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_buf_addr_reg_353 <= buf_addr_reg_353;
                ap_reg_pp0_iter1_tmp_reg_339 <= tmp_reg_339;
                tmp_reg_339 <= tmp_fu_169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                buf_addr_read_reg_395 <= m_axi_buf_r_RDATA;
                tmp_885_reg_390 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_fu_169_p2))) then
                buf_addr_reg_353 <= sum_fu_194_p2;
                tmp_215_reg_348 <= tmp_215_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_fu_169_p2))) then
                i_6_reg_343 <= i_6_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    key_addr_reg_328(24 downto 0) <= key_offset_cast_fu_149_p1(24 downto 0);
                tmp1_reg_334 <= tmp1_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_block_pp0_stage1_11001 = ap_const_boolean_0))) then
                tmp_55_reg_400 <= tmp_55_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_lv1_0 = tmp_reg_339) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0))) then
                tmp_871_reg_360 <= tmp_871_fu_205_p1;
                tmp_875_reg_365 <= tmp_875_fu_209_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_11001 = ap_const_boolean_0))) then
                tmp_880_reg_370 <= tmp_880_fu_272_p3;
                tmp_881_reg_375 <= tmp_881_fu_278_p3;
                    tmp_882_reg_380(8 downto 1) <= tmp_882_fu_286_p2(8 downto 1);
            end if;
        end if;
    end process;
    key_addr_reg_328(31 downto 25) <= "0000000";
    tmp_882_reg_380(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, tmp_fu_169_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_fu_169_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (tmp_fu_169_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_block_pp0_stage2_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if (((ap_block_pp0_stage7_subdone = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_block_pp0_stage10_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_block_pp0_stage11_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_block_pp0_stage12_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_block_pp0_stage13_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_block_pp0_stage14_subdone = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(16);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_buf_r_RVALID, tmp_reg_339, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_buf_r_RVALID, tmp_reg_339, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state18_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state18_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_block_state18_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3_io)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state18_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state19_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state19_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state19_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state19_io));
    end process;

        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(m_axi_buf_r_BVALID, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339)
    begin
                ap_block_pp0_stage7_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(m_axi_buf_r_BVALID, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339)
    begin
                ap_block_pp0_stage7_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_01001_assign_proc : process(m_axi_key_RVALID, ap_enable_reg_pp0_iter0, tmp_reg_339)
    begin
                ap_block_pp0_stage8_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = m_axi_key_RVALID));
    end process;


    ap_block_pp0_stage8_11001_assign_proc : process(m_axi_key_RVALID, ap_enable_reg_pp0_iter0, tmp_reg_339, ap_block_state10_io)
    begin
                ap_block_pp0_stage8_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = m_axi_key_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io)));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(m_axi_key_RVALID, ap_enable_reg_pp0_iter0, tmp_reg_339, ap_block_state10_io)
    begin
                ap_block_pp0_stage8_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = m_axi_key_RVALID)) or (ap_const_boolean_1 = ap_block_state10_io)));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_io_assign_proc : process(tmp_reg_339, ap_sig_ioackin_m_axi_buf_r_ARREADY)
    begin
                ap_block_state10_io <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_ARREADY));
    end process;


    ap_block_state10_pp0_stage8_iter0_assign_proc : process(m_axi_key_RVALID, tmp_reg_339)
    begin
                ap_block_state10_pp0_stage8_iter0 <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = m_axi_key_RVALID));
    end process;

        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter1_assign_proc : process(m_axi_buf_r_RVALID, tmp_reg_339)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = m_axi_buf_r_RVALID));
    end process;


    ap_block_state18_io_assign_proc : process(ap_reg_pp0_iter1_tmp_reg_339, ap_sig_ioackin_m_axi_buf_r_AWREADY)
    begin
                ap_block_state18_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_AWREADY));
    end process;

        ap_block_state18_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(ap_reg_pp0_iter1_tmp_reg_339, ap_sig_ioackin_m_axi_buf_r_WREADY)
    begin
                ap_block_state19_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_buf_r_WREADY));
    end process;

        ap_block_state19_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp0_stage7_iter1_assign_proc : process(m_axi_buf_r_BVALID, ap_reg_pp0_iter1_tmp_reg_339)
    begin
                ap_block_state24_pp0_stage7_iter1 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_0 = m_axi_buf_r_BVALID));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(tmp_reg_339, ap_sig_ioackin_m_axi_key_ARREADY)
    begin
                ap_block_state3_io <= ((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_key_ARREADY));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_690_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter0, tmp_reg_339)
    begin
                ap_condition_690 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339));
    end process;


    ap_condition_694_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_reg_pp0_iter1_tmp_reg_339)
    begin
                ap_condition_694 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339));
    end process;


    ap_condition_699_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339, ap_CS_fsm_pp0_stage2)
    begin
                ap_condition_699 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_704_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_reg_339, ap_CS_fsm_pp0_stage1)
    begin
                ap_condition_704 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_169_p2)
    begin
        if ((tmp_fu_169_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state25)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_ARREADY_assign_proc : process(m_axi_buf_r_ARREADY, ap_reg_ioackin_m_axi_buf_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= m_axi_buf_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_AWREADY_assign_proc : process(m_axi_buf_r_AWREADY, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= m_axi_buf_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_buf_r_WREADY_assign_proc : process(m_axi_buf_r_WREADY, ap_reg_ioackin_m_axi_buf_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY)) then 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= m_axi_buf_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_buf_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_key_ARREADY_assign_proc : process(m_axi_key_ARREADY, ap_reg_ioackin_m_axi_key_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY)) then 
            ap_sig_ioackin_m_axi_key_ARREADY <= m_axi_key_ARREADY;
        else 
            ap_sig_ioackin_m_axi_key_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AR_assign_proc : process(m_axi_buf_r_ARREADY, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter0, ap_block_pp0_stage8, tmp_reg_339)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage8 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_reg_339))) then 
            buf_r_blk_n_AR <= m_axi_buf_r_ARREADY;
        else 
            buf_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_reg_pp0_iter1_tmp_reg_339)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339))) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7 = ap_const_boolean_0))) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_R_assign_proc : process(m_axi_buf_r_RVALID, tmp_reg_339, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            buf_r_blk_n_R <= m_axi_buf_r_RVALID;
        else 
            buf_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2 = ap_const_boolean_0))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_295_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage14_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_block_pp0_stage10_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_block_pp0_stage11_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_block_pp0_stage12_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_block_pp0_stage13_11001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_block_pp0_stage14_11001 = ap_const_boolean_0)))) then 
            grp_fu_295_ce <= ap_const_logic_1;
        else 
            grp_fu_295_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_881_reg_375),256));
        i_6_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_6_fu_175_p2),8));

    i_6_fu_175_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(i_phi_fu_142_p4));

    i_phi_fu_142_p4_assign_proc : process(tmp_reg_339, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_138, i_6_reg_343)
    begin
        if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            i_phi_fu_142_p4 <= i_6_reg_343;
        else 
            i_phi_fu_142_p4 <= i_reg_138;
        end if; 
    end process;


    key_blk_n_AR_assign_proc : process(m_axi_key_ARREADY, ap_enable_reg_pp0_iter0, tmp_reg_339, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1 = ap_const_boolean_0))) then 
            key_blk_n_AR <= m_axi_key_ARREADY;
        else 
            key_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    key_blk_n_R_assign_proc : process(m_axi_key_RVALID, ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter0, ap_block_pp0_stage8, tmp_reg_339)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage8 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_reg_339))) then 
            key_blk_n_R <= m_axi_key_RVALID;
        else 
            key_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    key_offset_cast_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(key_offset),32));
    m_axi_buf_r_ARADDR <= buf_addr_reg_353;
    m_axi_buf_r_ARBURST <= ap_const_lv2_0;
    m_axi_buf_r_ARCACHE <= ap_const_lv4_0;
    m_axi_buf_r_ARID <= ap_const_lv1_0;
    m_axi_buf_r_ARLEN <= ap_const_lv32_1;
    m_axi_buf_r_ARLOCK <= ap_const_lv2_0;
    m_axi_buf_r_ARPROT <= ap_const_lv3_0;
    m_axi_buf_r_ARQOS <= ap_const_lv4_0;
    m_axi_buf_r_ARREGION <= ap_const_lv4_0;
    m_axi_buf_r_ARSIZE <= ap_const_lv3_0;
    m_axi_buf_r_ARUSER <= ap_const_lv1_0;

    m_axi_buf_r_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter0, tmp_reg_339, ap_reg_ioackin_m_axi_buf_r_ARREADY, ap_block_pp0_stage8_01001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_block_pp0_stage8_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_ARREADY))) then 
            m_axi_buf_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_buf_r_AWADDR <= ap_reg_pp0_iter1_buf_addr_reg_353;
    m_axi_buf_r_AWBURST <= ap_const_lv2_0;
    m_axi_buf_r_AWCACHE <= ap_const_lv4_0;
    m_axi_buf_r_AWID <= ap_const_lv1_0;
    m_axi_buf_r_AWLEN <= ap_const_lv32_1;
    m_axi_buf_r_AWLOCK <= ap_const_lv2_0;
    m_axi_buf_r_AWPROT <= ap_const_lv3_0;
    m_axi_buf_r_AWQOS <= ap_const_lv4_0;
    m_axi_buf_r_AWREGION <= ap_const_lv4_0;
    m_axi_buf_r_AWSIZE <= ap_const_lv3_0;
    m_axi_buf_r_AWUSER <= ap_const_lv1_0;

    m_axi_buf_r_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_reg_pp0_iter1_tmp_reg_339, ap_block_pp0_stage1_01001, ap_reg_ioackin_m_axi_buf_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_AWREADY))) then 
            m_axi_buf_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_11001 = ap_const_boolean_0))) then 
            m_axi_buf_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_buf_r_RREADY_assign_proc : process(tmp_reg_339, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            m_axi_buf_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_buf_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_buf_r_WDATA <= tmp_55_reg_400;
    m_axi_buf_r_WID <= ap_const_lv1_0;
    m_axi_buf_r_WLAST <= ap_const_logic_0;
    m_axi_buf_r_WSTRB <= ap_const_lv1_1;
    m_axi_buf_r_WUSER <= ap_const_lv1_0;

    m_axi_buf_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_reg_339, ap_CS_fsm_pp0_stage2, ap_reg_ioackin_m_axi_buf_r_WREADY, ap_block_pp0_stage2_01001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_buf_r_WREADY))) then 
            m_axi_buf_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_ARADDR <= key_addr_reg_328;
    m_axi_key_ARBURST <= ap_const_lv2_0;
    m_axi_key_ARCACHE <= ap_const_lv4_0;
    m_axi_key_ARID <= ap_const_lv1_0;
    m_axi_key_ARLEN <= ap_const_lv32_1;
    m_axi_key_ARLOCK <= ap_const_lv2_0;
    m_axi_key_ARPROT <= ap_const_lv3_0;
    m_axi_key_ARQOS <= ap_const_lv4_0;
    m_axi_key_ARREGION <= ap_const_lv4_0;
    m_axi_key_ARSIZE <= ap_const_lv3_0;
    m_axi_key_ARUSER <= ap_const_lv1_0;

    m_axi_key_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_reg_339, ap_CS_fsm_pp0_stage1, ap_reg_ioackin_m_axi_key_ARREADY, ap_block_pp0_stage1_01001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_key_ARREADY))) then 
            m_axi_key_ARVALID <= ap_const_logic_1;
        else 
            m_axi_key_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_AWADDR <= ap_const_lv32_0;
    m_axi_key_AWBURST <= ap_const_lv2_0;
    m_axi_key_AWCACHE <= ap_const_lv4_0;
    m_axi_key_AWID <= ap_const_lv1_0;
    m_axi_key_AWLEN <= ap_const_lv32_0;
    m_axi_key_AWLOCK <= ap_const_lv2_0;
    m_axi_key_AWPROT <= ap_const_lv3_0;
    m_axi_key_AWQOS <= ap_const_lv4_0;
    m_axi_key_AWREGION <= ap_const_lv4_0;
    m_axi_key_AWSIZE <= ap_const_lv3_0;
    m_axi_key_AWUSER <= ap_const_lv1_0;
    m_axi_key_AWVALID <= ap_const_logic_0;
    m_axi_key_BREADY <= ap_const_logic_0;

    m_axi_key_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage8, ap_enable_reg_pp0_iter0, tmp_reg_339, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_reg_339) and (ap_block_pp0_stage8_11001 = ap_const_boolean_0))) then 
            m_axi_key_RREADY <= ap_const_logic_1;
        else 
            m_axi_key_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_key_WDATA <= ap_const_lv1024_lc_2;
    m_axi_key_WID <= ap_const_lv1_0;
    m_axi_key_WLAST <= ap_const_logic_0;
    m_axi_key_WSTRB <= ap_const_lv128_lc_2;
    m_axi_key_WUSER <= ap_const_lv1_0;
    m_axi_key_WVALID <= ap_const_logic_0;
    sum_fu_194_p2 <= std_logic_vector(unsigned(buf_offset) + unsigned(tmp_s_fu_185_p1));
    tmp1_fu_163_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(tmp_870_fu_159_p1));
    tmp_215_fu_189_p2 <= std_logic_vector(unsigned(tmp1_reg_334) + unsigned(i_phi_fu_142_p4));
    tmp_216_fu_219_p3 <= (tmp_215_reg_348 & ap_const_lv3_0);
    tmp_217_fu_226_p2 <= (tmp_216_fu_219_p3 or ap_const_lv8_7);
    tmp_55_fu_318_p2 <= (buf_addr_read_reg_395 xor tmp_888_fu_314_p1);
    tmp_870_fu_159_p1 <= key_offset_offset(5 - 1 downto 0);
    tmp_871_fu_205_p1 <= m_axi_key_RDATA(256 - 1 downto 0);
    tmp_872_fu_232_p2 <= "1" when (unsigned(tmp_216_fu_219_p3) > unsigned(tmp_217_fu_226_p2)) else "0";
    tmp_873_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_216_fu_219_p3),9));
    tmp_874_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_217_fu_226_p2),9));
    
    tmp_875_fu_209_p4_proc : process(m_axi_key_RDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(1024+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_875_fu_209_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(1024 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(10 - 1 downto 0) := ap_const_lv32_FF(10 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(10 - 1 downto 0) := ap_const_lv32_0(10 - 1 downto 0);
        v0_cpy := m_axi_key_RDATA;
        if (vlo_cpy(10 - 1 downto 0) > vhi_cpy(10 - 1 downto 0)) then
            vhi_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_0(10-1 downto 0)));
            vlo_cpy(10-1 downto 0) := std_logic_vector(1024-1-unsigned(ap_const_lv32_FF(10-1 downto 0)));
            for tmp_875_fu_209_p4_i in 0 to 1024-1 loop
                v0_cpy(tmp_875_fu_209_p4_i) := m_axi_key_RDATA(1024-1-tmp_875_fu_209_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(10-1 downto 0)))));

        section := (others=>'0');
        section(10-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(10-1 downto 0)) - unsigned(vlo_cpy(10-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(1024-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_875_fu_209_p4 <= resvalue(256-1 downto 0);
    end process;

    tmp_876_fu_246_p2 <= std_logic_vector(unsigned(tmp_873_fu_238_p1) - unsigned(tmp_874_fu_242_p1));
    tmp_877_fu_252_p2 <= (tmp_873_fu_238_p1 xor ap_const_lv9_FF);
    tmp_878_fu_258_p2 <= std_logic_vector(unsigned(tmp_874_fu_242_p1) - unsigned(tmp_873_fu_238_p1));
    tmp_879_fu_264_p3 <= 
        tmp_876_fu_246_p2 when (tmp_872_fu_232_p2(0) = '1') else 
        tmp_878_fu_258_p2;
    tmp_880_fu_272_p3 <= 
        tmp_875_reg_365 when (tmp_872_fu_232_p2(0) = '1') else 
        tmp_871_reg_360;
    tmp_881_fu_278_p3 <= 
        tmp_877_fu_252_p2 when (tmp_872_fu_232_p2(0) = '1') else 
        tmp_873_fu_238_p1;
    tmp_882_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv9_FF) - unsigned(tmp_879_fu_264_p3));
    tmp_884_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_882_reg_380),256));
    tmp_886_fu_303_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv256_lc_4),to_integer(unsigned('0' & tmp_884_fu_300_p1(31-1 downto 0)))));
    tmp_887_fu_309_p2 <= (tmp_885_reg_390 and tmp_886_fu_303_p2);
    tmp_888_fu_314_p1 <= tmp_887_fu_309_p2(8 - 1 downto 0);
    tmp_fu_169_p2 <= "1" when (i_phi_fu_142_p4 = ap_const_lv5_0) else "0";
    tmp_s_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_cast_fu_181_p1),32));
end behav;
