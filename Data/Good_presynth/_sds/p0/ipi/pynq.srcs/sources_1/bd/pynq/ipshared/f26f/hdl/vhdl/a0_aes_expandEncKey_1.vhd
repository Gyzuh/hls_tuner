-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_expandEncKey_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_k_AWVALID : OUT STD_LOGIC;
    m_axi_k_AWREADY : IN STD_LOGIC;
    m_axi_k_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_WVALID : OUT STD_LOGIC;
    m_axi_k_WREADY : IN STD_LOGIC;
    m_axi_k_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_k_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_k_WLAST : OUT STD_LOGIC;
    m_axi_k_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_ARVALID : OUT STD_LOGIC;
    m_axi_k_ARREADY : IN STD_LOGIC;
    m_axi_k_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RVALID : IN STD_LOGIC;
    m_axi_k_RREADY : OUT STD_LOGIC;
    m_axi_k_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_k_RLAST : IN STD_LOGIC;
    m_axi_k_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_BVALID : IN STD_LOGIC;
    m_axi_k_BREADY : OUT STD_LOGIC;
    m_axi_k_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    k_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_blk_n_AR : OUT STD_LOGIC;
    k_blk_n_R : OUT STD_LOGIC;
    k_blk_n_AW : OUT STD_LOGIC;
    k_blk_n_W : OUT STD_LOGIC;
    k_blk_n_B : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of a0_aes_expandEncKey_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101000";
    constant ap_const_lv32_2EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011101111";
    constant ap_const_lv32_2F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110000";
    constant ap_const_lv32_2F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011110111";
    constant ap_const_lv32_208 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_2F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_217 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100111";
    constant ap_const_lv32_218 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_227 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100111";
    constant ap_const_lv32_228 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_237 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110111";
    constant ap_const_lv32_238 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_247 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000111";
    constant ap_const_lv32_248 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_257 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010111";
    constant ap_const_lv32_258 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_267 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100111";
    constant ap_const_lv32_268 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_277 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110111";
    constant ap_const_lv32_278 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_287 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000111";
    constant ap_const_lv32_288 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_297 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010111";
    constant ap_const_lv32_298 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100111";
    constant ap_const_lv32_2A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101000";
    constant ap_const_lv32_2AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010101111";
    constant ap_const_lv32_2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110000";
    constant ap_const_lv32_2B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010110111";
    constant ap_const_lv32_2B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000111";
    constant ap_const_lv32_2C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001000";
    constant ap_const_lv32_2CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011001111";
    constant ap_const_lv32_2D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010000";
    constant ap_const_lv32_2D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011010111";
    constant ap_const_lv32_2D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_207 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv256_lc_2 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal k_addr_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_k_ARREADY : STD_LOGIC;
    signal k_addr_read_reg_885 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_3_reg_890 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_896 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_913 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_924 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_934 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_944 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_954 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_959 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_reg_964 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_reg_969 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_reg_974 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_979 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_reg_984 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_989 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_reg_999 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_reg_1004 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_reg_1009 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_1054 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_23_fu_660_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_1065 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_666_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1069 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_16_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_reg_1080 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_24_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_1091 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_1_fu_688_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_1_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_693_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_reg_1102 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_25_fu_698_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_fu_702_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_reg_1113 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_2_fu_707_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_2_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_42_1_fu_720_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_1_reg_1134 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_fu_725_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_739_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_45_1_fu_743_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_1_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_2_fu_748_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_2_reg_1167 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_fu_752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_43_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_2_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_2_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_46_fu_766_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_reg_1188 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_776_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_1199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_51_fu_781_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_reg_1205 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_k_AWREADY : STD_LOGIC;
    signal tmp_53_fu_785_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_1210 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_789_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_1215 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_fu_793_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_reg_1220 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_1_fu_797_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_1_reg_1225 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_1_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_1_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_1_fu_807_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_1_reg_1235 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_1_fu_812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_1_reg_1240 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_2_fu_817_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_2_reg_1245 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_2_fu_822_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_2_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_2_fu_827_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_2_reg_1255 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_2_fu_832_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_2_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_rc_read : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_680_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_711_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_757_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_offset_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_k_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_k_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_k_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_k_WREADY : STD_LOGIC;
    signal tmp_4_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_644_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_cast_cast_fu_652_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";

    component a0_aes_expandEncKey_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component a0_aes_expandEncKey_bkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_ce = ap_const_logic_1))) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY)))) then 
                        ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = m_axi_k_ARREADY))) then 
                        ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1))) then
                    if ((ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_k_AWREADY)) then 
                        ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1))) then
                    if ((ap_sig_ioackin_m_axi_k_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_k_WREADY)) then 
                        ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY))) and (ap_ce = ap_const_logic_1))) then
                ap_port_reg_rc_read <= rc_read;
                    k_addr_reg_878(24 downto 0) <= k_offset_cast_fu_288_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then
                k_addr_read_reg_885 <= m_axi_k_RDATA;
                tmp_10_reg_913 <= m_axi_k_RDATA(535 downto 528);
                tmp_12_reg_918 <= m_axi_k_RDATA(743 downto 736);
                tmp_13_reg_924 <= m_axi_k_RDATA(543 downto 536);
                tmp_17_reg_929 <= m_axi_k_RDATA(551 downto 544);
                tmp_19_reg_934 <= m_axi_k_RDATA(559 downto 552);
                tmp_26_reg_939 <= m_axi_k_RDATA(567 downto 560);
                tmp_28_reg_944 <= m_axi_k_RDATA(575 downto 568);
                tmp_30_reg_949 <= m_axi_k_RDATA(583 downto 576);
                tmp_31_reg_954 <= m_axi_k_RDATA(591 downto 584);
                tmp_32_reg_959 <= m_axi_k_RDATA(599 downto 592);
                tmp_33_reg_964 <= m_axi_k_RDATA(607 downto 600);
                tmp_34_reg_969 <= m_axi_k_RDATA(615 downto 608);
                tmp_35_reg_974 <= m_axi_k_RDATA(623 downto 616);
                tmp_36_reg_979 <= m_axi_k_RDATA(631 downto 624);
                tmp_37_reg_984 <= m_axi_k_RDATA(639 downto 632);
                tmp_39_reg_989 <= m_axi_k_RDATA(647 downto 640);
                tmp_3_reg_890 <= m_axi_k_RDATA(751 downto 744);
                tmp_42_reg_994 <= m_axi_k_RDATA(655 downto 648);
                tmp_45_reg_999 <= m_axi_k_RDATA(663 downto 656);
                tmp_48_reg_1004 <= m_axi_k_RDATA(671 downto 664);
                tmp_50_reg_1009 <= m_axi_k_RDATA(679 downto 672);
                tmp_52_reg_1014 <= m_axi_k_RDATA(687 downto 680);
                tmp_54_reg_1019 <= m_axi_k_RDATA(695 downto 688);
                tmp_56_reg_1024 <= m_axi_k_RDATA(703 downto 696);
                tmp_58_reg_1029 <= m_axi_k_RDATA(711 downto 704);
                tmp_59_reg_1034 <= m_axi_k_RDATA(719 downto 712);
                tmp_60_reg_1039 <= m_axi_k_RDATA(727 downto 720);
                tmp_61_reg_1044 <= m_axi_k_RDATA(735 downto 728);
                tmp_6_reg_896 <= m_axi_k_RDATA(759 downto 752);
                tmp_7_reg_902 <= m_axi_k_RDATA(527 downto 520);
                tmp_9_reg_907 <= m_axi_k_RDATA(767 downto 760);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_16_reg_1080 <= tmp_16_fu_675_p2;
                tmp_24_reg_1091 <= tmp_24_fu_684_p2;
                tmp_36_1_reg_1096 <= tmp_36_1_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_20_reg_1102 <= tmp_20_fu_693_p2;
                tmp_25_reg_1108 <= tmp_25_fu_698_p2;
                tmp_36_2_reg_1119 <= tmp_36_2_fu_707_p2;
                tmp_39_1_reg_1113 <= tmp_39_1_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_23_reg_1065 <= tmp_23_fu_660_p2;
                tmp_s_reg_1054 <= tmp_s_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_27_reg_1129 <= tmp_27_fu_716_p2;
                tmp_39_2_reg_1140 <= tmp_39_2_fu_725_p2;
                tmp_40_reg_1145 <= tmp_40_fu_729_p2;
                tmp_42_1_reg_1134 <= tmp_42_1_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                tmp_29_reg_1156 <= tmp_29_fu_739_p2;
                tmp_42_2_reg_1167 <= tmp_42_2_fu_748_p2;
                tmp_43_reg_1172 <= tmp_43_fu_752_p2;
                tmp_45_1_reg_1161 <= tmp_45_1_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_2_reg_1069 <= tmp_2_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_45_2_reg_1183 <= tmp_45_2_fu_762_p2;
                tmp_46_reg_1188 <= tmp_46_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_49_reg_1199 <= tmp_49_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1))) then
                tmp_51_reg_1205 <= tmp_51_fu_781_p2;
                tmp_53_reg_1210 <= tmp_53_fu_785_p2;
                tmp_55_reg_1215 <= tmp_55_fu_789_p2;
                tmp_57_1_reg_1225 <= tmp_57_1_fu_797_p2;
                tmp_57_2_reg_1245 <= tmp_57_2_fu_817_p2;
                tmp_57_reg_1220 <= tmp_57_fu_793_p2;
                tmp_60_1_reg_1230 <= tmp_60_1_fu_802_p2;
                tmp_60_2_reg_1250 <= tmp_60_2_fu_822_p2;
                tmp_63_1_reg_1235 <= tmp_63_1_fu_807_p2;
                tmp_63_2_reg_1255 <= tmp_63_2_fu_827_p2;
                tmp_66_1_reg_1240 <= tmp_66_1_fu_812_p2;
                tmp_66_2_reg_1260 <= tmp_66_2_fu_832_p2;
            end if;
        end if;
    end process;
    k_addr_reg_878(31 downto 25) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_k_RVALID, m_axi_k_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_ce, ap_sig_ioackin_m_axi_k_ARREADY, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_sig_ioackin_m_axi_k_AWREADY, ap_sig_ioackin_m_axi_k_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY))) and (ap_ce = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= tmp_23_reg_1065;

    ap_sig_ioackin_m_axi_k_ARREADY_assign_proc : process(m_axi_k_ARREADY, ap_reg_ioackin_m_axi_k_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_ARREADY)) then 
            ap_sig_ioackin_m_axi_k_ARREADY <= m_axi_k_ARREADY;
        else 
            ap_sig_ioackin_m_axi_k_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_k_AWREADY_assign_proc : process(m_axi_k_AWREADY, ap_reg_ioackin_m_axi_k_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_AWREADY)) then 
            ap_sig_ioackin_m_axi_k_AWREADY <= m_axi_k_AWREADY;
        else 
            ap_sig_ioackin_m_axi_k_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_k_WREADY_assign_proc : process(m_axi_k_WREADY, ap_reg_ioackin_m_axi_k_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_WREADY)) then 
            ap_sig_ioackin_m_axi_k_WREADY <= m_axi_k_WREADY;
        else 
            ap_sig_ioackin_m_axi_k_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_k_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            k_blk_n_AR <= m_axi_k_ARREADY;
        else 
            k_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_AW_assign_proc : process(m_axi_k_AWREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            k_blk_n_AW <= m_axi_k_AWREADY;
        else 
            k_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_B_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            k_blk_n_B <= m_axi_k_BVALID;
        else 
            k_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_R_assign_proc : process(m_axi_k_RVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_blk_n_R <= m_axi_k_RVALID;
        else 
            k_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_W_assign_proc : process(m_axi_k_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            k_blk_n_W <= m_axi_k_WREADY;
        else 
            k_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    k_offset_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_offset),32));
    m_axi_k_ARADDR <= k_offset_cast_fu_288_p1;
    m_axi_k_ARBURST <= ap_const_lv2_0;
    m_axi_k_ARCACHE <= ap_const_lv4_0;
    m_axi_k_ARID <= ap_const_lv1_0;
    m_axi_k_ARLEN <= ap_const_lv32_1;
    m_axi_k_ARLOCK <= ap_const_lv2_0;
    m_axi_k_ARPROT <= ap_const_lv3_0;
    m_axi_k_ARQOS <= ap_const_lv4_0;
    m_axi_k_ARREGION <= ap_const_lv4_0;
    m_axi_k_ARSIZE <= ap_const_lv3_0;
    m_axi_k_ARUSER <= ap_const_lv1_0;

    m_axi_k_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_reg_ioackin_m_axi_k_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_ARREADY))) then 
            m_axi_k_ARVALID <= ap_const_logic_1;
        else 
            m_axi_k_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_k_AWADDR <= k_addr_reg_878;
    m_axi_k_AWBURST <= ap_const_lv2_0;
    m_axi_k_AWCACHE <= ap_const_lv4_0;
    m_axi_k_AWID <= ap_const_lv1_0;
    m_axi_k_AWLEN <= ap_const_lv32_1;
    m_axi_k_AWLOCK <= ap_const_lv2_0;
    m_axi_k_AWPROT <= ap_const_lv3_0;
    m_axi_k_AWQOS <= ap_const_lv4_0;
    m_axi_k_AWREGION <= ap_const_lv4_0;
    m_axi_k_AWSIZE <= ap_const_lv3_0;
    m_axi_k_AWUSER <= ap_const_lv1_0;

    m_axi_k_AWVALID_assign_proc : process(ap_CS_fsm_state18, ap_ce, ap_reg_ioackin_m_axi_k_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_AWREADY))) then 
            m_axi_k_AWVALID <= ap_const_logic_1;
        else 
            m_axi_k_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_k_BREADY_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then 
            m_axi_k_BREADY <= ap_const_logic_1;
        else 
            m_axi_k_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_k_RREADY_assign_proc : process(m_axi_k_RVALID, ap_CS_fsm_state8, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then 
            m_axi_k_RREADY <= ap_const_logic_1;
        else 
            m_axi_k_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_k_WDATA <= (((((((((((((((((((((((((((((((((ap_const_lv256_lc_2 & tmp_66_2_reg_1260) & tmp_63_2_reg_1255) & tmp_60_2_reg_1250) & tmp_57_2_reg_1245) & tmp_66_1_reg_1240) & tmp_63_1_reg_1235) & tmp_60_1_reg_1230) & tmp_57_1_reg_1225) & tmp_57_reg_1220) & tmp_55_reg_1215) & tmp_53_reg_1210) & tmp_51_reg_1205) & tmp_49_reg_1199) & tmp_46_reg_1188) & tmp_43_reg_1172) & tmp_40_reg_1145) & tmp_45_2_reg_1183) & tmp_42_2_reg_1167) & tmp_39_2_reg_1140) & tmp_36_2_reg_1119) & tmp_45_1_reg_1161) & tmp_42_1_reg_1134) & tmp_39_1_reg_1113) & tmp_36_1_reg_1096) & tmp_29_reg_1156) & tmp_27_reg_1129) & tmp_25_reg_1108) & tmp_24_reg_1091) & tmp_20_reg_1102) & tmp_16_reg_1080) & tmp_2_reg_1069) & tmp_s_reg_1054) & ap_const_lv512_lc_2);
    m_axi_k_WID <= ap_const_lv1_0;
    m_axi_k_WLAST <= ap_const_logic_0;
    m_axi_k_WSTRB <= ap_const_lv128_lc_1;
    m_axi_k_WUSER <= ap_const_lv1_0;

    m_axi_k_WVALID_assign_proc : process(ap_CS_fsm_state19, ap_ce, ap_reg_ioackin_m_axi_k_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_WREADY))) then 
            m_axi_k_WVALID <= ap_const_logic_1;
        else 
            m_axi_k_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    sbox_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_fu_609_p1, tmp_1_fu_634_p1, tmp_15_fu_671_p1, tmp_18_fu_680_p1, tmp_38_fu_711_p1, tmp_41_fu_734_p1, tmp_44_fu_757_p1, tmp_47_fu_771_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sbox_address0 <= tmp_47_fu_771_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sbox_address0 <= tmp_44_fu_757_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sbox_address0 <= tmp_41_fu_734_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_address0 <= tmp_38_fu_711_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_address0 <= tmp_18_fu_680_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sbox_address0 <= tmp_15_fu_671_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= tmp_1_fu_634_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= tmp_fu_609_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_622_p2 <= (tmp_4_fu_613_p4 xor ap_port_reg_rc_read);
    tmp_15_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_907),32));
    tmp_16_fu_675_p2 <= (sbox_q0 xor tmp_10_reg_913);
    tmp_18_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_918),32));
    tmp_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_896),32));
    tmp_20_fu_693_p2 <= (sbox_q0 xor tmp_13_reg_924);
    tmp_21_fu_638_p2 <= std_logic_vector(shift_left(unsigned(ap_port_reg_rc_read),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_22_fu_644_p3 <= ap_port_reg_rc_read(7 downto 7);
    tmp_23_fu_660_p2 <= (tmp_29_cast_cast_fu_652_p3 xor tmp_21_fu_638_p2);
    tmp_24_fu_684_p2 <= (tmp_17_reg_929 xor tmp_s_reg_1054);
    tmp_25_fu_698_p2 <= (tmp_19_reg_934 xor tmp_2_reg_1069);
    tmp_27_fu_716_p2 <= (tmp_26_reg_939 xor tmp_16_reg_1080);
    tmp_29_cast_cast_fu_652_p3 <= 
        ap_const_lv8_1B when (tmp_22_fu_644_p3(0) = '1') else 
        ap_const_lv8_0;
    tmp_29_fu_739_p2 <= (tmp_28_reg_944 xor tmp_20_reg_1102);
    tmp_2_fu_666_p2 <= (sbox_q0 xor tmp_7_reg_902);
    tmp_36_1_fu_688_p2 <= (tmp_30_reg_949 xor tmp_24_fu_684_p2);
    tmp_36_2_fu_707_p2 <= (tmp_34_reg_969 xor tmp_36_1_reg_1096);
    tmp_38_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_2_fu_707_p2),32));
    tmp_39_1_fu_702_p2 <= (tmp_31_reg_954 xor tmp_25_fu_698_p2);
    tmp_39_2_fu_725_p2 <= (tmp_35_reg_974 xor tmp_39_1_reg_1113);
    tmp_40_fu_729_p2 <= (sbox_q0 xor tmp_39_reg_989);
    tmp_41_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_2_fu_725_p2),32));
    tmp_42_1_fu_720_p2 <= (tmp_32_reg_959 xor tmp_27_fu_716_p2);
    tmp_42_2_fu_748_p2 <= (tmp_36_reg_979 xor tmp_42_1_reg_1134);
    tmp_43_fu_752_p2 <= (sbox_q0 xor tmp_42_reg_994);
    tmp_44_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_2_fu_748_p2),32));
    tmp_45_1_fu_743_p2 <= (tmp_33_reg_964 xor tmp_29_fu_739_p2);
    tmp_45_2_fu_762_p2 <= (tmp_37_reg_984 xor tmp_45_1_reg_1161);
    tmp_46_fu_766_p2 <= (sbox_q0 xor tmp_45_reg_999);
    tmp_47_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_2_fu_762_p2),32));
    tmp_49_fu_776_p2 <= (sbox_q0 xor tmp_48_reg_1004);
    tmp_4_fu_613_p4 <= k_addr_read_reg_885(519 downto 512);
    tmp_51_fu_781_p2 <= (tmp_50_reg_1009 xor tmp_40_reg_1145);
    tmp_53_fu_785_p2 <= (tmp_52_reg_1014 xor tmp_43_reg_1172);
    tmp_55_fu_789_p2 <= (tmp_54_reg_1019 xor tmp_46_reg_1188);
    tmp_57_1_fu_797_p2 <= (tmp_58_reg_1029 xor tmp_51_fu_781_p2);
    tmp_57_2_fu_817_p2 <= (tmp_12_reg_918 xor tmp_57_1_fu_797_p2);
    tmp_57_fu_793_p2 <= (tmp_56_reg_1024 xor tmp_49_reg_1199);
    tmp_60_1_fu_802_p2 <= (tmp_59_reg_1034 xor tmp_53_fu_785_p2);
    tmp_60_2_fu_822_p2 <= (tmp_3_reg_890 xor tmp_60_1_fu_802_p2);
    tmp_63_1_fu_807_p2 <= (tmp_60_reg_1039 xor tmp_55_fu_789_p2);
    tmp_63_2_fu_827_p2 <= (tmp_6_reg_896 xor tmp_63_1_fu_807_p2);
    tmp_66_1_fu_812_p2 <= (tmp_61_reg_1044 xor tmp_57_fu_793_p2);
    tmp_66_2_fu_832_p2 <= (tmp_9_reg_907 xor tmp_66_1_fu_812_p2);
    tmp_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_890),32));
    tmp_s_fu_628_p2 <= (tmp1_fu_622_p2 xor sbox_q0);
end behav;
