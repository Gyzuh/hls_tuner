// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_aes_addRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        buf_offset,
        m_axi_key_AWVALID,
        m_axi_key_AWREADY,
        m_axi_key_AWADDR,
        m_axi_key_AWID,
        m_axi_key_AWLEN,
        m_axi_key_AWSIZE,
        m_axi_key_AWBURST,
        m_axi_key_AWLOCK,
        m_axi_key_AWCACHE,
        m_axi_key_AWPROT,
        m_axi_key_AWQOS,
        m_axi_key_AWREGION,
        m_axi_key_AWUSER,
        m_axi_key_WVALID,
        m_axi_key_WREADY,
        m_axi_key_WDATA,
        m_axi_key_WSTRB,
        m_axi_key_WLAST,
        m_axi_key_WID,
        m_axi_key_WUSER,
        m_axi_key_ARVALID,
        m_axi_key_ARREADY,
        m_axi_key_ARADDR,
        m_axi_key_ARID,
        m_axi_key_ARLEN,
        m_axi_key_ARSIZE,
        m_axi_key_ARBURST,
        m_axi_key_ARLOCK,
        m_axi_key_ARCACHE,
        m_axi_key_ARPROT,
        m_axi_key_ARQOS,
        m_axi_key_ARREGION,
        m_axi_key_ARUSER,
        m_axi_key_RVALID,
        m_axi_key_RREADY,
        m_axi_key_RDATA,
        m_axi_key_RLAST,
        m_axi_key_RID,
        m_axi_key_RUSER,
        m_axi_key_RRESP,
        m_axi_key_BVALID,
        m_axi_key_BREADY,
        m_axi_key_BRESP,
        m_axi_key_BID,
        m_axi_key_BUSER,
        key_offset,
        key_offset_offset
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_pp0_stage0 = 17'd2;
parameter    ap_ST_fsm_pp0_stage1 = 17'd4;
parameter    ap_ST_fsm_pp0_stage2 = 17'd8;
parameter    ap_ST_fsm_pp0_stage3 = 17'd16;
parameter    ap_ST_fsm_pp0_stage4 = 17'd32;
parameter    ap_ST_fsm_pp0_stage5 = 17'd64;
parameter    ap_ST_fsm_pp0_stage6 = 17'd128;
parameter    ap_ST_fsm_pp0_stage7 = 17'd256;
parameter    ap_ST_fsm_pp0_stage8 = 17'd512;
parameter    ap_ST_fsm_pp0_stage9 = 17'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 17'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 17'd32768;
parameter    ap_ST_fsm_state25 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [31:0] m_axi_buf_r_AWADDR;
output  [0:0] m_axi_buf_r_AWID;
output  [31:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [0:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [7:0] m_axi_buf_r_WDATA;
output  [0:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [0:0] m_axi_buf_r_WID;
output  [0:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [31:0] m_axi_buf_r_ARADDR;
output  [0:0] m_axi_buf_r_ARID;
output  [31:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [0:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [7:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [0:0] m_axi_buf_r_RID;
input  [0:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [0:0] m_axi_buf_r_BID;
input  [0:0] m_axi_buf_r_BUSER;
input  [31:0] buf_offset;
output   m_axi_key_AWVALID;
input   m_axi_key_AWREADY;
output  [31:0] m_axi_key_AWADDR;
output  [0:0] m_axi_key_AWID;
output  [31:0] m_axi_key_AWLEN;
output  [2:0] m_axi_key_AWSIZE;
output  [1:0] m_axi_key_AWBURST;
output  [1:0] m_axi_key_AWLOCK;
output  [3:0] m_axi_key_AWCACHE;
output  [2:0] m_axi_key_AWPROT;
output  [3:0] m_axi_key_AWQOS;
output  [3:0] m_axi_key_AWREGION;
output  [0:0] m_axi_key_AWUSER;
output   m_axi_key_WVALID;
input   m_axi_key_WREADY;
output  [1023:0] m_axi_key_WDATA;
output  [127:0] m_axi_key_WSTRB;
output   m_axi_key_WLAST;
output  [0:0] m_axi_key_WID;
output  [0:0] m_axi_key_WUSER;
output   m_axi_key_ARVALID;
input   m_axi_key_ARREADY;
output  [31:0] m_axi_key_ARADDR;
output  [0:0] m_axi_key_ARID;
output  [31:0] m_axi_key_ARLEN;
output  [2:0] m_axi_key_ARSIZE;
output  [1:0] m_axi_key_ARBURST;
output  [1:0] m_axi_key_ARLOCK;
output  [3:0] m_axi_key_ARCACHE;
output  [2:0] m_axi_key_ARPROT;
output  [3:0] m_axi_key_ARQOS;
output  [3:0] m_axi_key_ARREGION;
output  [0:0] m_axi_key_ARUSER;
input   m_axi_key_RVALID;
output   m_axi_key_RREADY;
input  [1023:0] m_axi_key_RDATA;
input   m_axi_key_RLAST;
input  [0:0] m_axi_key_RID;
input  [0:0] m_axi_key_RUSER;
input  [1:0] m_axi_key_RRESP;
input   m_axi_key_BVALID;
output   m_axi_key_BREADY;
input  [1:0] m_axi_key_BRESP;
input  [0:0] m_axi_key_BID;
input  [0:0] m_axi_key_BUSER;
input  [24:0] key_offset;
input  [5:0] key_offset_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_buf_r_AWVALID;
reg m_axi_buf_r_WVALID;
reg m_axi_buf_r_ARVALID;
reg m_axi_buf_r_RREADY;
reg m_axi_buf_r_BREADY;
reg m_axi_key_ARVALID;
reg m_axi_key_RREADY;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    buf_r_blk_n_AR;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage8;
reg   [0:0] tmp_reg_339;
reg    buf_r_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    buf_r_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] ap_reg_pp0_iter1_tmp_reg_339;
reg    buf_r_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    buf_r_blk_n_B;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
reg    key_blk_n_AR;
reg    key_blk_n_R;
reg   [4:0] i_reg_138;
reg   [31:0] key_addr_reg_328;
wire   [4:0] tmp1_fu_163_p2;
reg   [4:0] tmp1_reg_334;
wire   [0:0] tmp_fu_169_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] i_6_fu_175_p2;
reg   [4:0] i_6_reg_343;
wire   [4:0] tmp_215_fu_189_p2;
reg   [4:0] tmp_215_reg_348;
reg   [31:0] buf_addr_reg_353;
reg   [31:0] ap_reg_pp0_iter1_buf_addr_reg_353;
wire   [255:0] tmp_871_fu_205_p1;
reg   [255:0] tmp_871_reg_360;
reg    ap_block_state10_pp0_stage8_iter0;
reg    ap_sig_ioackin_m_axi_buf_r_ARREADY;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage8_11001;
reg   [255:0] tmp_875_fu_209_p4;
reg   [255:0] tmp_875_reg_365;
wire   [255:0] tmp_880_fu_272_p3;
reg   [255:0] tmp_880_reg_370;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [8:0] tmp_881_fu_278_p3;
reg   [8:0] tmp_881_reg_375;
wire   [8:0] tmp_882_fu_286_p2;
reg   [8:0] tmp_882_reg_380;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [255:0] grp_fu_295_p2;
reg   [255:0] tmp_885_reg_390;
reg   [7:0] buf_addr_read_reg_395;
wire   [7:0] tmp_55_fu_318_p2;
reg   [7:0] tmp_55_reg_400;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_sig_ioackin_m_axi_key_ARREADY;
reg    ap_block_state3_io;
wire    ap_block_state18_pp0_stage1_iter1;
reg    ap_sig_ioackin_m_axi_buf_r_AWREADY;
reg    ap_block_state18_io;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state24_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_subdone;
reg   [4:0] i_phi_fu_142_p4;
wire   [31:0] key_offset_cast_fu_149_p1;
wire   [31:0] sum_fu_194_p2;
reg    ap_reg_ioackin_m_axi_key_ARREADY;
wire    ap_block_pp0_stage1_01001;
reg    ap_reg_ioackin_m_axi_buf_r_ARREADY;
reg    ap_block_pp0_stage8_01001;
reg    ap_reg_ioackin_m_axi_buf_r_AWREADY;
reg    ap_block_pp0_stage7_11001;
reg    ap_reg_ioackin_m_axi_buf_r_WREADY;
reg    ap_sig_ioackin_m_axi_buf_r_WREADY;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state19_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_01001;
reg    ap_block_state19_io;
reg    ap_block_pp0_stage2_11001;
wire   [4:0] tmp_870_fu_159_p1;
wire  signed [7:0] i_6_cast_fu_181_p1;
wire   [31:0] tmp_s_fu_185_p1;
wire    ap_block_pp0_stage9;
wire   [7:0] tmp_216_fu_219_p3;
wire   [7:0] tmp_217_fu_226_p2;
wire   [8:0] tmp_873_fu_238_p1;
wire   [8:0] tmp_874_fu_242_p1;
wire   [0:0] tmp_872_fu_232_p2;
wire   [8:0] tmp_876_fu_246_p2;
wire   [8:0] tmp_878_fu_258_p2;
wire   [8:0] tmp_877_fu_252_p2;
wire   [8:0] tmp_879_fu_264_p3;
wire    ap_block_pp0_stage10;
wire   [255:0] grp_fu_295_p1;
wire   [255:0] tmp_884_fu_300_p1;
wire   [255:0] tmp_886_fu_303_p2;
wire   [255:0] tmp_887_fu_309_p2;
wire   [7:0] tmp_888_fu_314_p1;
reg    grp_fu_295_ce;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_state25;
reg   [16:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state20_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state21_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state22_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_state23_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_690;
reg    ap_condition_694;
reg    ap_condition_699;
reg    ap_condition_704;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_m_axi_key_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_buf_r_WREADY = 1'b0;
end

a0_encrypt_lshr_256ncud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .OP( 1 ),
    .din0_WIDTH( 256 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 256 ))
encrypt_lshr_256ncud_x_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_880_reg_370),
    .din1(grp_fu_295_p1),
    .ce(grp_fu_295_ce),
    .dout(grp_fu_295_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (((ap_block_pp0_stage14_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_subdone == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((((ap_block_pp0_stage14_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_subdone == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b0;
    end else begin
        if ((ap_condition_690 == 1'b1)) begin
            if ((ap_block_pp0_stage8_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_buf_r_ARREADY) & (ap_block_pp0_stage8_01001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_buf_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b0;
    end else begin
        if ((ap_condition_694 == 1'b1)) begin
            if ((ap_block_pp0_stage1_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b0;
            end else if (((ap_block_pp0_stage1_01001 == 1'b0) & (1'b1 == m_axi_buf_r_AWREADY))) begin
                ap_reg_ioackin_m_axi_buf_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b0;
    end else begin
        if ((ap_condition_699 == 1'b1)) begin
            if ((ap_block_pp0_stage2_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b0;
            end else if (((1'b1 == m_axi_buf_r_WREADY) & (ap_block_pp0_stage2_01001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_buf_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_key_ARREADY <= 1'b0;
    end else begin
        if ((ap_condition_704 == 1'b1)) begin
            if ((ap_block_pp0_stage1_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_key_ARREADY <= 1'b0;
            end else if (((1'b1 == m_axi_key_ARREADY) & (ap_block_pp0_stage1_01001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_key_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        i_reg_138 <= i_6_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_138 <= 5'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_buf_addr_reg_353 <= buf_addr_reg_353;
        ap_reg_pp0_iter1_tmp_reg_339 <= tmp_reg_339;
        tmp_reg_339 <= tmp_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        buf_addr_read_reg_395 <= m_axi_buf_r_RDATA;
        tmp_885_reg_390 <= grp_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == tmp_fu_169_p2))) begin
        buf_addr_reg_353 <= sum_fu_194_p2;
        tmp_215_reg_348 <= tmp_215_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == tmp_fu_169_p2))) begin
        i_6_reg_343 <= i_6_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        key_addr_reg_328[24 : 0] <= key_offset_cast_fu_149_p1[24 : 0];
        tmp1_reg_334 <= tmp1_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (ap_block_pp0_stage1_11001 == 1'b0))) begin
        tmp_55_reg_400 <= tmp_55_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'd0 == tmp_reg_339) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        tmp_871_reg_360 <= tmp_871_fu_205_p1;
        tmp_875_reg_365 <= tmp_875_fu_209_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_11001 == 1'b0))) begin
        tmp_880_reg_370 <= tmp_880_fu_272_p3;
        tmp_881_reg_375 <= tmp_881_fu_278_p3;
        tmp_882_reg_380[8 : 1] <= tmp_882_fu_286_p2[8 : 1];
    end
end

always @ (*) begin
    if ((tmp_fu_169_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_ARREADY = m_axi_buf_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_AWREADY = m_axi_buf_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY)) begin
        ap_sig_ioackin_m_axi_buf_r_WREADY = m_axi_buf_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_buf_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_key_ARREADY)) begin
        ap_sig_ioackin_m_axi_key_ARREADY = m_axi_key_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_key_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage8 == 1'b0) & (1'd0 == tmp_reg_339))) begin
        buf_r_blk_n_AR = m_axi_buf_r_ARREADY;
    end else begin
        buf_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339))) begin
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY;
    end else begin
        buf_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7 == 1'b0))) begin
        buf_r_blk_n_B = m_axi_buf_r_BVALID;
    end else begin
        buf_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        buf_r_blk_n_R = m_axi_buf_r_RVALID;
    end else begin
        buf_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2 == 1'b0))) begin
        buf_r_blk_n_W = m_axi_buf_r_WREADY;
    end else begin
        buf_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_11001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_11001 == 1'b0)))) begin
        grp_fu_295_ce = 1'b1;
    end else begin
        grp_fu_295_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0))) begin
        i_phi_fu_142_p4 = i_6_reg_343;
    end else begin
        i_phi_fu_142_p4 = i_reg_138;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1 == 1'b0))) begin
        key_blk_n_AR = m_axi_key_ARREADY;
    end else begin
        key_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage8 == 1'b0) & (1'd0 == tmp_reg_339))) begin
        key_blk_n_R = m_axi_key_RVALID;
    end else begin
        key_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (ap_block_pp0_stage8_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_ARREADY))) begin
        m_axi_buf_r_ARVALID = 1'b1;
    end else begin
        m_axi_buf_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (ap_block_pp0_stage1_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_AWREADY))) begin
        m_axi_buf_r_AWVALID = 1'b1;
    end else begin
        m_axi_buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_11001 == 1'b0))) begin
        m_axi_buf_r_BREADY = 1'b1;
    end else begin
        m_axi_buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        m_axi_buf_r_RREADY = 1'b1;
    end else begin
        m_axi_buf_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_buf_r_WREADY))) begin
        m_axi_buf_r_WVALID = 1'b1;
    end else begin
        m_axi_buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_key_ARREADY))) begin
        m_axi_key_ARVALID = 1'b1;
    end else begin
        m_axi_key_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (ap_block_pp0_stage8_11001 == 1'b0))) begin
        m_axi_key_RREADY = 1'b1;
    end else begin
        m_axi_key_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_fu_169_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_fu_169_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if (((ap_block_pp0_stage7_subdone == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_subdone == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_subdone == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((ap_block_pp0_stage12_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((ap_block_pp0_stage14_subdone == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd16];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'd0 == tmp_reg_339) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'd0 == tmp_reg_339) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == m_axi_buf_r_RVALID));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state18_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state3_io)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state18_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state19_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state19_io));
end

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b0 == m_axi_buf_r_BVALID));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b0 == m_axi_buf_r_BVALID));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_01001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (1'b0 == m_axi_key_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((1'b1 == ap_enable_reg_pp0_iter0) & (((1'd0 == tmp_reg_339) & (1'b0 == m_axi_key_RVALID)) | (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((1'b1 == ap_enable_reg_pp0_iter0) & (((1'd0 == tmp_reg_339) & (1'b0 == m_axi_key_RVALID)) | (1'b1 == ap_block_state10_io)));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_io = ((1'd0 == tmp_reg_339) & (1'b0 == ap_sig_ioackin_m_axi_buf_r_ARREADY));
end

always @ (*) begin
    ap_block_state10_pp0_stage8_iter0 = ((1'd0 == tmp_reg_339) & (1'b0 == m_axi_key_RVALID));
end

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((1'd0 == tmp_reg_339) & (1'b0 == m_axi_buf_r_RVALID));
end

always @ (*) begin
    ap_block_state18_io = ((1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b0 == ap_sig_ioackin_m_axi_buf_r_AWREADY));
end

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b0 == ap_sig_ioackin_m_axi_buf_r_WREADY));
end

assign ap_block_state19_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage7_iter1 = ((1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b0 == m_axi_buf_r_BVALID));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'd0 == tmp_reg_339) & (1'b0 == ap_sig_ioackin_m_axi_key_ARREADY));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_690 = ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339));
end

always @ (*) begin
    ap_condition_694 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339));
end

always @ (*) begin
    ap_condition_699 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_704 = ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_reg_339) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_295_p1 = tmp_881_reg_375;

assign i_6_cast_fu_181_p1 = $signed(i_6_fu_175_p2);

assign i_6_fu_175_p2 = ($signed(5'd31) + $signed(i_phi_fu_142_p4));

assign key_offset_cast_fu_149_p1 = key_offset;

assign m_axi_buf_r_ARADDR = buf_addr_reg_353;

assign m_axi_buf_r_ARBURST = 2'd0;

assign m_axi_buf_r_ARCACHE = 4'd0;

assign m_axi_buf_r_ARID = 1'd0;

assign m_axi_buf_r_ARLEN = 32'd1;

assign m_axi_buf_r_ARLOCK = 2'd0;

assign m_axi_buf_r_ARPROT = 3'd0;

assign m_axi_buf_r_ARQOS = 4'd0;

assign m_axi_buf_r_ARREGION = 4'd0;

assign m_axi_buf_r_ARSIZE = 3'd0;

assign m_axi_buf_r_ARUSER = 1'd0;

assign m_axi_buf_r_AWADDR = ap_reg_pp0_iter1_buf_addr_reg_353;

assign m_axi_buf_r_AWBURST = 2'd0;

assign m_axi_buf_r_AWCACHE = 4'd0;

assign m_axi_buf_r_AWID = 1'd0;

assign m_axi_buf_r_AWLEN = 32'd1;

assign m_axi_buf_r_AWLOCK = 2'd0;

assign m_axi_buf_r_AWPROT = 3'd0;

assign m_axi_buf_r_AWQOS = 4'd0;

assign m_axi_buf_r_AWREGION = 4'd0;

assign m_axi_buf_r_AWSIZE = 3'd0;

assign m_axi_buf_r_AWUSER = 1'd0;

assign m_axi_buf_r_WDATA = tmp_55_reg_400;

assign m_axi_buf_r_WID = 1'd0;

assign m_axi_buf_r_WLAST = 1'b0;

assign m_axi_buf_r_WSTRB = 1'd1;

assign m_axi_buf_r_WUSER = 1'd0;

assign m_axi_key_ARADDR = key_addr_reg_328;

assign m_axi_key_ARBURST = 2'd0;

assign m_axi_key_ARCACHE = 4'd0;

assign m_axi_key_ARID = 1'd0;

assign m_axi_key_ARLEN = 32'd1;

assign m_axi_key_ARLOCK = 2'd0;

assign m_axi_key_ARPROT = 3'd0;

assign m_axi_key_ARQOS = 4'd0;

assign m_axi_key_ARREGION = 4'd0;

assign m_axi_key_ARSIZE = 3'd0;

assign m_axi_key_ARUSER = 1'd0;

assign m_axi_key_AWADDR = 32'd0;

assign m_axi_key_AWBURST = 2'd0;

assign m_axi_key_AWCACHE = 4'd0;

assign m_axi_key_AWID = 1'd0;

assign m_axi_key_AWLEN = 32'd0;

assign m_axi_key_AWLOCK = 2'd0;

assign m_axi_key_AWPROT = 3'd0;

assign m_axi_key_AWQOS = 4'd0;

assign m_axi_key_AWREGION = 4'd0;

assign m_axi_key_AWSIZE = 3'd0;

assign m_axi_key_AWUSER = 1'd0;

assign m_axi_key_AWVALID = 1'b0;

assign m_axi_key_BREADY = 1'b0;

assign m_axi_key_WDATA = 1024'd0;

assign m_axi_key_WID = 1'd0;

assign m_axi_key_WLAST = 1'b0;

assign m_axi_key_WSTRB = 128'd0;

assign m_axi_key_WUSER = 1'd0;

assign m_axi_key_WVALID = 1'b0;

assign sum_fu_194_p2 = (buf_offset + tmp_s_fu_185_p1);

assign tmp1_fu_163_p2 = ($signed(5'd31) + $signed(tmp_870_fu_159_p1));

assign tmp_215_fu_189_p2 = (tmp1_reg_334 + i_phi_fu_142_p4);

assign tmp_216_fu_219_p3 = {{tmp_215_reg_348}, {3'd0}};

assign tmp_217_fu_226_p2 = (tmp_216_fu_219_p3 | 8'd7);

assign tmp_55_fu_318_p2 = (buf_addr_read_reg_395 ^ tmp_888_fu_314_p1);

assign tmp_870_fu_159_p1 = key_offset_offset[4:0];

assign tmp_871_fu_205_p1 = m_axi_key_RDATA[255:0];

assign tmp_872_fu_232_p2 = ((tmp_216_fu_219_p3 > tmp_217_fu_226_p2) ? 1'b1 : 1'b0);

assign tmp_873_fu_238_p1 = tmp_216_fu_219_p3;

assign tmp_874_fu_242_p1 = tmp_217_fu_226_p2;

integer ap_tvar_int_0;

always @ (m_axi_key_RDATA) begin
    for (ap_tvar_int_0 = 256 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 255 - 0) begin
            tmp_875_fu_209_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_875_fu_209_p4[ap_tvar_int_0] = m_axi_key_RDATA[255 - ap_tvar_int_0];
        end
    end
end

assign tmp_876_fu_246_p2 = (tmp_873_fu_238_p1 - tmp_874_fu_242_p1);

assign tmp_877_fu_252_p2 = (tmp_873_fu_238_p1 ^ 9'd255);

assign tmp_878_fu_258_p2 = (tmp_874_fu_242_p1 - tmp_873_fu_238_p1);

assign tmp_879_fu_264_p3 = ((tmp_872_fu_232_p2[0:0] === 1'b1) ? tmp_876_fu_246_p2 : tmp_878_fu_258_p2);

assign tmp_880_fu_272_p3 = ((tmp_872_fu_232_p2[0:0] === 1'b1) ? tmp_875_reg_365 : tmp_871_reg_360);

assign tmp_881_fu_278_p3 = ((tmp_872_fu_232_p2[0:0] === 1'b1) ? tmp_877_fu_252_p2 : tmp_873_fu_238_p1);

assign tmp_882_fu_286_p2 = (9'd255 - tmp_879_fu_264_p3);

assign tmp_884_fu_300_p1 = tmp_882_reg_380;

assign tmp_886_fu_303_p2 = 256'd115792089237316195423570985008687907853269984665640564039457584007913129639935 >> tmp_884_fu_300_p1;

assign tmp_887_fu_309_p2 = (tmp_885_reg_390 & tmp_886_fu_303_p2);

assign tmp_888_fu_314_p1 = tmp_887_fu_309_p2[7:0];

assign tmp_fu_169_p2 = ((i_phi_fu_142_p4 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_185_p1 = $unsigned(i_6_cast_fu_181_p1);

always @ (posedge ap_clk) begin
    key_addr_reg_328[31:25] <= 7'b0000000;
    tmp_882_reg_380[0] <= 1'b0;
end

endmodule //a0_aes_addRoundKey
