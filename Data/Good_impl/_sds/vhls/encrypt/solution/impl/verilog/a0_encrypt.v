// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="a0_encrypt,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000001,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.110001,HLS_SYN_LAT=18489,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=5268,HLS_SYN_LUT=11732}" *)

module a0_encrypt (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ctx_key_AWVALID,
        m_axi_ctx_key_AWREADY,
        m_axi_ctx_key_AWADDR,
        m_axi_ctx_key_AWID,
        m_axi_ctx_key_AWLEN,
        m_axi_ctx_key_AWSIZE,
        m_axi_ctx_key_AWBURST,
        m_axi_ctx_key_AWLOCK,
        m_axi_ctx_key_AWCACHE,
        m_axi_ctx_key_AWPROT,
        m_axi_ctx_key_AWQOS,
        m_axi_ctx_key_AWREGION,
        m_axi_ctx_key_AWUSER,
        m_axi_ctx_key_WVALID,
        m_axi_ctx_key_WREADY,
        m_axi_ctx_key_WDATA,
        m_axi_ctx_key_WSTRB,
        m_axi_ctx_key_WLAST,
        m_axi_ctx_key_WID,
        m_axi_ctx_key_WUSER,
        m_axi_ctx_key_ARVALID,
        m_axi_ctx_key_ARREADY,
        m_axi_ctx_key_ARADDR,
        m_axi_ctx_key_ARID,
        m_axi_ctx_key_ARLEN,
        m_axi_ctx_key_ARSIZE,
        m_axi_ctx_key_ARBURST,
        m_axi_ctx_key_ARLOCK,
        m_axi_ctx_key_ARCACHE,
        m_axi_ctx_key_ARPROT,
        m_axi_ctx_key_ARQOS,
        m_axi_ctx_key_ARREGION,
        m_axi_ctx_key_ARUSER,
        m_axi_ctx_key_RVALID,
        m_axi_ctx_key_RREADY,
        m_axi_ctx_key_RDATA,
        m_axi_ctx_key_RLAST,
        m_axi_ctx_key_RID,
        m_axi_ctx_key_RUSER,
        m_axi_ctx_key_RRESP,
        m_axi_ctx_key_BVALID,
        m_axi_ctx_key_BREADY,
        m_axi_ctx_key_BRESP,
        m_axi_ctx_key_BID,
        m_axi_ctx_key_BUSER,
        m_axi_ctx_enckey_AWVALID,
        m_axi_ctx_enckey_AWREADY,
        m_axi_ctx_enckey_AWADDR,
        m_axi_ctx_enckey_AWID,
        m_axi_ctx_enckey_AWLEN,
        m_axi_ctx_enckey_AWSIZE,
        m_axi_ctx_enckey_AWBURST,
        m_axi_ctx_enckey_AWLOCK,
        m_axi_ctx_enckey_AWCACHE,
        m_axi_ctx_enckey_AWPROT,
        m_axi_ctx_enckey_AWQOS,
        m_axi_ctx_enckey_AWREGION,
        m_axi_ctx_enckey_AWUSER,
        m_axi_ctx_enckey_WVALID,
        m_axi_ctx_enckey_WREADY,
        m_axi_ctx_enckey_WDATA,
        m_axi_ctx_enckey_WSTRB,
        m_axi_ctx_enckey_WLAST,
        m_axi_ctx_enckey_WID,
        m_axi_ctx_enckey_WUSER,
        m_axi_ctx_enckey_ARVALID,
        m_axi_ctx_enckey_ARREADY,
        m_axi_ctx_enckey_ARADDR,
        m_axi_ctx_enckey_ARID,
        m_axi_ctx_enckey_ARLEN,
        m_axi_ctx_enckey_ARSIZE,
        m_axi_ctx_enckey_ARBURST,
        m_axi_ctx_enckey_ARLOCK,
        m_axi_ctx_enckey_ARCACHE,
        m_axi_ctx_enckey_ARPROT,
        m_axi_ctx_enckey_ARQOS,
        m_axi_ctx_enckey_ARREGION,
        m_axi_ctx_enckey_ARUSER,
        m_axi_ctx_enckey_RVALID,
        m_axi_ctx_enckey_RREADY,
        m_axi_ctx_enckey_RDATA,
        m_axi_ctx_enckey_RLAST,
        m_axi_ctx_enckey_RID,
        m_axi_ctx_enckey_RUSER,
        m_axi_ctx_enckey_RRESP,
        m_axi_ctx_enckey_BVALID,
        m_axi_ctx_enckey_BREADY,
        m_axi_ctx_enckey_BRESP,
        m_axi_ctx_enckey_BID,
        m_axi_ctx_enckey_BUSER,
        m_axi_ctx_deckey_AWVALID,
        m_axi_ctx_deckey_AWREADY,
        m_axi_ctx_deckey_AWADDR,
        m_axi_ctx_deckey_AWID,
        m_axi_ctx_deckey_AWLEN,
        m_axi_ctx_deckey_AWSIZE,
        m_axi_ctx_deckey_AWBURST,
        m_axi_ctx_deckey_AWLOCK,
        m_axi_ctx_deckey_AWCACHE,
        m_axi_ctx_deckey_AWPROT,
        m_axi_ctx_deckey_AWQOS,
        m_axi_ctx_deckey_AWREGION,
        m_axi_ctx_deckey_AWUSER,
        m_axi_ctx_deckey_WVALID,
        m_axi_ctx_deckey_WREADY,
        m_axi_ctx_deckey_WDATA,
        m_axi_ctx_deckey_WSTRB,
        m_axi_ctx_deckey_WLAST,
        m_axi_ctx_deckey_WID,
        m_axi_ctx_deckey_WUSER,
        m_axi_ctx_deckey_ARVALID,
        m_axi_ctx_deckey_ARREADY,
        m_axi_ctx_deckey_ARADDR,
        m_axi_ctx_deckey_ARID,
        m_axi_ctx_deckey_ARLEN,
        m_axi_ctx_deckey_ARSIZE,
        m_axi_ctx_deckey_ARBURST,
        m_axi_ctx_deckey_ARLOCK,
        m_axi_ctx_deckey_ARCACHE,
        m_axi_ctx_deckey_ARPROT,
        m_axi_ctx_deckey_ARQOS,
        m_axi_ctx_deckey_ARREGION,
        m_axi_ctx_deckey_ARUSER,
        m_axi_ctx_deckey_RVALID,
        m_axi_ctx_deckey_RREADY,
        m_axi_ctx_deckey_RDATA,
        m_axi_ctx_deckey_RLAST,
        m_axi_ctx_deckey_RID,
        m_axi_ctx_deckey_RUSER,
        m_axi_ctx_deckey_RRESP,
        m_axi_ctx_deckey_BVALID,
        m_axi_ctx_deckey_BREADY,
        m_axi_ctx_deckey_BRESP,
        m_axi_ctx_deckey_BID,
        m_axi_ctx_deckey_BUSER,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        ctx_key_offset,
        ctx_enckey_offset,
        ctx_deckey_offset,
        k_Addr_A,
        k_EN_A,
        k_WEN_A,
        k_Din_A,
        k_Dout_A,
        k_Clk_A,
        k_Rst_A,
        buf_offset
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;
parameter    C_M_AXI_CTX_KEY_ID_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTX_KEY_DATA_WIDTH = 32;
parameter    C_M_AXI_CTX_KEY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_KEY_USER_VALUE = 0;
parameter    C_M_AXI_CTX_KEY_PROT_VALUE = 0;
parameter    C_M_AXI_CTX_KEY_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_CTX_ENCKEY_ID_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTX_ENCKEY_DATA_WIDTH = 32;
parameter    C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_ENCKEY_USER_VALUE = 0;
parameter    C_M_AXI_CTX_ENCKEY_PROT_VALUE = 0;
parameter    C_M_AXI_CTX_ENCKEY_CACHE_VALUE = 3;
parameter    C_M_AXI_CTX_DECKEY_ID_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_ADDR_WIDTH = 32;
parameter    C_M_AXI_CTX_DECKEY_DATA_WIDTH = 32;
parameter    C_M_AXI_CTX_DECKEY_AWUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_ARUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_WUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_RUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_BUSER_WIDTH = 1;
parameter    C_M_AXI_CTX_DECKEY_USER_VALUE = 0;
parameter    C_M_AXI_CTX_DECKEY_PROT_VALUE = 0;
parameter    C_M_AXI_CTX_DECKEY_CACHE_VALUE = 3;
parameter    C_M_AXI_BUF_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUF_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_USER_VALUE = 0;
parameter    C_M_AXI_BUF_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUF_R_CACHE_VALUE = 3;

parameter C_M_AXI_CTX_KEY_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CTX_ENCKEY_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_CTX_DECKEY_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUF_R_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ctx_key_AWVALID;
input   m_axi_ctx_key_AWREADY;
output  [C_M_AXI_CTX_KEY_ADDR_WIDTH - 1:0] m_axi_ctx_key_AWADDR;
output  [C_M_AXI_CTX_KEY_ID_WIDTH - 1:0] m_axi_ctx_key_AWID;
output  [7:0] m_axi_ctx_key_AWLEN;
output  [2:0] m_axi_ctx_key_AWSIZE;
output  [1:0] m_axi_ctx_key_AWBURST;
output  [1:0] m_axi_ctx_key_AWLOCK;
output  [3:0] m_axi_ctx_key_AWCACHE;
output  [2:0] m_axi_ctx_key_AWPROT;
output  [3:0] m_axi_ctx_key_AWQOS;
output  [3:0] m_axi_ctx_key_AWREGION;
output  [C_M_AXI_CTX_KEY_AWUSER_WIDTH - 1:0] m_axi_ctx_key_AWUSER;
output   m_axi_ctx_key_WVALID;
input   m_axi_ctx_key_WREADY;
output  [C_M_AXI_CTX_KEY_DATA_WIDTH - 1:0] m_axi_ctx_key_WDATA;
output  [C_M_AXI_CTX_KEY_WSTRB_WIDTH - 1:0] m_axi_ctx_key_WSTRB;
output   m_axi_ctx_key_WLAST;
output  [C_M_AXI_CTX_KEY_ID_WIDTH - 1:0] m_axi_ctx_key_WID;
output  [C_M_AXI_CTX_KEY_WUSER_WIDTH - 1:0] m_axi_ctx_key_WUSER;
output   m_axi_ctx_key_ARVALID;
input   m_axi_ctx_key_ARREADY;
output  [C_M_AXI_CTX_KEY_ADDR_WIDTH - 1:0] m_axi_ctx_key_ARADDR;
output  [C_M_AXI_CTX_KEY_ID_WIDTH - 1:0] m_axi_ctx_key_ARID;
output  [7:0] m_axi_ctx_key_ARLEN;
output  [2:0] m_axi_ctx_key_ARSIZE;
output  [1:0] m_axi_ctx_key_ARBURST;
output  [1:0] m_axi_ctx_key_ARLOCK;
output  [3:0] m_axi_ctx_key_ARCACHE;
output  [2:0] m_axi_ctx_key_ARPROT;
output  [3:0] m_axi_ctx_key_ARQOS;
output  [3:0] m_axi_ctx_key_ARREGION;
output  [C_M_AXI_CTX_KEY_ARUSER_WIDTH - 1:0] m_axi_ctx_key_ARUSER;
input   m_axi_ctx_key_RVALID;
output   m_axi_ctx_key_RREADY;
input  [C_M_AXI_CTX_KEY_DATA_WIDTH - 1:0] m_axi_ctx_key_RDATA;
input   m_axi_ctx_key_RLAST;
input  [C_M_AXI_CTX_KEY_ID_WIDTH - 1:0] m_axi_ctx_key_RID;
input  [C_M_AXI_CTX_KEY_RUSER_WIDTH - 1:0] m_axi_ctx_key_RUSER;
input  [1:0] m_axi_ctx_key_RRESP;
input   m_axi_ctx_key_BVALID;
output   m_axi_ctx_key_BREADY;
input  [1:0] m_axi_ctx_key_BRESP;
input  [C_M_AXI_CTX_KEY_ID_WIDTH - 1:0] m_axi_ctx_key_BID;
input  [C_M_AXI_CTX_KEY_BUSER_WIDTH - 1:0] m_axi_ctx_key_BUSER;
output   m_axi_ctx_enckey_AWVALID;
input   m_axi_ctx_enckey_AWREADY;
output  [C_M_AXI_CTX_ENCKEY_ADDR_WIDTH - 1:0] m_axi_ctx_enckey_AWADDR;
output  [C_M_AXI_CTX_ENCKEY_ID_WIDTH - 1:0] m_axi_ctx_enckey_AWID;
output  [7:0] m_axi_ctx_enckey_AWLEN;
output  [2:0] m_axi_ctx_enckey_AWSIZE;
output  [1:0] m_axi_ctx_enckey_AWBURST;
output  [1:0] m_axi_ctx_enckey_AWLOCK;
output  [3:0] m_axi_ctx_enckey_AWCACHE;
output  [2:0] m_axi_ctx_enckey_AWPROT;
output  [3:0] m_axi_ctx_enckey_AWQOS;
output  [3:0] m_axi_ctx_enckey_AWREGION;
output  [C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH - 1:0] m_axi_ctx_enckey_AWUSER;
output   m_axi_ctx_enckey_WVALID;
input   m_axi_ctx_enckey_WREADY;
output  [C_M_AXI_CTX_ENCKEY_DATA_WIDTH - 1:0] m_axi_ctx_enckey_WDATA;
output  [C_M_AXI_CTX_ENCKEY_WSTRB_WIDTH - 1:0] m_axi_ctx_enckey_WSTRB;
output   m_axi_ctx_enckey_WLAST;
output  [C_M_AXI_CTX_ENCKEY_ID_WIDTH - 1:0] m_axi_ctx_enckey_WID;
output  [C_M_AXI_CTX_ENCKEY_WUSER_WIDTH - 1:0] m_axi_ctx_enckey_WUSER;
output   m_axi_ctx_enckey_ARVALID;
input   m_axi_ctx_enckey_ARREADY;
output  [C_M_AXI_CTX_ENCKEY_ADDR_WIDTH - 1:0] m_axi_ctx_enckey_ARADDR;
output  [C_M_AXI_CTX_ENCKEY_ID_WIDTH - 1:0] m_axi_ctx_enckey_ARID;
output  [7:0] m_axi_ctx_enckey_ARLEN;
output  [2:0] m_axi_ctx_enckey_ARSIZE;
output  [1:0] m_axi_ctx_enckey_ARBURST;
output  [1:0] m_axi_ctx_enckey_ARLOCK;
output  [3:0] m_axi_ctx_enckey_ARCACHE;
output  [2:0] m_axi_ctx_enckey_ARPROT;
output  [3:0] m_axi_ctx_enckey_ARQOS;
output  [3:0] m_axi_ctx_enckey_ARREGION;
output  [C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH - 1:0] m_axi_ctx_enckey_ARUSER;
input   m_axi_ctx_enckey_RVALID;
output   m_axi_ctx_enckey_RREADY;
input  [C_M_AXI_CTX_ENCKEY_DATA_WIDTH - 1:0] m_axi_ctx_enckey_RDATA;
input   m_axi_ctx_enckey_RLAST;
input  [C_M_AXI_CTX_ENCKEY_ID_WIDTH - 1:0] m_axi_ctx_enckey_RID;
input  [C_M_AXI_CTX_ENCKEY_RUSER_WIDTH - 1:0] m_axi_ctx_enckey_RUSER;
input  [1:0] m_axi_ctx_enckey_RRESP;
input   m_axi_ctx_enckey_BVALID;
output   m_axi_ctx_enckey_BREADY;
input  [1:0] m_axi_ctx_enckey_BRESP;
input  [C_M_AXI_CTX_ENCKEY_ID_WIDTH - 1:0] m_axi_ctx_enckey_BID;
input  [C_M_AXI_CTX_ENCKEY_BUSER_WIDTH - 1:0] m_axi_ctx_enckey_BUSER;
output   m_axi_ctx_deckey_AWVALID;
input   m_axi_ctx_deckey_AWREADY;
output  [C_M_AXI_CTX_DECKEY_ADDR_WIDTH - 1:0] m_axi_ctx_deckey_AWADDR;
output  [C_M_AXI_CTX_DECKEY_ID_WIDTH - 1:0] m_axi_ctx_deckey_AWID;
output  [7:0] m_axi_ctx_deckey_AWLEN;
output  [2:0] m_axi_ctx_deckey_AWSIZE;
output  [1:0] m_axi_ctx_deckey_AWBURST;
output  [1:0] m_axi_ctx_deckey_AWLOCK;
output  [3:0] m_axi_ctx_deckey_AWCACHE;
output  [2:0] m_axi_ctx_deckey_AWPROT;
output  [3:0] m_axi_ctx_deckey_AWQOS;
output  [3:0] m_axi_ctx_deckey_AWREGION;
output  [C_M_AXI_CTX_DECKEY_AWUSER_WIDTH - 1:0] m_axi_ctx_deckey_AWUSER;
output   m_axi_ctx_deckey_WVALID;
input   m_axi_ctx_deckey_WREADY;
output  [C_M_AXI_CTX_DECKEY_DATA_WIDTH - 1:0] m_axi_ctx_deckey_WDATA;
output  [C_M_AXI_CTX_DECKEY_WSTRB_WIDTH - 1:0] m_axi_ctx_deckey_WSTRB;
output   m_axi_ctx_deckey_WLAST;
output  [C_M_AXI_CTX_DECKEY_ID_WIDTH - 1:0] m_axi_ctx_deckey_WID;
output  [C_M_AXI_CTX_DECKEY_WUSER_WIDTH - 1:0] m_axi_ctx_deckey_WUSER;
output   m_axi_ctx_deckey_ARVALID;
input   m_axi_ctx_deckey_ARREADY;
output  [C_M_AXI_CTX_DECKEY_ADDR_WIDTH - 1:0] m_axi_ctx_deckey_ARADDR;
output  [C_M_AXI_CTX_DECKEY_ID_WIDTH - 1:0] m_axi_ctx_deckey_ARID;
output  [7:0] m_axi_ctx_deckey_ARLEN;
output  [2:0] m_axi_ctx_deckey_ARSIZE;
output  [1:0] m_axi_ctx_deckey_ARBURST;
output  [1:0] m_axi_ctx_deckey_ARLOCK;
output  [3:0] m_axi_ctx_deckey_ARCACHE;
output  [2:0] m_axi_ctx_deckey_ARPROT;
output  [3:0] m_axi_ctx_deckey_ARQOS;
output  [3:0] m_axi_ctx_deckey_ARREGION;
output  [C_M_AXI_CTX_DECKEY_ARUSER_WIDTH - 1:0] m_axi_ctx_deckey_ARUSER;
input   m_axi_ctx_deckey_RVALID;
output   m_axi_ctx_deckey_RREADY;
input  [C_M_AXI_CTX_DECKEY_DATA_WIDTH - 1:0] m_axi_ctx_deckey_RDATA;
input   m_axi_ctx_deckey_RLAST;
input  [C_M_AXI_CTX_DECKEY_ID_WIDTH - 1:0] m_axi_ctx_deckey_RID;
input  [C_M_AXI_CTX_DECKEY_RUSER_WIDTH - 1:0] m_axi_ctx_deckey_RUSER;
input  [1:0] m_axi_ctx_deckey_RRESP;
input   m_axi_ctx_deckey_BVALID;
output   m_axi_ctx_deckey_BREADY;
input  [1:0] m_axi_ctx_deckey_BRESP;
input  [C_M_AXI_CTX_DECKEY_ID_WIDTH - 1:0] m_axi_ctx_deckey_BID;
input  [C_M_AXI_CTX_DECKEY_BUSER_WIDTH - 1:0] m_axi_ctx_deckey_BUSER;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_AWADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_AWID;
output  [7:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [C_M_AXI_BUF_R_AWUSER_WIDTH - 1:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_WDATA;
output  [C_M_AXI_BUF_R_WSTRB_WIDTH - 1:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_WID;
output  [C_M_AXI_BUF_R_WUSER_WIDTH - 1:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_ARADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_ARID;
output  [7:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [C_M_AXI_BUF_R_ARUSER_WIDTH - 1:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_RID;
input  [C_M_AXI_BUF_R_RUSER_WIDTH - 1:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_BID;
input  [C_M_AXI_BUF_R_BUSER_WIDTH - 1:0] m_axi_buf_r_BUSER;
input  [31:0] ctx_key_offset;
input  [31:0] ctx_enckey_offset;
input  [31:0] ctx_deckey_offset;
output  [31:0] k_Addr_A;
output   k_EN_A;
output  [0:0] k_WEN_A;
output  [7:0] k_Din_A;
input  [7:0] k_Dout_A;
output   k_Clk_A;
output   k_Rst_A;
input  [31:0] buf_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k_EN_A;
reg k_Rst_A;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ctx_enckey_blk_n_AW;
reg    ctx_enckey_blk_n_B;
wire    ap_CS_fsm_state8;
reg    ctx_enckey_blk_n_W;
wire    ap_CS_fsm_state4;
reg    ctx_deckey_blk_n_AW;
reg    ctx_deckey_blk_n_B;
reg    ctx_deckey_blk_n_W;
reg    ctx_key_AWVALID;
wire    ctx_key_AWREADY;
reg   [31:0] ctx_key_AWADDR;
reg   [0:0] ctx_key_AWID;
reg   [31:0] ctx_key_AWLEN;
reg   [2:0] ctx_key_AWSIZE;
reg   [1:0] ctx_key_AWBURST;
reg   [1:0] ctx_key_AWLOCK;
reg   [3:0] ctx_key_AWCACHE;
reg   [2:0] ctx_key_AWPROT;
reg   [3:0] ctx_key_AWQOS;
reg   [3:0] ctx_key_AWREGION;
reg   [0:0] ctx_key_AWUSER;
reg    ctx_key_WVALID;
wire    ctx_key_WREADY;
reg   [7:0] ctx_key_WDATA;
reg   [0:0] ctx_key_WSTRB;
reg    ctx_key_WLAST;
reg   [0:0] ctx_key_WID;
reg   [0:0] ctx_key_WUSER;
reg    ctx_key_ARVALID;
wire    ctx_key_ARREADY;
reg   [31:0] ctx_key_ARADDR;
reg   [0:0] ctx_key_ARID;
reg   [31:0] ctx_key_ARLEN;
reg   [2:0] ctx_key_ARSIZE;
reg   [1:0] ctx_key_ARBURST;
reg   [1:0] ctx_key_ARLOCK;
reg   [3:0] ctx_key_ARCACHE;
reg   [2:0] ctx_key_ARPROT;
reg   [3:0] ctx_key_ARQOS;
reg   [3:0] ctx_key_ARREGION;
reg   [0:0] ctx_key_ARUSER;
wire    ctx_key_RVALID;
reg    ctx_key_RREADY;
wire   [7:0] ctx_key_RDATA;
wire    ctx_key_RLAST;
wire   [0:0] ctx_key_RID;
wire   [0:0] ctx_key_RUSER;
wire   [1:0] ctx_key_RRESP;
wire    ctx_key_BVALID;
reg    ctx_key_BREADY;
wire   [1:0] ctx_key_BRESP;
wire   [0:0] ctx_key_BID;
wire   [0:0] ctx_key_BUSER;
reg    ctx_enckey_AWVALID;
wire    ctx_enckey_AWREADY;
reg    ctx_enckey_WVALID;
wire    ctx_enckey_WREADY;
reg    ctx_enckey_ARVALID;
wire    ctx_enckey_ARREADY;
wire    ctx_enckey_RVALID;
reg    ctx_enckey_RREADY;
wire   [7:0] ctx_enckey_RDATA;
wire    ctx_enckey_RLAST;
wire   [0:0] ctx_enckey_RID;
wire   [0:0] ctx_enckey_RUSER;
wire   [1:0] ctx_enckey_RRESP;
wire    ctx_enckey_BVALID;
reg    ctx_enckey_BREADY;
wire   [1:0] ctx_enckey_BRESP;
wire   [0:0] ctx_enckey_BID;
wire   [0:0] ctx_enckey_BUSER;
reg    ctx_deckey_AWVALID;
wire    ctx_deckey_AWREADY;
reg   [31:0] ctx_deckey_AWADDR;
reg   [0:0] ctx_deckey_AWID;
reg   [31:0] ctx_deckey_AWLEN;
reg   [2:0] ctx_deckey_AWSIZE;
reg   [1:0] ctx_deckey_AWBURST;
reg   [1:0] ctx_deckey_AWLOCK;
reg   [3:0] ctx_deckey_AWCACHE;
reg   [2:0] ctx_deckey_AWPROT;
reg   [3:0] ctx_deckey_AWQOS;
reg   [3:0] ctx_deckey_AWREGION;
reg   [0:0] ctx_deckey_AWUSER;
reg    ctx_deckey_WVALID;
wire    ctx_deckey_WREADY;
reg   [7:0] ctx_deckey_WDATA;
reg   [0:0] ctx_deckey_WSTRB;
reg    ctx_deckey_WLAST;
reg   [0:0] ctx_deckey_WID;
reg   [0:0] ctx_deckey_WUSER;
reg    ctx_deckey_ARVALID;
wire    ctx_deckey_ARREADY;
wire    ctx_deckey_RVALID;
reg    ctx_deckey_RREADY;
wire   [7:0] ctx_deckey_RDATA;
wire    ctx_deckey_RLAST;
wire   [0:0] ctx_deckey_RID;
wire   [0:0] ctx_deckey_RUSER;
wire   [1:0] ctx_deckey_RRESP;
wire    ctx_deckey_BVALID;
reg    ctx_deckey_BREADY;
wire   [1:0] ctx_deckey_BRESP;
wire   [0:0] ctx_deckey_BID;
wire   [0:0] ctx_deckey_BUSER;
reg    buf_r_AWVALID;
wire    buf_r_AWREADY;
reg   [31:0] buf_r_AWADDR;
reg   [0:0] buf_r_AWID;
reg   [31:0] buf_r_AWLEN;
reg   [2:0] buf_r_AWSIZE;
reg   [1:0] buf_r_AWBURST;
reg   [1:0] buf_r_AWLOCK;
reg   [3:0] buf_r_AWCACHE;
reg   [2:0] buf_r_AWPROT;
reg   [3:0] buf_r_AWQOS;
reg   [3:0] buf_r_AWREGION;
reg   [0:0] buf_r_AWUSER;
reg    buf_r_WVALID;
wire    buf_r_WREADY;
reg   [7:0] buf_r_WDATA;
reg   [0:0] buf_r_WSTRB;
reg    buf_r_WLAST;
reg   [0:0] buf_r_WID;
reg   [0:0] buf_r_WUSER;
reg    buf_r_ARVALID;
wire    buf_r_ARREADY;
reg   [31:0] buf_r_ARADDR;
reg   [0:0] buf_r_ARID;
reg   [31:0] buf_r_ARLEN;
reg   [2:0] buf_r_ARSIZE;
reg   [1:0] buf_r_ARBURST;
reg   [1:0] buf_r_ARLOCK;
reg   [3:0] buf_r_ARCACHE;
reg   [2:0] buf_r_ARPROT;
reg   [3:0] buf_r_ARQOS;
reg   [3:0] buf_r_ARREGION;
reg   [0:0] buf_r_ARUSER;
wire    buf_r_RVALID;
reg    buf_r_RREADY;
wire   [7:0] buf_r_RDATA;
wire    buf_r_RLAST;
wire   [0:0] buf_r_RID;
wire   [0:0] buf_r_RUSER;
wire   [1:0] buf_r_RRESP;
wire    buf_r_BVALID;
reg    buf_r_BREADY;
wire   [1:0] buf_r_BRESP;
wire   [0:0] buf_r_BID;
wire   [0:0] buf_r_BUSER;
reg   [7:0] reg_301;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_354_p2;
wire    ap_CS_fsm_state17;
wire    grp_aes_mixColumns_fu_255_ap_done;
wire   [0:0] tmp_1_fu_360_p1;
reg    ap_sig_ioackin_ctx_deckey_AWREADY;
reg    ap_sig_ioackin_ctx_enckey_AWREADY;
reg    ap_block_state1_io;
wire   [5:0] i_3_fu_326_p2;
reg   [5:0] i_3_reg_416;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_320_p2;
reg   [7:0] k_load_reg_426;
wire    ap_CS_fsm_state3;
wire   [2:0] phitmp_fu_343_p2;
reg   [2:0] phitmp_reg_435;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_7_fu_337_p2;
wire   [7:0] grp_aes_expandEncKey_fu_236_ap_return;
wire    ap_CS_fsm_state10;
wire    grp_aes_expandEncKey_fu_236_ap_done;
reg   [0:0] tmp_1_reg_455;
wire   [3:0] i_4_fu_369_p2;
wire    ap_CS_fsm_state20;
wire    grp_aes_addRoundKey_fu_275_ap_done;
reg    ap_block_state20_on_subcall_done;
wire    grp_aes_expandEncKey_fu_236_ap_start;
wire    grp_aes_expandEncKey_fu_236_ap_idle;
wire    grp_aes_expandEncKey_fu_236_ap_ready;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY;
wire   [31:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWID;
wire   [31:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN;
wire   [2:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE;
wire   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST;
wire   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE;
wire   [2:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_WVALID;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_WREADY;
wire   [7:0] grp_aes_expandEncKey_fu_236_m_axi_k_WDATA;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_WLAST;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_WID;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_WUSER;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY;
wire   [31:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARID;
wire   [31:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN;
wire   [2:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE;
wire   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST;
wire   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE;
wire   [2:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS;
wire   [3:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION;
wire   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_RVALID;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_RREADY;
reg   [7:0] grp_aes_expandEncKey_fu_236_m_axi_k_RDATA;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_RLAST;
reg   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_RID;
reg   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_RUSER;
reg   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_RRESP;
reg    grp_aes_expandEncKey_fu_236_m_axi_k_BVALID;
wire    grp_aes_expandEncKey_fu_236_m_axi_k_BREADY;
reg   [1:0] grp_aes_expandEncKey_fu_236_m_axi_k_BRESP;
reg   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_BID;
reg   [0:0] grp_aes_expandEncKey_fu_236_m_axi_k_BUSER;
reg   [31:0] grp_aes_expandEncKey_fu_236_k_offset;
reg   [7:0] grp_aes_expandEncKey_fu_236_rc_read;
wire    grp_aes_shiftRows_fu_248_ap_start;
wire    grp_aes_shiftRows_fu_248_ap_done;
wire    grp_aes_shiftRows_fu_248_ap_idle;
wire    grp_aes_shiftRows_fu_248_ap_ready;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID;
wire   [31:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID;
wire   [31:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN;
wire   [2:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE;
wire   [1:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST;
wire   [1:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE;
wire   [2:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID;
wire   [7:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_WID;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID;
wire   [31:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID;
wire   [31:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN;
wire   [2:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE;
wire   [1:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST;
wire   [1:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE;
wire   [2:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS;
wire   [3:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION;
wire   [0:0] grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY;
wire    grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY;
wire    grp_aes_mixColumns_fu_255_ap_start;
wire    grp_aes_mixColumns_fu_255_ap_idle;
wire    grp_aes_mixColumns_fu_255_ap_ready;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID;
wire   [31:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID;
wire   [31:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN;
wire   [2:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE;
wire   [1:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST;
wire   [1:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE;
wire   [2:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID;
wire   [7:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_WID;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID;
wire   [31:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID;
wire   [31:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN;
wire   [2:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE;
wire   [1:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST;
wire   [1:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE;
wire   [2:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS;
wire   [3:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION;
wire   [0:0] grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY;
wire    grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_ap_start;
wire    grp_aes_addRoundKey_cpy_fu_262_ap_done;
wire    grp_aes_addRoundKey_cpy_fu_262_ap_idle;
wire    grp_aes_addRoundKey_cpy_fu_262_ap_ready;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID;
wire   [7:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WVALID;
wire   [7:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WDATA;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WSTRB;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WLAST;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WID;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_key_BREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID;
wire   [7:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARVALID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARADDR;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARID;
wire   [31:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLEN;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARSIZE;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARBURST;
wire   [1:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLOCK;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARCACHE;
wire   [2:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARPROT;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARQOS;
wire   [3:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARREGION;
wire   [0:0] grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARUSER;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_RREADY;
wire    grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY;
wire    grp_aes_addRoundKey_fu_275_ap_start;
wire    grp_aes_addRoundKey_fu_275_ap_idle;
wire    grp_aes_addRoundKey_fu_275_ap_ready;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID;
wire   [7:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY;
wire    grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_AWVALID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWADDR;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWLEN;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWSIZE;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWBURST;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWLOCK;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWCACHE;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWPROT;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWQOS;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWREGION;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_AWUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_WVALID;
wire   [7:0] grp_aes_addRoundKey_fu_275_m_axi_key_WDATA;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_WSTRB;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_WLAST;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_WID;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_WUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARID;
wire   [31:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST;
wire   [1:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE;
wire   [2:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS;
wire   [3:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION;
wire   [0:0] grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_RREADY;
wire    grp_aes_addRoundKey_fu_275_m_axi_key_BREADY;
reg   [5:0] grp_aes_addRoundKey_fu_275_key_offset_offset;
wire    grp_aes_subBytes_fu_288_ap_start;
wire    grp_aes_subBytes_fu_288_ap_done;
wire    grp_aes_subBytes_fu_288_ap_idle;
wire    grp_aes_subBytes_fu_288_ap_ready;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID;
wire   [31:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWID;
wire   [31:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN;
wire   [2:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE;
wire   [1:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST;
wire   [1:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE;
wire   [2:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID;
wire   [7:0] grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_WID;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID;
wire   [31:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARID;
wire   [31:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN;
wire   [2:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE;
wire   [1:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST;
wire   [1:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE;
wire   [2:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS;
wire   [3:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION;
wire   [0:0] grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY;
wire    grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY;
reg   [5:0] i_reg_190;
reg    ap_sig_ioackin_ctx_deckey_WREADY;
reg    ap_sig_ioackin_ctx_enckey_WREADY;
reg    ap_block_state4_io;
reg   [7:0] rcon_reg_201;
reg    ap_block_state8;
reg   [2:0] i_1_reg_213;
reg   [3:0] i_2_reg_224;
wire    ap_CS_fsm_state11;
reg    ap_reg_grp_aes_expandEncKey_fu_236_ap_start;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state18;
reg    ap_reg_grp_aes_shiftRows_fu_248_ap_start;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state25;
reg    ap_reg_grp_aes_mixColumns_fu_255_ap_start;
wire    ap_CS_fsm_state16;
reg    ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start;
reg    ap_reg_grp_aes_addRoundKey_fu_275_ap_start;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
reg    ap_reg_grp_aes_subBytes_fu_288_ap_start;
wire    ap_CS_fsm_state13;
wire   [31:0] tmp_5_fu_332_p1;
reg    ap_reg_ioackin_ctx_deckey_AWREADY;
reg    ap_reg_ioackin_ctx_enckey_AWREADY;
reg    ap_reg_ioackin_ctx_deckey_WREADY;
reg    ap_reg_ioackin_ctx_enckey_WREADY;
reg   [7:0] rcon_1_fu_118;
reg   [26:0] ap_NS_fsm;
reg    ap_block_state23_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 ap_reg_grp_aes_expandEncKey_fu_236_ap_start = 1'b0;
#0 ap_reg_grp_aes_shiftRows_fu_248_ap_start = 1'b0;
#0 ap_reg_grp_aes_mixColumns_fu_255_ap_start = 1'b0;
#0 ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start = 1'b0;
#0 ap_reg_grp_aes_addRoundKey_fu_275_ap_start = 1'b0;
#0 ap_reg_grp_aes_subBytes_fu_288_ap_start = 1'b0;
#0 ap_reg_ioackin_ctx_deckey_AWREADY = 1'b0;
#0 ap_reg_ioackin_ctx_enckey_AWREADY = 1'b0;
#0 ap_reg_ioackin_ctx_deckey_WREADY = 1'b0;
#0 ap_reg_ioackin_ctx_enckey_WREADY = 1'b0;
end

a0_encrypt_ctx_key_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CTX_KEY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CTX_KEY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CTX_KEY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CTX_KEY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CTX_KEY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CTX_KEY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CTX_KEY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CTX_KEY_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CTX_KEY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CTX_KEY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CTX_KEY_CACHE_VALUE ))
encrypt_ctx_key_m_axi_U(
    .AWVALID(m_axi_ctx_key_AWVALID),
    .AWREADY(m_axi_ctx_key_AWREADY),
    .AWADDR(m_axi_ctx_key_AWADDR),
    .AWID(m_axi_ctx_key_AWID),
    .AWLEN(m_axi_ctx_key_AWLEN),
    .AWSIZE(m_axi_ctx_key_AWSIZE),
    .AWBURST(m_axi_ctx_key_AWBURST),
    .AWLOCK(m_axi_ctx_key_AWLOCK),
    .AWCACHE(m_axi_ctx_key_AWCACHE),
    .AWPROT(m_axi_ctx_key_AWPROT),
    .AWQOS(m_axi_ctx_key_AWQOS),
    .AWREGION(m_axi_ctx_key_AWREGION),
    .AWUSER(m_axi_ctx_key_AWUSER),
    .WVALID(m_axi_ctx_key_WVALID),
    .WREADY(m_axi_ctx_key_WREADY),
    .WDATA(m_axi_ctx_key_WDATA),
    .WSTRB(m_axi_ctx_key_WSTRB),
    .WLAST(m_axi_ctx_key_WLAST),
    .WID(m_axi_ctx_key_WID),
    .WUSER(m_axi_ctx_key_WUSER),
    .ARVALID(m_axi_ctx_key_ARVALID),
    .ARREADY(m_axi_ctx_key_ARREADY),
    .ARADDR(m_axi_ctx_key_ARADDR),
    .ARID(m_axi_ctx_key_ARID),
    .ARLEN(m_axi_ctx_key_ARLEN),
    .ARSIZE(m_axi_ctx_key_ARSIZE),
    .ARBURST(m_axi_ctx_key_ARBURST),
    .ARLOCK(m_axi_ctx_key_ARLOCK),
    .ARCACHE(m_axi_ctx_key_ARCACHE),
    .ARPROT(m_axi_ctx_key_ARPROT),
    .ARQOS(m_axi_ctx_key_ARQOS),
    .ARREGION(m_axi_ctx_key_ARREGION),
    .ARUSER(m_axi_ctx_key_ARUSER),
    .RVALID(m_axi_ctx_key_RVALID),
    .RREADY(m_axi_ctx_key_RREADY),
    .RDATA(m_axi_ctx_key_RDATA),
    .RLAST(m_axi_ctx_key_RLAST),
    .RID(m_axi_ctx_key_RID),
    .RUSER(m_axi_ctx_key_RUSER),
    .RRESP(m_axi_ctx_key_RRESP),
    .BVALID(m_axi_ctx_key_BVALID),
    .BREADY(m_axi_ctx_key_BREADY),
    .BRESP(m_axi_ctx_key_BRESP),
    .BID(m_axi_ctx_key_BID),
    .BUSER(m_axi_ctx_key_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ctx_key_ARVALID),
    .I_ARREADY(ctx_key_ARREADY),
    .I_ARADDR(ctx_key_ARADDR),
    .I_ARID(ctx_key_ARID),
    .I_ARLEN(ctx_key_ARLEN),
    .I_ARSIZE(ctx_key_ARSIZE),
    .I_ARLOCK(ctx_key_ARLOCK),
    .I_ARCACHE(ctx_key_ARCACHE),
    .I_ARQOS(ctx_key_ARQOS),
    .I_ARPROT(ctx_key_ARPROT),
    .I_ARUSER(ctx_key_ARUSER),
    .I_ARBURST(ctx_key_ARBURST),
    .I_ARREGION(ctx_key_ARREGION),
    .I_RVALID(ctx_key_RVALID),
    .I_RREADY(ctx_key_RREADY),
    .I_RDATA(ctx_key_RDATA),
    .I_RID(ctx_key_RID),
    .I_RUSER(ctx_key_RUSER),
    .I_RRESP(ctx_key_RRESP),
    .I_RLAST(ctx_key_RLAST),
    .I_AWVALID(ctx_key_AWVALID),
    .I_AWREADY(ctx_key_AWREADY),
    .I_AWADDR(ctx_key_AWADDR),
    .I_AWID(ctx_key_AWID),
    .I_AWLEN(ctx_key_AWLEN),
    .I_AWSIZE(ctx_key_AWSIZE),
    .I_AWLOCK(ctx_key_AWLOCK),
    .I_AWCACHE(ctx_key_AWCACHE),
    .I_AWQOS(ctx_key_AWQOS),
    .I_AWPROT(ctx_key_AWPROT),
    .I_AWUSER(ctx_key_AWUSER),
    .I_AWBURST(ctx_key_AWBURST),
    .I_AWREGION(ctx_key_AWREGION),
    .I_WVALID(ctx_key_WVALID),
    .I_WREADY(ctx_key_WREADY),
    .I_WDATA(ctx_key_WDATA),
    .I_WID(ctx_key_WID),
    .I_WUSER(ctx_key_WUSER),
    .I_WLAST(ctx_key_WLAST),
    .I_WSTRB(ctx_key_WSTRB),
    .I_BVALID(ctx_key_BVALID),
    .I_BREADY(ctx_key_BREADY),
    .I_BRESP(ctx_key_BRESP),
    .I_BID(ctx_key_BID),
    .I_BUSER(ctx_key_BUSER)
);

a0_encrypt_ctx_enckey_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CTX_ENCKEY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CTX_ENCKEY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CTX_ENCKEY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CTX_ENCKEY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CTX_ENCKEY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CTX_ENCKEY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CTX_ENCKEY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CTX_ENCKEY_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CTX_ENCKEY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CTX_ENCKEY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CTX_ENCKEY_CACHE_VALUE ))
encrypt_ctx_enckey_m_axi_U(
    .AWVALID(m_axi_ctx_enckey_AWVALID),
    .AWREADY(m_axi_ctx_enckey_AWREADY),
    .AWADDR(m_axi_ctx_enckey_AWADDR),
    .AWID(m_axi_ctx_enckey_AWID),
    .AWLEN(m_axi_ctx_enckey_AWLEN),
    .AWSIZE(m_axi_ctx_enckey_AWSIZE),
    .AWBURST(m_axi_ctx_enckey_AWBURST),
    .AWLOCK(m_axi_ctx_enckey_AWLOCK),
    .AWCACHE(m_axi_ctx_enckey_AWCACHE),
    .AWPROT(m_axi_ctx_enckey_AWPROT),
    .AWQOS(m_axi_ctx_enckey_AWQOS),
    .AWREGION(m_axi_ctx_enckey_AWREGION),
    .AWUSER(m_axi_ctx_enckey_AWUSER),
    .WVALID(m_axi_ctx_enckey_WVALID),
    .WREADY(m_axi_ctx_enckey_WREADY),
    .WDATA(m_axi_ctx_enckey_WDATA),
    .WSTRB(m_axi_ctx_enckey_WSTRB),
    .WLAST(m_axi_ctx_enckey_WLAST),
    .WID(m_axi_ctx_enckey_WID),
    .WUSER(m_axi_ctx_enckey_WUSER),
    .ARVALID(m_axi_ctx_enckey_ARVALID),
    .ARREADY(m_axi_ctx_enckey_ARREADY),
    .ARADDR(m_axi_ctx_enckey_ARADDR),
    .ARID(m_axi_ctx_enckey_ARID),
    .ARLEN(m_axi_ctx_enckey_ARLEN),
    .ARSIZE(m_axi_ctx_enckey_ARSIZE),
    .ARBURST(m_axi_ctx_enckey_ARBURST),
    .ARLOCK(m_axi_ctx_enckey_ARLOCK),
    .ARCACHE(m_axi_ctx_enckey_ARCACHE),
    .ARPROT(m_axi_ctx_enckey_ARPROT),
    .ARQOS(m_axi_ctx_enckey_ARQOS),
    .ARREGION(m_axi_ctx_enckey_ARREGION),
    .ARUSER(m_axi_ctx_enckey_ARUSER),
    .RVALID(m_axi_ctx_enckey_RVALID),
    .RREADY(m_axi_ctx_enckey_RREADY),
    .RDATA(m_axi_ctx_enckey_RDATA),
    .RLAST(m_axi_ctx_enckey_RLAST),
    .RID(m_axi_ctx_enckey_RID),
    .RUSER(m_axi_ctx_enckey_RUSER),
    .RRESP(m_axi_ctx_enckey_RRESP),
    .BVALID(m_axi_ctx_enckey_BVALID),
    .BREADY(m_axi_ctx_enckey_BREADY),
    .BRESP(m_axi_ctx_enckey_BRESP),
    .BID(m_axi_ctx_enckey_BID),
    .BUSER(m_axi_ctx_enckey_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ctx_enckey_ARVALID),
    .I_ARREADY(ctx_enckey_ARREADY),
    .I_ARADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR),
    .I_ARID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID),
    .I_ARLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN),
    .I_ARSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE),
    .I_ARLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK),
    .I_ARCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE),
    .I_ARQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS),
    .I_ARPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT),
    .I_ARUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER),
    .I_ARBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST),
    .I_ARREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION),
    .I_RVALID(ctx_enckey_RVALID),
    .I_RREADY(ctx_enckey_RREADY),
    .I_RDATA(ctx_enckey_RDATA),
    .I_RID(ctx_enckey_RID),
    .I_RUSER(ctx_enckey_RUSER),
    .I_RRESP(ctx_enckey_RRESP),
    .I_RLAST(ctx_enckey_RLAST),
    .I_AWVALID(ctx_enckey_AWVALID),
    .I_AWREADY(ctx_enckey_AWREADY),
    .I_AWADDR(ctx_enckey_offset),
    .I_AWID(1'd0),
    .I_AWLEN(32'd32),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(ctx_enckey_WVALID),
    .I_WREADY(ctx_enckey_WREADY),
    .I_WDATA(k_load_reg_426),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(ctx_enckey_BVALID),
    .I_BREADY(ctx_enckey_BREADY),
    .I_BRESP(ctx_enckey_BRESP),
    .I_BID(ctx_enckey_BID),
    .I_BUSER(ctx_enckey_BUSER)
);

a0_encrypt_ctx_deckey_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_CTX_DECKEY_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_CTX_DECKEY_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_CTX_DECKEY_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_CTX_DECKEY_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_CTX_DECKEY_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_CTX_DECKEY_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_CTX_DECKEY_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_CTX_DECKEY_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_CTX_DECKEY_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_CTX_DECKEY_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_CTX_DECKEY_CACHE_VALUE ))
encrypt_ctx_deckey_m_axi_U(
    .AWVALID(m_axi_ctx_deckey_AWVALID),
    .AWREADY(m_axi_ctx_deckey_AWREADY),
    .AWADDR(m_axi_ctx_deckey_AWADDR),
    .AWID(m_axi_ctx_deckey_AWID),
    .AWLEN(m_axi_ctx_deckey_AWLEN),
    .AWSIZE(m_axi_ctx_deckey_AWSIZE),
    .AWBURST(m_axi_ctx_deckey_AWBURST),
    .AWLOCK(m_axi_ctx_deckey_AWLOCK),
    .AWCACHE(m_axi_ctx_deckey_AWCACHE),
    .AWPROT(m_axi_ctx_deckey_AWPROT),
    .AWQOS(m_axi_ctx_deckey_AWQOS),
    .AWREGION(m_axi_ctx_deckey_AWREGION),
    .AWUSER(m_axi_ctx_deckey_AWUSER),
    .WVALID(m_axi_ctx_deckey_WVALID),
    .WREADY(m_axi_ctx_deckey_WREADY),
    .WDATA(m_axi_ctx_deckey_WDATA),
    .WSTRB(m_axi_ctx_deckey_WSTRB),
    .WLAST(m_axi_ctx_deckey_WLAST),
    .WID(m_axi_ctx_deckey_WID),
    .WUSER(m_axi_ctx_deckey_WUSER),
    .ARVALID(m_axi_ctx_deckey_ARVALID),
    .ARREADY(m_axi_ctx_deckey_ARREADY),
    .ARADDR(m_axi_ctx_deckey_ARADDR),
    .ARID(m_axi_ctx_deckey_ARID),
    .ARLEN(m_axi_ctx_deckey_ARLEN),
    .ARSIZE(m_axi_ctx_deckey_ARSIZE),
    .ARBURST(m_axi_ctx_deckey_ARBURST),
    .ARLOCK(m_axi_ctx_deckey_ARLOCK),
    .ARCACHE(m_axi_ctx_deckey_ARCACHE),
    .ARPROT(m_axi_ctx_deckey_ARPROT),
    .ARQOS(m_axi_ctx_deckey_ARQOS),
    .ARREGION(m_axi_ctx_deckey_ARREGION),
    .ARUSER(m_axi_ctx_deckey_ARUSER),
    .RVALID(m_axi_ctx_deckey_RVALID),
    .RREADY(m_axi_ctx_deckey_RREADY),
    .RDATA(m_axi_ctx_deckey_RDATA),
    .RLAST(m_axi_ctx_deckey_RLAST),
    .RID(m_axi_ctx_deckey_RID),
    .RUSER(m_axi_ctx_deckey_RUSER),
    .RRESP(m_axi_ctx_deckey_RRESP),
    .BVALID(m_axi_ctx_deckey_BVALID),
    .BREADY(m_axi_ctx_deckey_BREADY),
    .BRESP(m_axi_ctx_deckey_BRESP),
    .BID(m_axi_ctx_deckey_BID),
    .BUSER(m_axi_ctx_deckey_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(ctx_deckey_ARVALID),
    .I_ARREADY(ctx_deckey_ARREADY),
    .I_ARADDR(grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR),
    .I_ARID(grp_aes_expandEncKey_fu_236_m_axi_k_ARID),
    .I_ARLEN(grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN),
    .I_ARSIZE(grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE),
    .I_ARLOCK(grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK),
    .I_ARCACHE(grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE),
    .I_ARQOS(grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS),
    .I_ARPROT(grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT),
    .I_ARUSER(grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER),
    .I_ARBURST(grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST),
    .I_ARREGION(grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION),
    .I_RVALID(ctx_deckey_RVALID),
    .I_RREADY(ctx_deckey_RREADY),
    .I_RDATA(ctx_deckey_RDATA),
    .I_RID(ctx_deckey_RID),
    .I_RUSER(ctx_deckey_RUSER),
    .I_RRESP(ctx_deckey_RRESP),
    .I_RLAST(ctx_deckey_RLAST),
    .I_AWVALID(ctx_deckey_AWVALID),
    .I_AWREADY(ctx_deckey_AWREADY),
    .I_AWADDR(ctx_deckey_AWADDR),
    .I_AWID(ctx_deckey_AWID),
    .I_AWLEN(ctx_deckey_AWLEN),
    .I_AWSIZE(ctx_deckey_AWSIZE),
    .I_AWLOCK(ctx_deckey_AWLOCK),
    .I_AWCACHE(ctx_deckey_AWCACHE),
    .I_AWQOS(ctx_deckey_AWQOS),
    .I_AWPROT(ctx_deckey_AWPROT),
    .I_AWUSER(ctx_deckey_AWUSER),
    .I_AWBURST(ctx_deckey_AWBURST),
    .I_AWREGION(ctx_deckey_AWREGION),
    .I_WVALID(ctx_deckey_WVALID),
    .I_WREADY(ctx_deckey_WREADY),
    .I_WDATA(ctx_deckey_WDATA),
    .I_WID(ctx_deckey_WID),
    .I_WUSER(ctx_deckey_WUSER),
    .I_WLAST(ctx_deckey_WLAST),
    .I_WSTRB(ctx_deckey_WSTRB),
    .I_BVALID(ctx_deckey_BVALID),
    .I_BREADY(ctx_deckey_BREADY),
    .I_BRESP(ctx_deckey_BRESP),
    .I_BID(ctx_deckey_BID),
    .I_BUSER(ctx_deckey_BUSER)
);

a0_encrypt_buf_r_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUF_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUF_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUF_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUF_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUF_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUF_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUF_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUF_R_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_BUF_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUF_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUF_R_CACHE_VALUE ))
encrypt_buf_r_m_axi_U(
    .AWVALID(m_axi_buf_r_AWVALID),
    .AWREADY(m_axi_buf_r_AWREADY),
    .AWADDR(m_axi_buf_r_AWADDR),
    .AWID(m_axi_buf_r_AWID),
    .AWLEN(m_axi_buf_r_AWLEN),
    .AWSIZE(m_axi_buf_r_AWSIZE),
    .AWBURST(m_axi_buf_r_AWBURST),
    .AWLOCK(m_axi_buf_r_AWLOCK),
    .AWCACHE(m_axi_buf_r_AWCACHE),
    .AWPROT(m_axi_buf_r_AWPROT),
    .AWQOS(m_axi_buf_r_AWQOS),
    .AWREGION(m_axi_buf_r_AWREGION),
    .AWUSER(m_axi_buf_r_AWUSER),
    .WVALID(m_axi_buf_r_WVALID),
    .WREADY(m_axi_buf_r_WREADY),
    .WDATA(m_axi_buf_r_WDATA),
    .WSTRB(m_axi_buf_r_WSTRB),
    .WLAST(m_axi_buf_r_WLAST),
    .WID(m_axi_buf_r_WID),
    .WUSER(m_axi_buf_r_WUSER),
    .ARVALID(m_axi_buf_r_ARVALID),
    .ARREADY(m_axi_buf_r_ARREADY),
    .ARADDR(m_axi_buf_r_ARADDR),
    .ARID(m_axi_buf_r_ARID),
    .ARLEN(m_axi_buf_r_ARLEN),
    .ARSIZE(m_axi_buf_r_ARSIZE),
    .ARBURST(m_axi_buf_r_ARBURST),
    .ARLOCK(m_axi_buf_r_ARLOCK),
    .ARCACHE(m_axi_buf_r_ARCACHE),
    .ARPROT(m_axi_buf_r_ARPROT),
    .ARQOS(m_axi_buf_r_ARQOS),
    .ARREGION(m_axi_buf_r_ARREGION),
    .ARUSER(m_axi_buf_r_ARUSER),
    .RVALID(m_axi_buf_r_RVALID),
    .RREADY(m_axi_buf_r_RREADY),
    .RDATA(m_axi_buf_r_RDATA),
    .RLAST(m_axi_buf_r_RLAST),
    .RID(m_axi_buf_r_RID),
    .RUSER(m_axi_buf_r_RUSER),
    .RRESP(m_axi_buf_r_RRESP),
    .BVALID(m_axi_buf_r_BVALID),
    .BREADY(m_axi_buf_r_BREADY),
    .BRESP(m_axi_buf_r_BRESP),
    .BID(m_axi_buf_r_BID),
    .BUSER(m_axi_buf_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(buf_r_ARVALID),
    .I_ARREADY(buf_r_ARREADY),
    .I_ARADDR(buf_r_ARADDR),
    .I_ARID(buf_r_ARID),
    .I_ARLEN(buf_r_ARLEN),
    .I_ARSIZE(buf_r_ARSIZE),
    .I_ARLOCK(buf_r_ARLOCK),
    .I_ARCACHE(buf_r_ARCACHE),
    .I_ARQOS(buf_r_ARQOS),
    .I_ARPROT(buf_r_ARPROT),
    .I_ARUSER(buf_r_ARUSER),
    .I_ARBURST(buf_r_ARBURST),
    .I_ARREGION(buf_r_ARREGION),
    .I_RVALID(buf_r_RVALID),
    .I_RREADY(buf_r_RREADY),
    .I_RDATA(buf_r_RDATA),
    .I_RID(buf_r_RID),
    .I_RUSER(buf_r_RUSER),
    .I_RRESP(buf_r_RRESP),
    .I_RLAST(buf_r_RLAST),
    .I_AWVALID(buf_r_AWVALID),
    .I_AWREADY(buf_r_AWREADY),
    .I_AWADDR(buf_r_AWADDR),
    .I_AWID(buf_r_AWID),
    .I_AWLEN(buf_r_AWLEN),
    .I_AWSIZE(buf_r_AWSIZE),
    .I_AWLOCK(buf_r_AWLOCK),
    .I_AWCACHE(buf_r_AWCACHE),
    .I_AWQOS(buf_r_AWQOS),
    .I_AWPROT(buf_r_AWPROT),
    .I_AWUSER(buf_r_AWUSER),
    .I_AWBURST(buf_r_AWBURST),
    .I_AWREGION(buf_r_AWREGION),
    .I_WVALID(buf_r_WVALID),
    .I_WREADY(buf_r_WREADY),
    .I_WDATA(buf_r_WDATA),
    .I_WID(buf_r_WID),
    .I_WUSER(buf_r_WUSER),
    .I_WLAST(buf_r_WLAST),
    .I_WSTRB(buf_r_WSTRB),
    .I_BVALID(buf_r_BVALID),
    .I_BREADY(buf_r_BREADY),
    .I_BRESP(buf_r_BRESP),
    .I_BID(buf_r_BID),
    .I_BUSER(buf_r_BUSER)
);

a0_aes_expandEncKey grp_aes_expandEncKey_fu_236(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_expandEncKey_fu_236_ap_start),
    .ap_done(grp_aes_expandEncKey_fu_236_ap_done),
    .ap_idle(grp_aes_expandEncKey_fu_236_ap_idle),
    .ap_ready(grp_aes_expandEncKey_fu_236_ap_ready),
    .m_axi_k_AWVALID(grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID),
    .m_axi_k_AWREADY(grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY),
    .m_axi_k_AWADDR(grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR),
    .m_axi_k_AWID(grp_aes_expandEncKey_fu_236_m_axi_k_AWID),
    .m_axi_k_AWLEN(grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN),
    .m_axi_k_AWSIZE(grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE),
    .m_axi_k_AWBURST(grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST),
    .m_axi_k_AWLOCK(grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK),
    .m_axi_k_AWCACHE(grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE),
    .m_axi_k_AWPROT(grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT),
    .m_axi_k_AWQOS(grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS),
    .m_axi_k_AWREGION(grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION),
    .m_axi_k_AWUSER(grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER),
    .m_axi_k_WVALID(grp_aes_expandEncKey_fu_236_m_axi_k_WVALID),
    .m_axi_k_WREADY(grp_aes_expandEncKey_fu_236_m_axi_k_WREADY),
    .m_axi_k_WDATA(grp_aes_expandEncKey_fu_236_m_axi_k_WDATA),
    .m_axi_k_WSTRB(grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB),
    .m_axi_k_WLAST(grp_aes_expandEncKey_fu_236_m_axi_k_WLAST),
    .m_axi_k_WID(grp_aes_expandEncKey_fu_236_m_axi_k_WID),
    .m_axi_k_WUSER(grp_aes_expandEncKey_fu_236_m_axi_k_WUSER),
    .m_axi_k_ARVALID(grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID),
    .m_axi_k_ARREADY(grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY),
    .m_axi_k_ARADDR(grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR),
    .m_axi_k_ARID(grp_aes_expandEncKey_fu_236_m_axi_k_ARID),
    .m_axi_k_ARLEN(grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN),
    .m_axi_k_ARSIZE(grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE),
    .m_axi_k_ARBURST(grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST),
    .m_axi_k_ARLOCK(grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK),
    .m_axi_k_ARCACHE(grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE),
    .m_axi_k_ARPROT(grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT),
    .m_axi_k_ARQOS(grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS),
    .m_axi_k_ARREGION(grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION),
    .m_axi_k_ARUSER(grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER),
    .m_axi_k_RVALID(grp_aes_expandEncKey_fu_236_m_axi_k_RVALID),
    .m_axi_k_RREADY(grp_aes_expandEncKey_fu_236_m_axi_k_RREADY),
    .m_axi_k_RDATA(grp_aes_expandEncKey_fu_236_m_axi_k_RDATA),
    .m_axi_k_RLAST(grp_aes_expandEncKey_fu_236_m_axi_k_RLAST),
    .m_axi_k_RID(grp_aes_expandEncKey_fu_236_m_axi_k_RID),
    .m_axi_k_RUSER(grp_aes_expandEncKey_fu_236_m_axi_k_RUSER),
    .m_axi_k_RRESP(grp_aes_expandEncKey_fu_236_m_axi_k_RRESP),
    .m_axi_k_BVALID(grp_aes_expandEncKey_fu_236_m_axi_k_BVALID),
    .m_axi_k_BREADY(grp_aes_expandEncKey_fu_236_m_axi_k_BREADY),
    .m_axi_k_BRESP(grp_aes_expandEncKey_fu_236_m_axi_k_BRESP),
    .m_axi_k_BID(grp_aes_expandEncKey_fu_236_m_axi_k_BID),
    .m_axi_k_BUSER(grp_aes_expandEncKey_fu_236_m_axi_k_BUSER),
    .k_offset(grp_aes_expandEncKey_fu_236_k_offset),
    .rc_read(grp_aes_expandEncKey_fu_236_rc_read),
    .ap_return(grp_aes_expandEncKey_fu_236_ap_return)
);

a0_aes_shiftRows grp_aes_shiftRows_fu_248(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_shiftRows_fu_248_ap_start),
    .ap_done(grp_aes_shiftRows_fu_248_ap_done),
    .ap_idle(grp_aes_shiftRows_fu_248_ap_idle),
    .ap_ready(grp_aes_shiftRows_fu_248_ap_ready),
    .m_axi_buf_r_AWVALID(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID),
    .m_axi_buf_r_AWREADY(buf_r_AWREADY),
    .m_axi_buf_r_AWADDR(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR),
    .m_axi_buf_r_AWID(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID),
    .m_axi_buf_r_AWLEN(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN),
    .m_axi_buf_r_AWSIZE(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE),
    .m_axi_buf_r_AWBURST(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST),
    .m_axi_buf_r_AWLOCK(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK),
    .m_axi_buf_r_AWCACHE(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE),
    .m_axi_buf_r_AWPROT(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT),
    .m_axi_buf_r_AWQOS(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS),
    .m_axi_buf_r_AWREGION(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION),
    .m_axi_buf_r_AWUSER(grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER),
    .m_axi_buf_r_WVALID(grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID),
    .m_axi_buf_r_WREADY(buf_r_WREADY),
    .m_axi_buf_r_WDATA(grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA),
    .m_axi_buf_r_WSTRB(grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB),
    .m_axi_buf_r_WLAST(grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST),
    .m_axi_buf_r_WID(grp_aes_shiftRows_fu_248_m_axi_buf_r_WID),
    .m_axi_buf_r_WUSER(grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER),
    .m_axi_buf_r_ARVALID(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID),
    .m_axi_buf_r_ARREADY(buf_r_ARREADY),
    .m_axi_buf_r_ARADDR(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR),
    .m_axi_buf_r_ARID(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID),
    .m_axi_buf_r_ARLEN(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN),
    .m_axi_buf_r_ARSIZE(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE),
    .m_axi_buf_r_ARBURST(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST),
    .m_axi_buf_r_ARLOCK(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK),
    .m_axi_buf_r_ARCACHE(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE),
    .m_axi_buf_r_ARPROT(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT),
    .m_axi_buf_r_ARQOS(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS),
    .m_axi_buf_r_ARREGION(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION),
    .m_axi_buf_r_ARUSER(grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER),
    .m_axi_buf_r_RVALID(buf_r_RVALID),
    .m_axi_buf_r_RREADY(grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY),
    .m_axi_buf_r_RDATA(buf_r_RDATA),
    .m_axi_buf_r_RLAST(buf_r_RLAST),
    .m_axi_buf_r_RID(buf_r_RID),
    .m_axi_buf_r_RUSER(buf_r_RUSER),
    .m_axi_buf_r_RRESP(buf_r_RRESP),
    .m_axi_buf_r_BVALID(buf_r_BVALID),
    .m_axi_buf_r_BREADY(grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY),
    .m_axi_buf_r_BRESP(buf_r_BRESP),
    .m_axi_buf_r_BID(buf_r_BID),
    .m_axi_buf_r_BUSER(buf_r_BUSER),
    .buf_offset(buf_offset)
);

a0_aes_mixColumns grp_aes_mixColumns_fu_255(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_mixColumns_fu_255_ap_start),
    .ap_done(grp_aes_mixColumns_fu_255_ap_done),
    .ap_idle(grp_aes_mixColumns_fu_255_ap_idle),
    .ap_ready(grp_aes_mixColumns_fu_255_ap_ready),
    .m_axi_buf_r_AWVALID(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID),
    .m_axi_buf_r_AWREADY(buf_r_AWREADY),
    .m_axi_buf_r_AWADDR(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR),
    .m_axi_buf_r_AWID(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID),
    .m_axi_buf_r_AWLEN(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN),
    .m_axi_buf_r_AWSIZE(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE),
    .m_axi_buf_r_AWBURST(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST),
    .m_axi_buf_r_AWLOCK(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK),
    .m_axi_buf_r_AWCACHE(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE),
    .m_axi_buf_r_AWPROT(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT),
    .m_axi_buf_r_AWQOS(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS),
    .m_axi_buf_r_AWREGION(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION),
    .m_axi_buf_r_AWUSER(grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER),
    .m_axi_buf_r_WVALID(grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID),
    .m_axi_buf_r_WREADY(buf_r_WREADY),
    .m_axi_buf_r_WDATA(grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA),
    .m_axi_buf_r_WSTRB(grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB),
    .m_axi_buf_r_WLAST(grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST),
    .m_axi_buf_r_WID(grp_aes_mixColumns_fu_255_m_axi_buf_r_WID),
    .m_axi_buf_r_WUSER(grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER),
    .m_axi_buf_r_ARVALID(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID),
    .m_axi_buf_r_ARREADY(buf_r_ARREADY),
    .m_axi_buf_r_ARADDR(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR),
    .m_axi_buf_r_ARID(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID),
    .m_axi_buf_r_ARLEN(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN),
    .m_axi_buf_r_ARSIZE(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE),
    .m_axi_buf_r_ARBURST(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST),
    .m_axi_buf_r_ARLOCK(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK),
    .m_axi_buf_r_ARCACHE(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE),
    .m_axi_buf_r_ARPROT(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT),
    .m_axi_buf_r_ARQOS(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS),
    .m_axi_buf_r_ARREGION(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION),
    .m_axi_buf_r_ARUSER(grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER),
    .m_axi_buf_r_RVALID(buf_r_RVALID),
    .m_axi_buf_r_RREADY(grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY),
    .m_axi_buf_r_RDATA(buf_r_RDATA),
    .m_axi_buf_r_RLAST(buf_r_RLAST),
    .m_axi_buf_r_RID(buf_r_RID),
    .m_axi_buf_r_RUSER(buf_r_RUSER),
    .m_axi_buf_r_RRESP(buf_r_RRESP),
    .m_axi_buf_r_BVALID(buf_r_BVALID),
    .m_axi_buf_r_BREADY(grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY),
    .m_axi_buf_r_BRESP(buf_r_BRESP),
    .m_axi_buf_r_BID(buf_r_BID),
    .m_axi_buf_r_BUSER(buf_r_BUSER),
    .buf_offset(buf_offset)
);

a0_aes_addRoundKey_cpy grp_aes_addRoundKey_cpy_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_addRoundKey_cpy_fu_262_ap_start),
    .ap_done(grp_aes_addRoundKey_cpy_fu_262_ap_done),
    .ap_idle(grp_aes_addRoundKey_cpy_fu_262_ap_idle),
    .ap_ready(grp_aes_addRoundKey_cpy_fu_262_ap_ready),
    .m_axi_buf_r_AWVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID),
    .m_axi_buf_r_AWREADY(buf_r_AWREADY),
    .m_axi_buf_r_AWADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR),
    .m_axi_buf_r_AWID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID),
    .m_axi_buf_r_AWLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN),
    .m_axi_buf_r_AWSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE),
    .m_axi_buf_r_AWBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST),
    .m_axi_buf_r_AWLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK),
    .m_axi_buf_r_AWCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE),
    .m_axi_buf_r_AWPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT),
    .m_axi_buf_r_AWQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS),
    .m_axi_buf_r_AWREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION),
    .m_axi_buf_r_AWUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER),
    .m_axi_buf_r_WVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID),
    .m_axi_buf_r_WREADY(buf_r_WREADY),
    .m_axi_buf_r_WDATA(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA),
    .m_axi_buf_r_WSTRB(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB),
    .m_axi_buf_r_WLAST(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST),
    .m_axi_buf_r_WID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID),
    .m_axi_buf_r_WUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER),
    .m_axi_buf_r_ARVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID),
    .m_axi_buf_r_ARREADY(buf_r_ARREADY),
    .m_axi_buf_r_ARADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR),
    .m_axi_buf_r_ARID(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID),
    .m_axi_buf_r_ARLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN),
    .m_axi_buf_r_ARSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE),
    .m_axi_buf_r_ARBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST),
    .m_axi_buf_r_ARLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK),
    .m_axi_buf_r_ARCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE),
    .m_axi_buf_r_ARPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT),
    .m_axi_buf_r_ARQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS),
    .m_axi_buf_r_ARREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION),
    .m_axi_buf_r_ARUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER),
    .m_axi_buf_r_RVALID(buf_r_RVALID),
    .m_axi_buf_r_RREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY),
    .m_axi_buf_r_RDATA(buf_r_RDATA),
    .m_axi_buf_r_RLAST(buf_r_RLAST),
    .m_axi_buf_r_RID(buf_r_RID),
    .m_axi_buf_r_RUSER(buf_r_RUSER),
    .m_axi_buf_r_RRESP(buf_r_RRESP),
    .m_axi_buf_r_BVALID(buf_r_BVALID),
    .m_axi_buf_r_BREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY),
    .m_axi_buf_r_BRESP(buf_r_BRESP),
    .m_axi_buf_r_BID(buf_r_BID),
    .m_axi_buf_r_BUSER(buf_r_BUSER),
    .buf_offset(buf_offset),
    .m_axi_key_AWVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWVALID),
    .m_axi_key_AWREADY(1'b0),
    .m_axi_key_AWADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWADDR),
    .m_axi_key_AWID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWID),
    .m_axi_key_AWLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLEN),
    .m_axi_key_AWSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWSIZE),
    .m_axi_key_AWBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWBURST),
    .m_axi_key_AWLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWLOCK),
    .m_axi_key_AWCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWCACHE),
    .m_axi_key_AWPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWPROT),
    .m_axi_key_AWQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWQOS),
    .m_axi_key_AWREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWREGION),
    .m_axi_key_AWUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_AWUSER),
    .m_axi_key_WVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WVALID),
    .m_axi_key_WREADY(1'b0),
    .m_axi_key_WDATA(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WDATA),
    .m_axi_key_WSTRB(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WSTRB),
    .m_axi_key_WLAST(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WLAST),
    .m_axi_key_WID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WID),
    .m_axi_key_WUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_WUSER),
    .m_axi_key_ARVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID),
    .m_axi_key_ARREADY(ctx_enckey_ARREADY),
    .m_axi_key_ARADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARADDR),
    .m_axi_key_ARID(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARID),
    .m_axi_key_ARLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLEN),
    .m_axi_key_ARSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARSIZE),
    .m_axi_key_ARBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARBURST),
    .m_axi_key_ARLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARLOCK),
    .m_axi_key_ARCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARCACHE),
    .m_axi_key_ARPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARPROT),
    .m_axi_key_ARQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARQOS),
    .m_axi_key_ARREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARREGION),
    .m_axi_key_ARUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARUSER),
    .m_axi_key_RVALID(ctx_enckey_RVALID),
    .m_axi_key_RREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY),
    .m_axi_key_RDATA(ctx_enckey_RDATA),
    .m_axi_key_RLAST(ctx_enckey_RLAST),
    .m_axi_key_RID(ctx_enckey_RID),
    .m_axi_key_RUSER(ctx_enckey_RUSER),
    .m_axi_key_RRESP(ctx_enckey_RRESP),
    .m_axi_key_BVALID(1'b0),
    .m_axi_key_BREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_key_BREADY),
    .m_axi_key_BRESP(2'd0),
    .m_axi_key_BID(1'd0),
    .m_axi_key_BUSER(1'd0),
    .key_offset(ctx_enckey_offset),
    .m_axi_cpk_AWVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID),
    .m_axi_cpk_AWREADY(ctx_key_AWREADY),
    .m_axi_cpk_AWADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR),
    .m_axi_cpk_AWID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID),
    .m_axi_cpk_AWLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN),
    .m_axi_cpk_AWSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE),
    .m_axi_cpk_AWBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST),
    .m_axi_cpk_AWLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK),
    .m_axi_cpk_AWCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE),
    .m_axi_cpk_AWPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT),
    .m_axi_cpk_AWQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS),
    .m_axi_cpk_AWREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION),
    .m_axi_cpk_AWUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER),
    .m_axi_cpk_WVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID),
    .m_axi_cpk_WREADY(ctx_key_WREADY),
    .m_axi_cpk_WDATA(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA),
    .m_axi_cpk_WSTRB(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB),
    .m_axi_cpk_WLAST(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST),
    .m_axi_cpk_WID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID),
    .m_axi_cpk_WUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER),
    .m_axi_cpk_ARVALID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARVALID),
    .m_axi_cpk_ARREADY(1'b0),
    .m_axi_cpk_ARADDR(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARADDR),
    .m_axi_cpk_ARID(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARID),
    .m_axi_cpk_ARLEN(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLEN),
    .m_axi_cpk_ARSIZE(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARSIZE),
    .m_axi_cpk_ARBURST(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARBURST),
    .m_axi_cpk_ARLOCK(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARLOCK),
    .m_axi_cpk_ARCACHE(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARCACHE),
    .m_axi_cpk_ARPROT(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARPROT),
    .m_axi_cpk_ARQOS(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARQOS),
    .m_axi_cpk_ARREGION(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARREGION),
    .m_axi_cpk_ARUSER(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_ARUSER),
    .m_axi_cpk_RVALID(1'b0),
    .m_axi_cpk_RREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_RREADY),
    .m_axi_cpk_RDATA(8'd0),
    .m_axi_cpk_RLAST(1'b0),
    .m_axi_cpk_RID(1'd0),
    .m_axi_cpk_RUSER(1'd0),
    .m_axi_cpk_RRESP(2'd0),
    .m_axi_cpk_BVALID(ctx_key_BVALID),
    .m_axi_cpk_BREADY(grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY),
    .m_axi_cpk_BRESP(ctx_key_BRESP),
    .m_axi_cpk_BID(ctx_key_BID),
    .m_axi_cpk_BUSER(ctx_key_BUSER),
    .cpk_offset(ctx_key_offset)
);

a0_aes_addRoundKey grp_aes_addRoundKey_fu_275(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_addRoundKey_fu_275_ap_start),
    .ap_done(grp_aes_addRoundKey_fu_275_ap_done),
    .ap_idle(grp_aes_addRoundKey_fu_275_ap_idle),
    .ap_ready(grp_aes_addRoundKey_fu_275_ap_ready),
    .m_axi_buf_r_AWVALID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID),
    .m_axi_buf_r_AWREADY(buf_r_AWREADY),
    .m_axi_buf_r_AWADDR(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR),
    .m_axi_buf_r_AWID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID),
    .m_axi_buf_r_AWLEN(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN),
    .m_axi_buf_r_AWSIZE(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE),
    .m_axi_buf_r_AWBURST(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST),
    .m_axi_buf_r_AWLOCK(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK),
    .m_axi_buf_r_AWCACHE(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE),
    .m_axi_buf_r_AWPROT(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT),
    .m_axi_buf_r_AWQOS(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS),
    .m_axi_buf_r_AWREGION(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION),
    .m_axi_buf_r_AWUSER(grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER),
    .m_axi_buf_r_WVALID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID),
    .m_axi_buf_r_WREADY(buf_r_WREADY),
    .m_axi_buf_r_WDATA(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA),
    .m_axi_buf_r_WSTRB(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB),
    .m_axi_buf_r_WLAST(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST),
    .m_axi_buf_r_WID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID),
    .m_axi_buf_r_WUSER(grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER),
    .m_axi_buf_r_ARVALID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID),
    .m_axi_buf_r_ARREADY(buf_r_ARREADY),
    .m_axi_buf_r_ARADDR(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR),
    .m_axi_buf_r_ARID(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID),
    .m_axi_buf_r_ARLEN(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN),
    .m_axi_buf_r_ARSIZE(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE),
    .m_axi_buf_r_ARBURST(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST),
    .m_axi_buf_r_ARLOCK(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK),
    .m_axi_buf_r_ARCACHE(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE),
    .m_axi_buf_r_ARPROT(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT),
    .m_axi_buf_r_ARQOS(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS),
    .m_axi_buf_r_ARREGION(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION),
    .m_axi_buf_r_ARUSER(grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER),
    .m_axi_buf_r_RVALID(buf_r_RVALID),
    .m_axi_buf_r_RREADY(grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY),
    .m_axi_buf_r_RDATA(buf_r_RDATA),
    .m_axi_buf_r_RLAST(buf_r_RLAST),
    .m_axi_buf_r_RID(buf_r_RID),
    .m_axi_buf_r_RUSER(buf_r_RUSER),
    .m_axi_buf_r_RRESP(buf_r_RRESP),
    .m_axi_buf_r_BVALID(buf_r_BVALID),
    .m_axi_buf_r_BREADY(grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY),
    .m_axi_buf_r_BRESP(buf_r_BRESP),
    .m_axi_buf_r_BID(buf_r_BID),
    .m_axi_buf_r_BUSER(buf_r_BUSER),
    .buf_offset(buf_offset),
    .m_axi_key_AWVALID(grp_aes_addRoundKey_fu_275_m_axi_key_AWVALID),
    .m_axi_key_AWREADY(1'b0),
    .m_axi_key_AWADDR(grp_aes_addRoundKey_fu_275_m_axi_key_AWADDR),
    .m_axi_key_AWID(grp_aes_addRoundKey_fu_275_m_axi_key_AWID),
    .m_axi_key_AWLEN(grp_aes_addRoundKey_fu_275_m_axi_key_AWLEN),
    .m_axi_key_AWSIZE(grp_aes_addRoundKey_fu_275_m_axi_key_AWSIZE),
    .m_axi_key_AWBURST(grp_aes_addRoundKey_fu_275_m_axi_key_AWBURST),
    .m_axi_key_AWLOCK(grp_aes_addRoundKey_fu_275_m_axi_key_AWLOCK),
    .m_axi_key_AWCACHE(grp_aes_addRoundKey_fu_275_m_axi_key_AWCACHE),
    .m_axi_key_AWPROT(grp_aes_addRoundKey_fu_275_m_axi_key_AWPROT),
    .m_axi_key_AWQOS(grp_aes_addRoundKey_fu_275_m_axi_key_AWQOS),
    .m_axi_key_AWREGION(grp_aes_addRoundKey_fu_275_m_axi_key_AWREGION),
    .m_axi_key_AWUSER(grp_aes_addRoundKey_fu_275_m_axi_key_AWUSER),
    .m_axi_key_WVALID(grp_aes_addRoundKey_fu_275_m_axi_key_WVALID),
    .m_axi_key_WREADY(1'b0),
    .m_axi_key_WDATA(grp_aes_addRoundKey_fu_275_m_axi_key_WDATA),
    .m_axi_key_WSTRB(grp_aes_addRoundKey_fu_275_m_axi_key_WSTRB),
    .m_axi_key_WLAST(grp_aes_addRoundKey_fu_275_m_axi_key_WLAST),
    .m_axi_key_WID(grp_aes_addRoundKey_fu_275_m_axi_key_WID),
    .m_axi_key_WUSER(grp_aes_addRoundKey_fu_275_m_axi_key_WUSER),
    .m_axi_key_ARVALID(grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID),
    .m_axi_key_ARREADY(ctx_key_ARREADY),
    .m_axi_key_ARADDR(grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR),
    .m_axi_key_ARID(grp_aes_addRoundKey_fu_275_m_axi_key_ARID),
    .m_axi_key_ARLEN(grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN),
    .m_axi_key_ARSIZE(grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE),
    .m_axi_key_ARBURST(grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST),
    .m_axi_key_ARLOCK(grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK),
    .m_axi_key_ARCACHE(grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE),
    .m_axi_key_ARPROT(grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT),
    .m_axi_key_ARQOS(grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS),
    .m_axi_key_ARREGION(grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION),
    .m_axi_key_ARUSER(grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER),
    .m_axi_key_RVALID(ctx_key_RVALID),
    .m_axi_key_RREADY(grp_aes_addRoundKey_fu_275_m_axi_key_RREADY),
    .m_axi_key_RDATA(ctx_key_RDATA),
    .m_axi_key_RLAST(ctx_key_RLAST),
    .m_axi_key_RID(ctx_key_RID),
    .m_axi_key_RUSER(ctx_key_RUSER),
    .m_axi_key_RRESP(ctx_key_RRESP),
    .m_axi_key_BVALID(1'b0),
    .m_axi_key_BREADY(grp_aes_addRoundKey_fu_275_m_axi_key_BREADY),
    .m_axi_key_BRESP(2'd0),
    .m_axi_key_BID(1'd0),
    .m_axi_key_BUSER(1'd0),
    .key_offset(ctx_key_offset),
    .key_offset_offset(grp_aes_addRoundKey_fu_275_key_offset_offset)
);

a0_aes_subBytes grp_aes_subBytes_fu_288(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes_subBytes_fu_288_ap_start),
    .ap_done(grp_aes_subBytes_fu_288_ap_done),
    .ap_idle(grp_aes_subBytes_fu_288_ap_idle),
    .ap_ready(grp_aes_subBytes_fu_288_ap_ready),
    .m_axi_buf_r_AWVALID(grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID),
    .m_axi_buf_r_AWREADY(buf_r_AWREADY),
    .m_axi_buf_r_AWADDR(grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR),
    .m_axi_buf_r_AWID(grp_aes_subBytes_fu_288_m_axi_buf_r_AWID),
    .m_axi_buf_r_AWLEN(grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN),
    .m_axi_buf_r_AWSIZE(grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE),
    .m_axi_buf_r_AWBURST(grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST),
    .m_axi_buf_r_AWLOCK(grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK),
    .m_axi_buf_r_AWCACHE(grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE),
    .m_axi_buf_r_AWPROT(grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT),
    .m_axi_buf_r_AWQOS(grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS),
    .m_axi_buf_r_AWREGION(grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION),
    .m_axi_buf_r_AWUSER(grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER),
    .m_axi_buf_r_WVALID(grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID),
    .m_axi_buf_r_WREADY(buf_r_WREADY),
    .m_axi_buf_r_WDATA(grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA),
    .m_axi_buf_r_WSTRB(grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB),
    .m_axi_buf_r_WLAST(grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST),
    .m_axi_buf_r_WID(grp_aes_subBytes_fu_288_m_axi_buf_r_WID),
    .m_axi_buf_r_WUSER(grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER),
    .m_axi_buf_r_ARVALID(grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID),
    .m_axi_buf_r_ARREADY(buf_r_ARREADY),
    .m_axi_buf_r_ARADDR(grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR),
    .m_axi_buf_r_ARID(grp_aes_subBytes_fu_288_m_axi_buf_r_ARID),
    .m_axi_buf_r_ARLEN(grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN),
    .m_axi_buf_r_ARSIZE(grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE),
    .m_axi_buf_r_ARBURST(grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST),
    .m_axi_buf_r_ARLOCK(grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK),
    .m_axi_buf_r_ARCACHE(grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE),
    .m_axi_buf_r_ARPROT(grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT),
    .m_axi_buf_r_ARQOS(grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS),
    .m_axi_buf_r_ARREGION(grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION),
    .m_axi_buf_r_ARUSER(grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER),
    .m_axi_buf_r_RVALID(buf_r_RVALID),
    .m_axi_buf_r_RREADY(grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY),
    .m_axi_buf_r_RDATA(buf_r_RDATA),
    .m_axi_buf_r_RLAST(buf_r_RLAST),
    .m_axi_buf_r_RID(buf_r_RID),
    .m_axi_buf_r_RUSER(buf_r_RUSER),
    .m_axi_buf_r_RRESP(buf_r_RRESP),
    .m_axi_buf_r_BVALID(buf_r_BVALID),
    .m_axi_buf_r_BREADY(grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY),
    .m_axi_buf_r_BRESP(buf_r_BRESP),
    .m_axi_buf_r_BID(buf_r_BID),
    .m_axi_buf_r_BUSER(buf_r_BUSER),
    .buf_offset(buf_offset)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2))) begin
            ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_addRoundKey_cpy_fu_262_ap_ready)) begin
            ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26))) begin
            ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_addRoundKey_fu_275_ap_ready)) begin
            ap_reg_grp_aes_addRoundKey_fu_275_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state17) & (grp_aes_mixColumns_fu_255_ap_done == 1'b1) & (tmp_1_fu_360_p1 == 1'd0)) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)))) begin
            ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_expandEncKey_fu_236_ap_ready)) begin
            ap_reg_grp_aes_expandEncKey_fu_236_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_mixColumns_fu_255_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_reg_grp_aes_mixColumns_fu_255_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_mixColumns_fu_255_ap_ready)) begin
            ap_reg_grp_aes_mixColumns_fu_255_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_shiftRows_fu_248_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24))) begin
            ap_reg_grp_aes_shiftRows_fu_248_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_shiftRows_fu_248_ap_ready)) begin
            ap_reg_grp_aes_shiftRows_fu_248_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes_subBytes_fu_288_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)))) begin
            ap_reg_grp_aes_subBytes_fu_288_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes_subBytes_fu_288_ap_ready)) begin
            ap_reg_grp_aes_subBytes_fu_288_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ctx_deckey_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io))) begin
                ap_reg_ioackin_ctx_deckey_AWREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == ctx_deckey_AWREADY))) begin
                ap_reg_ioackin_ctx_deckey_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ctx_deckey_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_block_state4_io == 1'b0)) begin
                ap_reg_ioackin_ctx_deckey_WREADY <= 1'b0;
            end else if ((1'b1 == ctx_deckey_WREADY)) begin
                ap_reg_ioackin_ctx_deckey_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ctx_enckey_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if (~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io))) begin
                ap_reg_ioackin_ctx_enckey_AWREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == ctx_enckey_AWREADY))) begin
                ap_reg_ioackin_ctx_enckey_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_ctx_enckey_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_block_state4_io == 1'b0)) begin
                ap_reg_ioackin_ctx_enckey_WREADY <= 1'b0;
            end else if ((1'b1 == ctx_enckey_WREADY)) begin
                ap_reg_ioackin_ctx_enckey_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID)))) begin
        i_1_reg_213 <= 3'd7;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_aes_expandEncKey_fu_236_ap_done == 1'b1))) begin
        i_1_reg_213 <= phitmp_reg_435;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_on_subcall_done == 1'b0))) begin
        i_2_reg_224 <= i_4_fu_369_p2;
    end else if (((1'b1 == ap_CS_fsm_state11) & (grp_aes_addRoundKey_cpy_fu_262_ap_done == 1'b1))) begin
        i_2_reg_224 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        i_reg_190 <= i_3_reg_416;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)))) begin
        i_reg_190 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_aes_expandEncKey_fu_236_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        rcon_1_fu_118 <= grp_aes_expandEncKey_fu_236_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2))) begin
        rcon_1_fu_118 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID)))) begin
        rcon_reg_201 <= 8'd1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (grp_aes_expandEncKey_fu_236_ap_done == 1'b1))) begin
        rcon_reg_201 <= grp_aes_expandEncKey_fu_236_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_416 <= i_3_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_load_reg_426 <= k_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2))) begin
        phitmp_reg_435 <= phitmp_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state17) & (grp_aes_mixColumns_fu_255_ap_done == 1'b1) & (tmp_1_fu_360_p1 == 1'd0)))) begin
        reg_301 <= rcon_1_fu_118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (grp_aes_mixColumns_fu_255_ap_done == 1'b1))) begin
        tmp_1_reg_455 <= tmp_1_fu_360_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (grp_aes_addRoundKey_fu_275_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) & (grp_aes_addRoundKey_fu_275_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ctx_deckey_AWREADY)) begin
        ap_sig_ioackin_ctx_deckey_AWREADY = ctx_deckey_AWREADY;
    end else begin
        ap_sig_ioackin_ctx_deckey_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ctx_deckey_WREADY)) begin
        ap_sig_ioackin_ctx_deckey_WREADY = ctx_deckey_WREADY;
    end else begin
        ap_sig_ioackin_ctx_deckey_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ctx_enckey_AWREADY)) begin
        ap_sig_ioackin_ctx_enckey_AWREADY = ctx_enckey_AWREADY;
    end else begin
        ap_sig_ioackin_ctx_enckey_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_ctx_enckey_WREADY)) begin
        ap_sig_ioackin_ctx_enckey_WREADY = ctx_enckey_WREADY;
    end else begin
        ap_sig_ioackin_ctx_enckey_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARADDR = grp_aes_subBytes_fu_288_m_axi_buf_r_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARADDR = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARADDR = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARADDR = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARADDR = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARADDR;
    end else begin
        buf_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARBURST = grp_aes_subBytes_fu_288_m_axi_buf_r_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARBURST = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARBURST = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARBURST = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARBURST = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARBURST;
    end else begin
        buf_r_ARBURST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARCACHE = grp_aes_subBytes_fu_288_m_axi_buf_r_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARCACHE = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARCACHE = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARCACHE = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARCACHE = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARCACHE;
    end else begin
        buf_r_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARID = grp_aes_subBytes_fu_288_m_axi_buf_r_ARID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARID = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARID = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARID;
    end else begin
        buf_r_ARID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARLEN = grp_aes_subBytes_fu_288_m_axi_buf_r_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARLEN = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARLEN = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARLEN = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARLEN = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLEN;
    end else begin
        buf_r_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARLOCK = grp_aes_subBytes_fu_288_m_axi_buf_r_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARLOCK = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARLOCK = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARLOCK = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARLOCK = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARLOCK;
    end else begin
        buf_r_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARPROT = grp_aes_subBytes_fu_288_m_axi_buf_r_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARPROT = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARPROT = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARPROT = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARPROT = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARPROT;
    end else begin
        buf_r_ARPROT = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARQOS = grp_aes_subBytes_fu_288_m_axi_buf_r_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARQOS = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARQOS = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARQOS = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARQOS = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARQOS;
    end else begin
        buf_r_ARQOS = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARREGION = grp_aes_subBytes_fu_288_m_axi_buf_r_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARREGION = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARREGION = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARREGION = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARREGION = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARREGION;
    end else begin
        buf_r_ARREGION = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARSIZE = grp_aes_subBytes_fu_288_m_axi_buf_r_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARSIZE = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARSIZE = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARSIZE = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARSIZE = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARSIZE;
    end else begin
        buf_r_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARUSER = grp_aes_subBytes_fu_288_m_axi_buf_r_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARUSER = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARUSER = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARUSER = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARUSER = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARUSER;
    end else begin
        buf_r_ARUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_ARVALID = grp_aes_subBytes_fu_288_m_axi_buf_r_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_ARVALID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_ARVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_ARVALID = grp_aes_mixColumns_fu_255_m_axi_buf_r_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_ARVALID = grp_aes_shiftRows_fu_248_m_axi_buf_r_ARVALID;
    end else begin
        buf_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWADDR = grp_aes_subBytes_fu_288_m_axi_buf_r_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWADDR = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWADDR = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWADDR = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWADDR;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWADDR = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWADDR;
    end else begin
        buf_r_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWBURST = grp_aes_subBytes_fu_288_m_axi_buf_r_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWBURST = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWBURST = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWBURST = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWBURST;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWBURST = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWBURST;
    end else begin
        buf_r_AWBURST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWCACHE = grp_aes_subBytes_fu_288_m_axi_buf_r_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWCACHE = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWCACHE = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWCACHE = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWCACHE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWCACHE = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWCACHE;
    end else begin
        buf_r_AWCACHE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWID = grp_aes_subBytes_fu_288_m_axi_buf_r_AWID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWID = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWID = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWID;
    end else begin
        buf_r_AWID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWLEN = grp_aes_subBytes_fu_288_m_axi_buf_r_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWLEN = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWLEN = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWLEN = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLEN;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWLEN = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLEN;
    end else begin
        buf_r_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWLOCK = grp_aes_subBytes_fu_288_m_axi_buf_r_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWLOCK = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWLOCK = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWLOCK = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWLOCK;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWLOCK = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWLOCK;
    end else begin
        buf_r_AWLOCK = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWPROT = grp_aes_subBytes_fu_288_m_axi_buf_r_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWPROT = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWPROT = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWPROT = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWPROT;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWPROT = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWPROT;
    end else begin
        buf_r_AWPROT = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWQOS = grp_aes_subBytes_fu_288_m_axi_buf_r_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWQOS = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWQOS = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWQOS = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWQOS;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWQOS = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWQOS;
    end else begin
        buf_r_AWQOS = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWREGION = grp_aes_subBytes_fu_288_m_axi_buf_r_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWREGION = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWREGION = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWREGION = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWREGION;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWREGION = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWREGION;
    end else begin
        buf_r_AWREGION = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWSIZE = grp_aes_subBytes_fu_288_m_axi_buf_r_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWSIZE = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWSIZE = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWSIZE = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWSIZE;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWSIZE = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWSIZE;
    end else begin
        buf_r_AWSIZE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWUSER = grp_aes_subBytes_fu_288_m_axi_buf_r_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWUSER = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWUSER = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWUSER = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWUSER;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWUSER = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWUSER;
    end else begin
        buf_r_AWUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_AWVALID = grp_aes_subBytes_fu_288_m_axi_buf_r_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_AWVALID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_AWVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_AWVALID = grp_aes_mixColumns_fu_255_m_axi_buf_r_AWVALID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_AWVALID = grp_aes_shiftRows_fu_248_m_axi_buf_r_AWVALID;
    end else begin
        buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_BREADY = grp_aes_subBytes_fu_288_m_axi_buf_r_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_BREADY = grp_aes_addRoundKey_fu_275_m_axi_buf_r_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_BREADY = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_BREADY = grp_aes_mixColumns_fu_255_m_axi_buf_r_BREADY;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_BREADY = grp_aes_shiftRows_fu_248_m_axi_buf_r_BREADY;
    end else begin
        buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_RREADY = grp_aes_subBytes_fu_288_m_axi_buf_r_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_RREADY = grp_aes_addRoundKey_fu_275_m_axi_buf_r_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_RREADY = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_RREADY = grp_aes_mixColumns_fu_255_m_axi_buf_r_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_RREADY = grp_aes_shiftRows_fu_248_m_axi_buf_r_RREADY;
    end else begin
        buf_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WDATA = grp_aes_subBytes_fu_288_m_axi_buf_r_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WDATA = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WDATA = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WDATA = grp_aes_mixColumns_fu_255_m_axi_buf_r_WDATA;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WDATA = grp_aes_shiftRows_fu_248_m_axi_buf_r_WDATA;
    end else begin
        buf_r_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WID = grp_aes_subBytes_fu_288_m_axi_buf_r_WID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WID = grp_aes_mixColumns_fu_255_m_axi_buf_r_WID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WID = grp_aes_shiftRows_fu_248_m_axi_buf_r_WID;
    end else begin
        buf_r_WID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WLAST = grp_aes_subBytes_fu_288_m_axi_buf_r_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WLAST = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WLAST = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WLAST = grp_aes_mixColumns_fu_255_m_axi_buf_r_WLAST;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WLAST = grp_aes_shiftRows_fu_248_m_axi_buf_r_WLAST;
    end else begin
        buf_r_WLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WSTRB = grp_aes_subBytes_fu_288_m_axi_buf_r_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WSTRB = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WSTRB = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WSTRB = grp_aes_mixColumns_fu_255_m_axi_buf_r_WSTRB;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WSTRB = grp_aes_shiftRows_fu_248_m_axi_buf_r_WSTRB;
    end else begin
        buf_r_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WUSER = grp_aes_subBytes_fu_288_m_axi_buf_r_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WUSER = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WUSER = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WUSER = grp_aes_mixColumns_fu_255_m_axi_buf_r_WUSER;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WUSER = grp_aes_shiftRows_fu_248_m_axi_buf_r_WUSER;
    end else begin
        buf_r_WUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state13))) begin
        buf_r_WVALID = grp_aes_subBytes_fu_288_m_axi_buf_r_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        buf_r_WVALID = grp_aes_addRoundKey_fu_275_m_axi_buf_r_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        buf_r_WVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_buf_r_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        buf_r_WVALID = grp_aes_mixColumns_fu_255_m_axi_buf_r_WVALID;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state25))) begin
        buf_r_WVALID = grp_aes_shiftRows_fu_248_m_axi_buf_r_WVALID;
    end else begin
        buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_ARVALID = grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID;
    end else begin
        ctx_deckey_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_ctx_deckey_AWREADY))) begin
        ctx_deckey_AWADDR = ctx_deckey_offset;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWADDR = grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR;
    end else begin
        ctx_deckey_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWBURST = grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST;
    end else begin
        ctx_deckey_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWCACHE = grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE;
    end else begin
        ctx_deckey_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWID = grp_aes_expandEncKey_fu_236_m_axi_k_AWID;
    end else begin
        ctx_deckey_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_ctx_deckey_AWREADY))) begin
        ctx_deckey_AWLEN = 32'd32;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWLEN = grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN;
    end else begin
        ctx_deckey_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWLOCK = grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK;
    end else begin
        ctx_deckey_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWPROT = grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT;
    end else begin
        ctx_deckey_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWQOS = grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS;
    end else begin
        ctx_deckey_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWREGION = grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION;
    end else begin
        ctx_deckey_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWSIZE = grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE;
    end else begin
        ctx_deckey_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWUSER = grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER;
    end else begin
        ctx_deckey_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_ctx_deckey_AWREADY))) begin
        ctx_deckey_AWVALID = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_AWVALID = grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID;
    end else begin
        ctx_deckey_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID)))) begin
        ctx_deckey_BREADY = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_BREADY = grp_aes_expandEncKey_fu_236_m_axi_k_BREADY;
    end else begin
        ctx_deckey_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_RREADY = grp_aes_expandEncKey_fu_236_m_axi_k_RREADY;
    end else begin
        ctx_deckey_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_ctx_deckey_WREADY))) begin
        ctx_deckey_WDATA = k_load_reg_426;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WDATA = grp_aes_expandEncKey_fu_236_m_axi_k_WDATA;
    end else begin
        ctx_deckey_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WID = grp_aes_expandEncKey_fu_236_m_axi_k_WID;
    end else begin
        ctx_deckey_WID = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WLAST = grp_aes_expandEncKey_fu_236_m_axi_k_WLAST;
    end else begin
        ctx_deckey_WLAST = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_ctx_deckey_WREADY))) begin
        ctx_deckey_WSTRB = 1'd1;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WSTRB = grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB;
    end else begin
        ctx_deckey_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WUSER = grp_aes_expandEncKey_fu_236_m_axi_k_WUSER;
    end else begin
        ctx_deckey_WUSER = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_ctx_deckey_WREADY))) begin
        ctx_deckey_WVALID = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        ctx_deckey_WVALID = grp_aes_expandEncKey_fu_236_m_axi_k_WVALID;
    end else begin
        ctx_deckey_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_deckey_blk_n_AW = m_axi_ctx_deckey_AWREADY;
    end else begin
        ctx_deckey_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_deckey_blk_n_B = m_axi_ctx_deckey_BVALID;
    end else begin
        ctx_deckey_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_deckey_blk_n_W = m_axi_ctx_deckey_WREADY;
    end else begin
        ctx_deckey_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_enckey_ARVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_key_ARVALID;
    end else begin
        ctx_enckey_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (1'b0 == ap_reg_ioackin_ctx_enckey_AWREADY))) begin
        ctx_enckey_AWVALID = 1'b1;
    end else begin
        ctx_enckey_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID)))) begin
        ctx_enckey_BREADY = 1'b1;
    end else begin
        ctx_enckey_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_enckey_RREADY = grp_aes_addRoundKey_cpy_fu_262_m_axi_key_RREADY;
    end else begin
        ctx_enckey_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_ctx_enckey_WREADY))) begin
        ctx_enckey_WVALID = 1'b1;
    end else begin
        ctx_enckey_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ctx_enckey_blk_n_AW = m_axi_ctx_enckey_AWREADY;
    end else begin
        ctx_enckey_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ctx_enckey_blk_n_B = m_axi_ctx_enckey_BVALID;
    end else begin
        ctx_enckey_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ctx_enckey_blk_n_W = m_axi_ctx_enckey_WREADY;
    end else begin
        ctx_enckey_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARADDR = grp_aes_addRoundKey_fu_275_m_axi_key_ARADDR;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARADDR = grp_aes_expandEncKey_fu_236_m_axi_k_ARADDR;
    end else begin
        ctx_key_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARBURST = grp_aes_addRoundKey_fu_275_m_axi_key_ARBURST;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARBURST = grp_aes_expandEncKey_fu_236_m_axi_k_ARBURST;
    end else begin
        ctx_key_ARBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARCACHE = grp_aes_addRoundKey_fu_275_m_axi_key_ARCACHE;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARCACHE = grp_aes_expandEncKey_fu_236_m_axi_k_ARCACHE;
    end else begin
        ctx_key_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARID = grp_aes_addRoundKey_fu_275_m_axi_key_ARID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARID = grp_aes_expandEncKey_fu_236_m_axi_k_ARID;
    end else begin
        ctx_key_ARID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARLEN = grp_aes_addRoundKey_fu_275_m_axi_key_ARLEN;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARLEN = grp_aes_expandEncKey_fu_236_m_axi_k_ARLEN;
    end else begin
        ctx_key_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARLOCK = grp_aes_addRoundKey_fu_275_m_axi_key_ARLOCK;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARLOCK = grp_aes_expandEncKey_fu_236_m_axi_k_ARLOCK;
    end else begin
        ctx_key_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARPROT = grp_aes_addRoundKey_fu_275_m_axi_key_ARPROT;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARPROT = grp_aes_expandEncKey_fu_236_m_axi_k_ARPROT;
    end else begin
        ctx_key_ARPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARQOS = grp_aes_addRoundKey_fu_275_m_axi_key_ARQOS;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARQOS = grp_aes_expandEncKey_fu_236_m_axi_k_ARQOS;
    end else begin
        ctx_key_ARQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARREGION = grp_aes_addRoundKey_fu_275_m_axi_key_ARREGION;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARREGION = grp_aes_expandEncKey_fu_236_m_axi_k_ARREGION;
    end else begin
        ctx_key_ARREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARSIZE = grp_aes_addRoundKey_fu_275_m_axi_key_ARSIZE;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARSIZE = grp_aes_expandEncKey_fu_236_m_axi_k_ARSIZE;
    end else begin
        ctx_key_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARUSER = grp_aes_addRoundKey_fu_275_m_axi_key_ARUSER;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARUSER = grp_aes_expandEncKey_fu_236_m_axi_k_ARUSER;
    end else begin
        ctx_key_ARUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_ARVALID = grp_aes_addRoundKey_fu_275_m_axi_key_ARVALID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_ARVALID = grp_aes_expandEncKey_fu_236_m_axi_k_ARVALID;
    end else begin
        ctx_key_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWADDR = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWADDR;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWADDR = grp_aes_expandEncKey_fu_236_m_axi_k_AWADDR;
    end else begin
        ctx_key_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWBURST = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWBURST;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWBURST = grp_aes_expandEncKey_fu_236_m_axi_k_AWBURST;
    end else begin
        ctx_key_AWBURST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWCACHE = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWCACHE;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWCACHE = grp_aes_expandEncKey_fu_236_m_axi_k_AWCACHE;
    end else begin
        ctx_key_AWCACHE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWID = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWID = grp_aes_expandEncKey_fu_236_m_axi_k_AWID;
    end else begin
        ctx_key_AWID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWLEN = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLEN;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWLEN = grp_aes_expandEncKey_fu_236_m_axi_k_AWLEN;
    end else begin
        ctx_key_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWLOCK = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWLOCK;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWLOCK = grp_aes_expandEncKey_fu_236_m_axi_k_AWLOCK;
    end else begin
        ctx_key_AWLOCK = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWPROT = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWPROT;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWPROT = grp_aes_expandEncKey_fu_236_m_axi_k_AWPROT;
    end else begin
        ctx_key_AWPROT = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWQOS = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWQOS;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWQOS = grp_aes_expandEncKey_fu_236_m_axi_k_AWQOS;
    end else begin
        ctx_key_AWQOS = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWREGION = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWREGION;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWREGION = grp_aes_expandEncKey_fu_236_m_axi_k_AWREGION;
    end else begin
        ctx_key_AWREGION = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWSIZE = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWSIZE;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWSIZE = grp_aes_expandEncKey_fu_236_m_axi_k_AWSIZE;
    end else begin
        ctx_key_AWSIZE = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWUSER = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWUSER;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWUSER = grp_aes_expandEncKey_fu_236_m_axi_k_AWUSER;
    end else begin
        ctx_key_AWUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_AWVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_AWVALID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_AWVALID = grp_aes_expandEncKey_fu_236_m_axi_k_AWVALID;
    end else begin
        ctx_key_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_BREADY = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_BREADY;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_BREADY = grp_aes_expandEncKey_fu_236_m_axi_k_BREADY;
    end else begin
        ctx_key_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state27))) begin
        ctx_key_RREADY = grp_aes_addRoundKey_fu_275_m_axi_key_RREADY;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_RREADY = grp_aes_expandEncKey_fu_236_m_axi_k_RREADY;
    end else begin
        ctx_key_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WDATA = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WDATA;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WDATA = grp_aes_expandEncKey_fu_236_m_axi_k_WDATA;
    end else begin
        ctx_key_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WID = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WID = grp_aes_expandEncKey_fu_236_m_axi_k_WID;
    end else begin
        ctx_key_WID = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WLAST = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WLAST;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WLAST = grp_aes_expandEncKey_fu_236_m_axi_k_WLAST;
    end else begin
        ctx_key_WLAST = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WSTRB = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WSTRB;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WSTRB = grp_aes_expandEncKey_fu_236_m_axi_k_WSTRB;
    end else begin
        ctx_key_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WUSER = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WUSER;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WUSER = grp_aes_expandEncKey_fu_236_m_axi_k_WUSER;
    end else begin
        ctx_key_WUSER = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2)))) begin
        ctx_key_WVALID = grp_aes_addRoundKey_cpy_fu_262_m_axi_cpk_WVALID;
    end else if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        ctx_key_WVALID = grp_aes_expandEncKey_fu_236_m_axi_k_WVALID;
    end else begin
        ctx_key_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_aes_addRoundKey_fu_275_key_offset_offset = 6'd16;
    end else if ((((1'b1 == ap_CS_fsm_state20) & (1'd0 == tmp_1_reg_455)) | (1'b1 == ap_CS_fsm_state27))) begin
        grp_aes_addRoundKey_fu_275_key_offset_offset = 6'd0;
    end else begin
        grp_aes_addRoundKey_fu_275_key_offset_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_k_offset = ctx_key_offset;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_aes_expandEncKey_fu_236_k_offset = ctx_deckey_offset;
    end else begin
        grp_aes_expandEncKey_fu_236_k_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY = ctx_key_ARREADY;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY = ctx_deckey_ARREADY;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_ARREADY = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY = ctx_key_AWREADY;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY = ctx_deckey_AWREADY;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_AWREADY = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BID = ctx_key_BID;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BID = ctx_deckey_BID;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BRESP = ctx_key_BRESP;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BRESP = ctx_deckey_BRESP;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BRESP = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BUSER = ctx_key_BUSER;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BUSER = ctx_deckey_BUSER;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BVALID = ctx_key_BVALID;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BVALID = ctx_deckey_BVALID;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_BVALID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RDATA = ctx_key_RDATA;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RDATA = ctx_deckey_RDATA;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RID = ctx_key_RID;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RID = ctx_deckey_RID;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RLAST = ctx_key_RLAST;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RLAST = ctx_deckey_RLAST;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RRESP = ctx_key_RRESP;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RRESP = ctx_deckey_RRESP;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RRESP = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RUSER = ctx_key_RUSER;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RUSER = ctx_deckey_RUSER;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RVALID = ctx_key_RVALID;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RVALID = ctx_deckey_RVALID;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_RVALID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_state17) & (tmp_1_fu_360_p1 == 1'd0)) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_WREADY = ctx_key_WREADY;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_7_fu_337_p2)) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_aes_expandEncKey_fu_236_m_axi_k_WREADY = ctx_deckey_WREADY;
    end else begin
        grp_aes_expandEncKey_fu_236_m_axi_k_WREADY = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_aes_expandEncKey_fu_236_rc_read = reg_301;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_aes_expandEncKey_fu_236_rc_read = rcon_reg_201;
    end else begin
        grp_aes_expandEncKey_fu_236_rc_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_EN_A = 1'b1;
    end else begin
        k_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b1 == ap_block_state1_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_320_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & ~((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_7_fu_337_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_aes_expandEncKey_fu_236_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_aes_addRoundKey_cpy_fu_262_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_aes_subBytes_fu_288_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_aes_shiftRows_fu_248_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (grp_aes_mixColumns_fu_255_ap_done == 1'b1) & (1'd1 == tmp_1_fu_360_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else if (((1'b1 == ap_CS_fsm_state17) & (grp_aes_mixColumns_fu_255_ap_done == 1'b1) & (tmp_1_fu_360_p1 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((grp_aes_expandEncKey_fu_236_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (ap_block_state20_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (grp_aes_addRoundKey_fu_275_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (ap_block_state23_on_subcall_done == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (grp_aes_shiftRows_fu_248_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (grp_aes_addRoundKey_fu_275_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1_io = ((1'b0 == ap_sig_ioackin_ctx_deckey_AWREADY) | (1'b0 == ap_sig_ioackin_ctx_enckey_AWREADY));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((1'b0 == grp_aes_addRoundKey_fu_275_ap_done) & (1'd0 == tmp_1_reg_455));
end

always @ (*) begin
    ap_block_state23_on_subcall_done = ((1'b0 == grp_aes_expandEncKey_fu_236_ap_done) | (1'b0 == grp_aes_subBytes_fu_288_ap_done));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == ap_sig_ioackin_ctx_deckey_WREADY) | (1'b0 == ap_sig_ioackin_ctx_enckey_WREADY));
end

always @ (*) begin
    ap_block_state8 = ((1'b0 == ctx_enckey_BVALID) | (1'b0 == ctx_deckey_BVALID));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_354_p2 = ((i_2_reg_224 == 4'd14) ? 1'b1 : 1'b0);

assign grp_aes_addRoundKey_cpy_fu_262_ap_start = ap_reg_grp_aes_addRoundKey_cpy_fu_262_ap_start;

assign grp_aes_addRoundKey_fu_275_ap_start = ap_reg_grp_aes_addRoundKey_fu_275_ap_start;

assign grp_aes_expandEncKey_fu_236_ap_start = ap_reg_grp_aes_expandEncKey_fu_236_ap_start;

assign grp_aes_mixColumns_fu_255_ap_start = ap_reg_grp_aes_mixColumns_fu_255_ap_start;

assign grp_aes_shiftRows_fu_248_ap_start = ap_reg_grp_aes_shiftRows_fu_248_ap_start;

assign grp_aes_subBytes_fu_288_ap_start = ap_reg_grp_aes_subBytes_fu_288_ap_start;

assign i_3_fu_326_p2 = (i_reg_190 + 6'd1);

assign i_4_fu_369_p2 = (i_2_reg_224 + 4'd1);

assign k_Addr_A = tmp_5_fu_332_p1 << 32'd0;

assign k_Clk_A = ap_clk;

assign k_Din_A = 8'd0;

always @ (*) begin
    k_Rst_A = ~ap_rst_n;
end

assign k_WEN_A = 1'd0;

assign phitmp_fu_343_p2 = ($signed(i_1_reg_213) + $signed(3'd7));

assign tmp_1_fu_360_p1 = i_2_reg_224[0:0];

assign tmp_5_fu_332_p1 = i_reg_190;

assign tmp_7_fu_337_p2 = ((i_1_reg_213 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_fu_320_p2 = ((i_reg_190 == 6'd32) ? 1'b1 : 1'b0);

endmodule //a0_encrypt
