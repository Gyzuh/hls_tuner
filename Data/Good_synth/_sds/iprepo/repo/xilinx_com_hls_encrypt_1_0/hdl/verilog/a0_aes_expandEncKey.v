// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_aes_expandEncKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_k_AWVALID,
        m_axi_k_AWREADY,
        m_axi_k_AWADDR,
        m_axi_k_AWID,
        m_axi_k_AWLEN,
        m_axi_k_AWSIZE,
        m_axi_k_AWBURST,
        m_axi_k_AWLOCK,
        m_axi_k_AWCACHE,
        m_axi_k_AWPROT,
        m_axi_k_AWQOS,
        m_axi_k_AWREGION,
        m_axi_k_AWUSER,
        m_axi_k_WVALID,
        m_axi_k_WREADY,
        m_axi_k_WDATA,
        m_axi_k_WSTRB,
        m_axi_k_WLAST,
        m_axi_k_WID,
        m_axi_k_WUSER,
        m_axi_k_ARVALID,
        m_axi_k_ARREADY,
        m_axi_k_ARADDR,
        m_axi_k_ARID,
        m_axi_k_ARLEN,
        m_axi_k_ARSIZE,
        m_axi_k_ARBURST,
        m_axi_k_ARLOCK,
        m_axi_k_ARCACHE,
        m_axi_k_ARPROT,
        m_axi_k_ARQOS,
        m_axi_k_ARREGION,
        m_axi_k_ARUSER,
        m_axi_k_RVALID,
        m_axi_k_RREADY,
        m_axi_k_RDATA,
        m_axi_k_RLAST,
        m_axi_k_RID,
        m_axi_k_RUSER,
        m_axi_k_RRESP,
        m_axi_k_BVALID,
        m_axi_k_BREADY,
        m_axi_k_BRESP,
        m_axi_k_BID,
        m_axi_k_BUSER,
        k_offset,
        rc_read,
        ap_return,
        k_blk_n_AR,
        k_blk_n_R,
        k_blk_n_AW,
        k_blk_n_W,
        k_blk_n_B,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_k_AWVALID;
input   m_axi_k_AWREADY;
output  [31:0] m_axi_k_AWADDR;
output  [0:0] m_axi_k_AWID;
output  [31:0] m_axi_k_AWLEN;
output  [2:0] m_axi_k_AWSIZE;
output  [1:0] m_axi_k_AWBURST;
output  [1:0] m_axi_k_AWLOCK;
output  [3:0] m_axi_k_AWCACHE;
output  [2:0] m_axi_k_AWPROT;
output  [3:0] m_axi_k_AWQOS;
output  [3:0] m_axi_k_AWREGION;
output  [0:0] m_axi_k_AWUSER;
output   m_axi_k_WVALID;
input   m_axi_k_WREADY;
output  [1023:0] m_axi_k_WDATA;
output  [127:0] m_axi_k_WSTRB;
output   m_axi_k_WLAST;
output  [0:0] m_axi_k_WID;
output  [0:0] m_axi_k_WUSER;
output   m_axi_k_ARVALID;
input   m_axi_k_ARREADY;
output  [31:0] m_axi_k_ARADDR;
output  [0:0] m_axi_k_ARID;
output  [31:0] m_axi_k_ARLEN;
output  [2:0] m_axi_k_ARSIZE;
output  [1:0] m_axi_k_ARBURST;
output  [1:0] m_axi_k_ARLOCK;
output  [3:0] m_axi_k_ARCACHE;
output  [2:0] m_axi_k_ARPROT;
output  [3:0] m_axi_k_ARQOS;
output  [3:0] m_axi_k_ARREGION;
output  [0:0] m_axi_k_ARUSER;
input   m_axi_k_RVALID;
output   m_axi_k_RREADY;
input  [1023:0] m_axi_k_RDATA;
input   m_axi_k_RLAST;
input  [0:0] m_axi_k_RID;
input  [0:0] m_axi_k_RUSER;
input  [1:0] m_axi_k_RRESP;
input   m_axi_k_BVALID;
output   m_axi_k_BREADY;
input  [1:0] m_axi_k_BRESP;
input  [0:0] m_axi_k_BID;
input  [0:0] m_axi_k_BUSER;
input  [24:0] k_offset;
input  [7:0] rc_read;
output  [7:0] ap_return;
output   k_blk_n_AR;
output   k_blk_n_R;
output   k_blk_n_AW;
output   k_blk_n_W;
output   k_blk_n_B;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_k_AWVALID;
reg m_axi_k_WVALID;
reg m_axi_k_ARVALID;
reg m_axi_k_RREADY;
reg m_axi_k_BREADY;
reg k_blk_n_AR;
reg k_blk_n_R;
reg k_blk_n_AW;
reg k_blk_n_W;
reg k_blk_n_B;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state24;
reg   [31:0] k_addr_reg_862;
reg    ap_sig_ioackin_m_axi_k_ARREADY;
reg   [1023:0] k_addr_read_reg_869;
reg   [7:0] tmp_s_reg_874;
reg   [7:0] tmp_147_reg_880;
reg   [7:0] tmp_148_reg_886;
reg   [7:0] tmp_149_reg_891;
reg   [7:0] tmp_150_reg_897;
reg   [7:0] tmp_151_reg_902;
reg   [7:0] tmp_152_reg_908;
reg   [7:0] tmp_153_reg_913;
reg   [7:0] tmp_154_reg_918;
reg   [7:0] tmp_155_reg_923;
reg   [7:0] tmp_156_reg_928;
reg   [7:0] tmp_157_reg_933;
reg   [7:0] tmp_158_reg_938;
reg   [7:0] tmp_159_reg_943;
reg   [7:0] tmp_160_reg_948;
reg   [7:0] tmp_161_reg_953;
reg   [7:0] tmp_162_reg_958;
reg   [7:0] tmp_163_reg_963;
reg   [7:0] tmp_164_reg_968;
reg   [7:0] tmp_165_reg_973;
reg   [7:0] tmp_166_reg_978;
reg   [7:0] tmp_167_reg_983;
reg   [7:0] tmp_168_reg_988;
reg   [7:0] tmp_169_reg_993;
reg   [7:0] tmp_170_reg_998;
reg   [7:0] tmp_171_reg_1003;
reg   [7:0] tmp_172_reg_1008;
reg   [7:0] tmp_173_reg_1013;
reg   [7:0] tmp_174_reg_1018;
reg   [7:0] tmp_175_reg_1023;
reg   [7:0] tmp_176_reg_1028;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_22_fu_612_p2;
reg   [7:0] tmp_22_reg_1038;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_32_fu_644_p2;
reg   [7:0] tmp_32_reg_1049;
wire   [7:0] tmp_24_fu_650_p2;
reg   [7:0] tmp_24_reg_1053;
wire    ap_CS_fsm_state11;
wire   [7:0] tmp_26_fu_659_p2;
reg   [7:0] tmp_26_reg_1064;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_36_fu_668_p2;
reg   [7:0] tmp_36_reg_1075;
wire   [7:0] tmp_36_1_fu_672_p2;
reg   [7:0] tmp_36_1_reg_1080;
wire   [7:0] tmp_28_fu_677_p2;
reg   [7:0] tmp_28_reg_1086;
wire    ap_CS_fsm_state13;
wire   [7:0] tmp_39_fu_682_p2;
reg   [7:0] tmp_39_reg_1092;
wire   [7:0] tmp_39_1_fu_686_p2;
reg   [7:0] tmp_39_1_reg_1097;
wire   [7:0] tmp_36_2_fu_691_p2;
reg   [7:0] tmp_36_2_reg_1103;
wire   [7:0] tmp_42_fu_700_p2;
reg   [7:0] tmp_42_reg_1113;
wire    ap_CS_fsm_state14;
wire   [7:0] tmp_42_1_fu_704_p2;
reg   [7:0] tmp_42_1_reg_1118;
wire   [7:0] tmp_39_2_fu_709_p2;
reg   [7:0] tmp_39_2_reg_1124;
wire   [7:0] tmp_47_fu_713_p2;
reg   [7:0] tmp_47_reg_1129;
wire   [7:0] tmp_45_fu_723_p2;
reg   [7:0] tmp_45_reg_1140;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_45_1_fu_727_p2;
reg   [7:0] tmp_45_1_reg_1145;
wire   [7:0] tmp_42_2_fu_732_p2;
reg   [7:0] tmp_42_2_reg_1151;
wire   [7:0] tmp_49_fu_736_p2;
reg   [7:0] tmp_49_reg_1156;
wire   [7:0] tmp_45_2_fu_746_p2;
reg   [7:0] tmp_45_2_reg_1167;
wire    ap_CS_fsm_state16;
wire   [7:0] tmp_51_fu_750_p2;
reg   [7:0] tmp_51_reg_1172;
wire   [7:0] tmp_53_fu_760_p2;
reg   [7:0] tmp_53_reg_1183;
wire    ap_CS_fsm_state17;
wire   [7:0] tmp_57_fu_765_p2;
reg   [7:0] tmp_57_reg_1189;
reg    ap_sig_ioackin_m_axi_k_AWREADY;
wire   [7:0] tmp_60_fu_769_p2;
reg   [7:0] tmp_60_reg_1194;
wire   [7:0] tmp_63_fu_773_p2;
reg   [7:0] tmp_63_reg_1199;
wire   [7:0] tmp_66_fu_777_p2;
reg   [7:0] tmp_66_reg_1204;
wire   [7:0] tmp_57_1_fu_781_p2;
reg   [7:0] tmp_57_1_reg_1209;
wire   [7:0] tmp_60_1_fu_786_p2;
reg   [7:0] tmp_60_1_reg_1214;
wire   [7:0] tmp_63_1_fu_791_p2;
reg   [7:0] tmp_63_1_reg_1219;
wire   [7:0] tmp_66_1_fu_796_p2;
reg   [7:0] tmp_66_1_reg_1224;
wire   [7:0] tmp_57_2_fu_801_p2;
reg   [7:0] tmp_57_2_reg_1229;
wire   [7:0] tmp_60_2_fu_806_p2;
reg   [7:0] tmp_60_2_reg_1234;
wire   [7:0] tmp_63_2_fu_811_p2;
reg   [7:0] tmp_63_2_reg_1239;
wire   [7:0] tmp_66_2_fu_816_p2;
reg   [7:0] tmp_66_2_reg_1244;
reg   [7:0] ap_port_reg_rc_read;
wire   [31:0] tmp_fu_599_p1;
wire   [31:0] tmp_23_fu_618_p1;
wire   [31:0] tmp_25_fu_655_p1;
wire   [31:0] tmp_27_fu_664_p1;
wire   [31:0] tmp_46_fu_695_p1;
wire   [31:0] tmp_48_fu_718_p1;
wire   [31:0] tmp_50_fu_741_p1;
wire   [31:0] tmp_52_fu_755_p1;
wire   [31:0] k_offset_cast_fu_278_p1;
reg    ap_reg_ioackin_m_axi_k_ARREADY;
reg    ap_reg_ioackin_m_axi_k_AWREADY;
reg    ap_reg_ioackin_m_axi_k_WREADY;
reg    ap_sig_ioackin_m_axi_k_WREADY;
wire   [7:0] tmp_767_fu_603_p1;
wire   [7:0] tmp1_fu_606_p2;
wire   [0:0] tmp_769_fu_628_p3;
wire   [7:0] tmp_31_cast_cast_fu_636_p3;
wire   [7:0] tmp_768_fu_622_p2;
wire   [255:0] tmp_177_fu_821_p33;
reg   [23:0] ap_NS_fsm;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_reg_ioackin_m_axi_k_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_k_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_k_WREADY = 1'b0;
end

a0_aes_subBytes_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_ce == 1'b1))) begin
            if (~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY))) begin
                ap_reg_ioackin_m_axi_k_ARREADY <= 1'b0;
            end else if (((ap_start == 1'b1) & (1'b1 == m_axi_k_ARREADY))) begin
                ap_reg_ioackin_m_axi_k_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1))) begin
            if ((ap_sig_ioackin_m_axi_k_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_k_AWREADY <= 1'b0;
            end else if ((1'b1 == m_axi_k_AWREADY)) begin
                ap_reg_ioackin_m_axi_k_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_k_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1))) begin
            if ((ap_sig_ioackin_m_axi_k_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_k_WREADY <= 1'b0;
            end else if ((1'b1 == m_axi_k_WREADY)) begin
                ap_reg_ioackin_m_axi_k_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY)) & (ap_ce == 1'b1))) begin
        ap_port_reg_rc_read <= rc_read;
        k_addr_reg_862[24 : 0] <= k_offset_cast_fu_278_p1[24 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
        k_addr_read_reg_869 <= m_axi_k_RDATA;
        tmp_147_reg_880 <= {{m_axi_k_RDATA[247:240]}};
        tmp_148_reg_886 <= {{m_axi_k_RDATA[15:8]}};
        tmp_149_reg_891 <= {{m_axi_k_RDATA[255:248]}};
        tmp_150_reg_897 <= {{m_axi_k_RDATA[23:16]}};
        tmp_151_reg_902 <= {{m_axi_k_RDATA[231:224]}};
        tmp_152_reg_908 <= {{m_axi_k_RDATA[31:24]}};
        tmp_153_reg_913 <= {{m_axi_k_RDATA[39:32]}};
        tmp_154_reg_918 <= {{m_axi_k_RDATA[47:40]}};
        tmp_155_reg_923 <= {{m_axi_k_RDATA[55:48]}};
        tmp_156_reg_928 <= {{m_axi_k_RDATA[63:56]}};
        tmp_157_reg_933 <= {{m_axi_k_RDATA[71:64]}};
        tmp_158_reg_938 <= {{m_axi_k_RDATA[79:72]}};
        tmp_159_reg_943 <= {{m_axi_k_RDATA[87:80]}};
        tmp_160_reg_948 <= {{m_axi_k_RDATA[95:88]}};
        tmp_161_reg_953 <= {{m_axi_k_RDATA[103:96]}};
        tmp_162_reg_958 <= {{m_axi_k_RDATA[111:104]}};
        tmp_163_reg_963 <= {{m_axi_k_RDATA[119:112]}};
        tmp_164_reg_968 <= {{m_axi_k_RDATA[127:120]}};
        tmp_165_reg_973 <= {{m_axi_k_RDATA[135:128]}};
        tmp_166_reg_978 <= {{m_axi_k_RDATA[143:136]}};
        tmp_167_reg_983 <= {{m_axi_k_RDATA[151:144]}};
        tmp_168_reg_988 <= {{m_axi_k_RDATA[159:152]}};
        tmp_169_reg_993 <= {{m_axi_k_RDATA[167:160]}};
        tmp_170_reg_998 <= {{m_axi_k_RDATA[175:168]}};
        tmp_171_reg_1003 <= {{m_axi_k_RDATA[183:176]}};
        tmp_172_reg_1008 <= {{m_axi_k_RDATA[191:184]}};
        tmp_173_reg_1013 <= {{m_axi_k_RDATA[199:192]}};
        tmp_174_reg_1018 <= {{m_axi_k_RDATA[207:200]}};
        tmp_175_reg_1023 <= {{m_axi_k_RDATA[215:208]}};
        tmp_176_reg_1028 <= {{m_axi_k_RDATA[223:216]}};
        tmp_s_reg_874 <= {{m_axi_k_RDATA[239:232]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_22_reg_1038 <= tmp_22_fu_612_p2;
        tmp_32_reg_1049 <= tmp_32_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_24_reg_1053 <= tmp_24_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        tmp_26_reg_1064 <= tmp_26_fu_659_p2;
        tmp_36_1_reg_1080 <= tmp_36_1_fu_672_p2;
        tmp_36_reg_1075 <= tmp_36_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_28_reg_1086 <= tmp_28_fu_677_p2;
        tmp_36_2_reg_1103 <= tmp_36_2_fu_691_p2;
        tmp_39_1_reg_1097 <= tmp_39_1_fu_686_p2;
        tmp_39_reg_1092 <= tmp_39_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        tmp_39_2_reg_1124 <= tmp_39_2_fu_709_p2;
        tmp_42_1_reg_1118 <= tmp_42_1_fu_704_p2;
        tmp_42_reg_1113 <= tmp_42_fu_700_p2;
        tmp_47_reg_1129 <= tmp_47_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        tmp_42_2_reg_1151 <= tmp_42_2_fu_732_p2;
        tmp_45_1_reg_1145 <= tmp_45_1_fu_727_p2;
        tmp_45_reg_1140 <= tmp_45_fu_723_p2;
        tmp_49_reg_1156 <= tmp_49_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_45_2_reg_1167 <= tmp_45_2_fu_746_p2;
        tmp_51_reg_1172 <= tmp_51_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        tmp_53_reg_1183 <= tmp_53_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_AWREADY == 1'b1))) begin
        tmp_57_1_reg_1209 <= tmp_57_1_fu_781_p2;
        tmp_57_2_reg_1229 <= tmp_57_2_fu_801_p2;
        tmp_57_reg_1189 <= tmp_57_fu_765_p2;
        tmp_60_1_reg_1214 <= tmp_60_1_fu_786_p2;
        tmp_60_2_reg_1234 <= tmp_60_2_fu_806_p2;
        tmp_60_reg_1194 <= tmp_60_fu_769_p2;
        tmp_63_1_reg_1219 <= tmp_63_1_fu_791_p2;
        tmp_63_2_reg_1239 <= tmp_63_2_fu_811_p2;
        tmp_63_reg_1199 <= tmp_63_fu_773_p2;
        tmp_66_1_reg_1224 <= tmp_66_1_fu_796_p2;
        tmp_66_2_reg_1244 <= tmp_66_2_fu_816_p2;
        tmp_66_reg_1204 <= tmp_66_fu_777_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_ARREADY)) begin
        ap_sig_ioackin_m_axi_k_ARREADY = m_axi_k_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_AWREADY)) begin
        ap_sig_ioackin_m_axi_k_AWREADY = m_axi_k_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_k_WREADY)) begin
        ap_sig_ioackin_m_axi_k_WREADY = m_axi_k_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_k_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_blk_n_AR = m_axi_k_ARREADY;
    end else begin
        k_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        k_blk_n_AW = m_axi_k_AWREADY;
    end else begin
        k_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        k_blk_n_B = m_axi_k_BVALID;
    end else begin
        k_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_blk_n_R = m_axi_k_RVALID;
    end else begin
        k_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        k_blk_n_W = m_axi_k_WREADY;
    end else begin
        k_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_ARREADY))) begin
        m_axi_k_ARVALID = 1'b1;
    end else begin
        m_axi_k_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_AWREADY))) begin
        m_axi_k_AWVALID = 1'b1;
    end else begin
        m_axi_k_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
        m_axi_k_BREADY = 1'b1;
    end else begin
        m_axi_k_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
        m_axi_k_RREADY = 1'b1;
    end else begin
        m_axi_k_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (1'b0 == ap_reg_ioackin_m_axi_k_WREADY))) begin
        m_axi_k_WVALID = 1'b1;
    end else begin
        m_axi_k_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sbox_address0 = tmp_52_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        sbox_address0 = tmp_50_fu_741_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        sbox_address0 = tmp_48_fu_718_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sbox_address0 = tmp_46_fu_695_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        sbox_address0 = tmp_27_fu_664_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sbox_address0 = tmp_25_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        sbox_address0 = tmp_23_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_address0 = tmp_fu_599_p1;
    end else begin
        sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == ap_sig_ioackin_m_axi_k_ARREADY)) & (ap_ce == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (ap_ce == 1'b1) & (m_axi_k_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (ap_ce == 1'b1) & (ap_sig_ioackin_m_axi_k_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((ap_ce == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (ap_ce == 1'b1) & (m_axi_k_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = tmp_32_reg_1049;

assign k_offset_cast_fu_278_p1 = k_offset;

assign m_axi_k_ARADDR = k_offset_cast_fu_278_p1;

assign m_axi_k_ARBURST = 2'd0;

assign m_axi_k_ARCACHE = 4'd0;

assign m_axi_k_ARID = 1'd0;

assign m_axi_k_ARLEN = 32'd1;

assign m_axi_k_ARLOCK = 2'd0;

assign m_axi_k_ARPROT = 3'd0;

assign m_axi_k_ARQOS = 4'd0;

assign m_axi_k_ARREGION = 4'd0;

assign m_axi_k_ARSIZE = 3'd0;

assign m_axi_k_ARUSER = 1'd0;

assign m_axi_k_AWADDR = k_addr_reg_862;

assign m_axi_k_AWBURST = 2'd0;

assign m_axi_k_AWCACHE = 4'd0;

assign m_axi_k_AWID = 1'd0;

assign m_axi_k_AWLEN = 32'd1;

assign m_axi_k_AWLOCK = 2'd0;

assign m_axi_k_AWPROT = 3'd0;

assign m_axi_k_AWQOS = 4'd0;

assign m_axi_k_AWREGION = 4'd0;

assign m_axi_k_AWSIZE = 3'd0;

assign m_axi_k_AWUSER = 1'd0;

assign m_axi_k_WDATA = tmp_177_fu_821_p33;

assign m_axi_k_WID = 1'd0;

assign m_axi_k_WLAST = 1'b0;

assign m_axi_k_WSTRB = 128'd4294967295;

assign m_axi_k_WUSER = 1'd0;

assign tmp1_fu_606_p2 = (tmp_767_fu_603_p1 ^ ap_port_reg_rc_read);

assign tmp_177_fu_821_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_66_2_reg_1244}, {tmp_63_2_reg_1239}}, {tmp_60_2_reg_1234}}, {tmp_57_2_reg_1229}}, {tmp_66_1_reg_1224}}, {tmp_63_1_reg_1219}}, {tmp_60_1_reg_1214}}, {tmp_57_1_reg_1209}}, {tmp_66_reg_1204}}, {tmp_63_reg_1199}}, {tmp_60_reg_1194}}, {tmp_57_reg_1189}}, {tmp_53_reg_1183}}, {tmp_51_reg_1172}}, {tmp_49_reg_1156}}, {tmp_47_reg_1129}}, {tmp_45_2_reg_1167}}, {tmp_42_2_reg_1151}}, {tmp_39_2_reg_1124}}, {tmp_36_2_reg_1103}}, {tmp_45_1_reg_1145}}, {tmp_42_1_reg_1118}}, {tmp_39_1_reg_1097}}, {tmp_36_1_reg_1080}}, {tmp_45_reg_1140}}, {tmp_42_reg_1113}}, {tmp_39_reg_1092}}, {tmp_36_reg_1075}}, {tmp_28_reg_1086}}, {tmp_26_reg_1064}}, {tmp_24_reg_1053}}, {tmp_22_reg_1038}};

assign tmp_22_fu_612_p2 = (tmp1_fu_606_p2 ^ sbox_q0);

assign tmp_23_fu_618_p1 = tmp_147_reg_880;

assign tmp_24_fu_650_p2 = (sbox_q0 ^ tmp_148_reg_886);

assign tmp_25_fu_655_p1 = tmp_149_reg_891;

assign tmp_26_fu_659_p2 = (sbox_q0 ^ tmp_150_reg_897);

assign tmp_27_fu_664_p1 = tmp_151_reg_902;

assign tmp_28_fu_677_p2 = (sbox_q0 ^ tmp_152_reg_908);

assign tmp_31_cast_cast_fu_636_p3 = ((tmp_769_fu_628_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_32_fu_644_p2 = (tmp_31_cast_cast_fu_636_p3 ^ tmp_768_fu_622_p2);

assign tmp_36_1_fu_672_p2 = (tmp_157_reg_933 ^ tmp_36_fu_668_p2);

assign tmp_36_2_fu_691_p2 = (tmp_161_reg_953 ^ tmp_36_1_reg_1080);

assign tmp_36_fu_668_p2 = (tmp_153_reg_913 ^ tmp_22_reg_1038);

assign tmp_39_1_fu_686_p2 = (tmp_158_reg_938 ^ tmp_39_fu_682_p2);

assign tmp_39_2_fu_709_p2 = (tmp_162_reg_958 ^ tmp_39_1_reg_1097);

assign tmp_39_fu_682_p2 = (tmp_154_reg_918 ^ tmp_24_reg_1053);

assign tmp_42_1_fu_704_p2 = (tmp_159_reg_943 ^ tmp_42_fu_700_p2);

assign tmp_42_2_fu_732_p2 = (tmp_163_reg_963 ^ tmp_42_1_reg_1118);

assign tmp_42_fu_700_p2 = (tmp_155_reg_923 ^ tmp_26_reg_1064);

assign tmp_45_1_fu_727_p2 = (tmp_160_reg_948 ^ tmp_45_fu_723_p2);

assign tmp_45_2_fu_746_p2 = (tmp_164_reg_968 ^ tmp_45_1_reg_1145);

assign tmp_45_fu_723_p2 = (tmp_156_reg_928 ^ tmp_28_reg_1086);

assign tmp_46_fu_695_p1 = tmp_36_2_fu_691_p2;

assign tmp_47_fu_713_p2 = (sbox_q0 ^ tmp_165_reg_973);

assign tmp_48_fu_718_p1 = tmp_39_2_fu_709_p2;

assign tmp_49_fu_736_p2 = (sbox_q0 ^ tmp_166_reg_978);

assign tmp_50_fu_741_p1 = tmp_42_2_fu_732_p2;

assign tmp_51_fu_750_p2 = (sbox_q0 ^ tmp_167_reg_983);

assign tmp_52_fu_755_p1 = tmp_45_2_fu_746_p2;

assign tmp_53_fu_760_p2 = (sbox_q0 ^ tmp_168_reg_988);

assign tmp_57_1_fu_781_p2 = (tmp_173_reg_1013 ^ tmp_57_fu_765_p2);

assign tmp_57_2_fu_801_p2 = (tmp_151_reg_902 ^ tmp_57_1_fu_781_p2);

assign tmp_57_fu_765_p2 = (tmp_169_reg_993 ^ tmp_47_reg_1129);

assign tmp_60_1_fu_786_p2 = (tmp_174_reg_1018 ^ tmp_60_fu_769_p2);

assign tmp_60_2_fu_806_p2 = (tmp_s_reg_874 ^ tmp_60_1_fu_786_p2);

assign tmp_60_fu_769_p2 = (tmp_170_reg_998 ^ tmp_49_reg_1156);

assign tmp_63_1_fu_791_p2 = (tmp_175_reg_1023 ^ tmp_63_fu_773_p2);

assign tmp_63_2_fu_811_p2 = (tmp_147_reg_880 ^ tmp_63_1_fu_791_p2);

assign tmp_63_fu_773_p2 = (tmp_171_reg_1003 ^ tmp_51_reg_1172);

assign tmp_66_1_fu_796_p2 = (tmp_176_reg_1028 ^ tmp_66_fu_777_p2);

assign tmp_66_2_fu_816_p2 = (tmp_149_reg_891 ^ tmp_66_1_fu_796_p2);

assign tmp_66_fu_777_p2 = (tmp_172_reg_1008 ^ tmp_53_reg_1183);

assign tmp_767_fu_603_p1 = k_addr_read_reg_869[7:0];

assign tmp_768_fu_622_p2 = ap_port_reg_rc_read << 8'd1;

assign tmp_769_fu_628_p3 = ap_port_reg_rc_read[32'd7];

assign tmp_fu_599_p1 = tmp_s_reg_874;

always @ (posedge ap_clk) begin
    k_addr_reg_862[31:25] <= 7'b0000000;
end

endmodule //a0_aes_expandEncKey
