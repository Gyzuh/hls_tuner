-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aes_expandEncKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_k_AWVALID : OUT STD_LOGIC;
    m_axi_k_AWREADY : IN STD_LOGIC;
    m_axi_k_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_WVALID : OUT STD_LOGIC;
    m_axi_k_WREADY : IN STD_LOGIC;
    m_axi_k_WDATA : OUT STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_k_WSTRB : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_k_WLAST : OUT STD_LOGIC;
    m_axi_k_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_ARVALID : OUT STD_LOGIC;
    m_axi_k_ARREADY : IN STD_LOGIC;
    m_axi_k_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_k_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_k_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_k_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RVALID : IN STD_LOGIC;
    m_axi_k_RREADY : OUT STD_LOGIC;
    m_axi_k_RDATA : IN STD_LOGIC_VECTOR (1023 downto 0);
    m_axi_k_RLAST : IN STD_LOGIC;
    m_axi_k_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_BVALID : IN STD_LOGIC;
    m_axi_k_BREADY : OUT STD_LOGIC;
    m_axi_k_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_k_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_k_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    k_offset : IN STD_LOGIC_VECTOR (24 downto 0);
    rc_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    k_blk_n_AR : OUT STD_LOGIC;
    k_blk_n_R : OUT STD_LOGIC;
    k_blk_n_AW : OUT STD_LOGIC;
    k_blk_n_W : OUT STD_LOGIC;
    k_blk_n_B : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of a0_aes_expandEncKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_1B : STD_LOGIC_VECTOR (7 downto 0) := "00011011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal k_addr_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_k_ARREADY : STD_LOGIC;
    signal k_addr_read_reg_869 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_s_reg_874 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_153_reg_913 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_154_reg_918 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_reg_923 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_156_reg_928 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_157_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_158_reg_938 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_159_reg_943 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_160_reg_948 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_161_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_162_reg_958 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_163_reg_963 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_164_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_165_reg_973 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_166_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_167_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_168_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_169_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_170_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_171_reg_1003 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_172_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_173_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_174_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_175_reg_1023 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_176_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_22_fu_612_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_32_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_reg_1049 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_650_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_26_fu_659_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_1064 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_36_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_1_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_1_reg_1080 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_reg_1086 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_39_fu_682_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_1092 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_1_reg_1097 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_2_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_2_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_700_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_reg_1113 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_42_1_fu_704_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_1_reg_1118 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_fu_709_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_2_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_reg_1140 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_45_1_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_1_reg_1145 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_2_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_2_reg_1151 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_2_fu_746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_2_reg_1167 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_51_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_760_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_57_fu_765_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_reg_1189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_k_AWREADY : STD_LOGIC;
    signal tmp_60_fu_769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_reg_1194 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_reg_1199 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_reg_1204 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_1_fu_781_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_1_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_1_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_1_reg_1214 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_1_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_1_reg_1219 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_1_fu_796_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_1_reg_1224 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_2_fu_801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_2_reg_1229 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_2_fu_806_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_2_reg_1234 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_2_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_63_2_reg_1239 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_2_fu_816_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_2_reg_1244 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_port_reg_rc_read : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_664_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_offset_cast_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_k_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_k_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_k_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_k_WREADY : STD_LOGIC;
    signal tmp_767_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_769_fu_628_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_cast_cast_fu_636_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_768_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_177_fu_821_p33 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";

    component a0_aes_subBytes_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component a0_aes_subBytes_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_ce = ap_const_logic_1))) then
                    if (not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY)))) then 
                        ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_0;
                    elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = m_axi_k_ARREADY))) then 
                        ap_reg_ioackin_m_axi_k_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1))) then
                    if ((ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_k_AWREADY)) then 
                        ap_reg_ioackin_m_axi_k_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_k_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1))) then
                    if ((ap_sig_ioackin_m_axi_k_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_k_WREADY)) then 
                        ap_reg_ioackin_m_axi_k_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY))) and (ap_ce = ap_const_logic_1))) then
                ap_port_reg_rc_read <= rc_read;
                    k_addr_reg_862(24 downto 0) <= k_offset_cast_fu_278_p1(24 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then
                k_addr_read_reg_869 <= m_axi_k_RDATA;
                tmp_147_reg_880 <= m_axi_k_RDATA(247 downto 240);
                tmp_148_reg_886 <= m_axi_k_RDATA(15 downto 8);
                tmp_149_reg_891 <= m_axi_k_RDATA(255 downto 248);
                tmp_150_reg_897 <= m_axi_k_RDATA(23 downto 16);
                tmp_151_reg_902 <= m_axi_k_RDATA(231 downto 224);
                tmp_152_reg_908 <= m_axi_k_RDATA(31 downto 24);
                tmp_153_reg_913 <= m_axi_k_RDATA(39 downto 32);
                tmp_154_reg_918 <= m_axi_k_RDATA(47 downto 40);
                tmp_155_reg_923 <= m_axi_k_RDATA(55 downto 48);
                tmp_156_reg_928 <= m_axi_k_RDATA(63 downto 56);
                tmp_157_reg_933 <= m_axi_k_RDATA(71 downto 64);
                tmp_158_reg_938 <= m_axi_k_RDATA(79 downto 72);
                tmp_159_reg_943 <= m_axi_k_RDATA(87 downto 80);
                tmp_160_reg_948 <= m_axi_k_RDATA(95 downto 88);
                tmp_161_reg_953 <= m_axi_k_RDATA(103 downto 96);
                tmp_162_reg_958 <= m_axi_k_RDATA(111 downto 104);
                tmp_163_reg_963 <= m_axi_k_RDATA(119 downto 112);
                tmp_164_reg_968 <= m_axi_k_RDATA(127 downto 120);
                tmp_165_reg_973 <= m_axi_k_RDATA(135 downto 128);
                tmp_166_reg_978 <= m_axi_k_RDATA(143 downto 136);
                tmp_167_reg_983 <= m_axi_k_RDATA(151 downto 144);
                tmp_168_reg_988 <= m_axi_k_RDATA(159 downto 152);
                tmp_169_reg_993 <= m_axi_k_RDATA(167 downto 160);
                tmp_170_reg_998 <= m_axi_k_RDATA(175 downto 168);
                tmp_171_reg_1003 <= m_axi_k_RDATA(183 downto 176);
                tmp_172_reg_1008 <= m_axi_k_RDATA(191 downto 184);
                tmp_173_reg_1013 <= m_axi_k_RDATA(199 downto 192);
                tmp_174_reg_1018 <= m_axi_k_RDATA(207 downto 200);
                tmp_175_reg_1023 <= m_axi_k_RDATA(215 downto 208);
                tmp_176_reg_1028 <= m_axi_k_RDATA(223 downto 216);
                tmp_s_reg_874 <= m_axi_k_RDATA(239 downto 232);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_22_reg_1038 <= tmp_22_fu_612_p2;
                tmp_32_reg_1049 <= tmp_32_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_24_reg_1053 <= tmp_24_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_26_reg_1064 <= tmp_26_fu_659_p2;
                tmp_36_1_reg_1080 <= tmp_36_1_fu_672_p2;
                tmp_36_reg_1075 <= tmp_36_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_28_reg_1086 <= tmp_28_fu_677_p2;
                tmp_36_2_reg_1103 <= tmp_36_2_fu_691_p2;
                tmp_39_1_reg_1097 <= tmp_39_1_fu_686_p2;
                tmp_39_reg_1092 <= tmp_39_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_39_2_reg_1124 <= tmp_39_2_fu_709_p2;
                tmp_42_1_reg_1118 <= tmp_42_1_fu_704_p2;
                tmp_42_reg_1113 <= tmp_42_fu_700_p2;
                tmp_47_reg_1129 <= tmp_47_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                tmp_42_2_reg_1151 <= tmp_42_2_fu_732_p2;
                tmp_45_1_reg_1145 <= tmp_45_1_fu_727_p2;
                tmp_45_reg_1140 <= tmp_45_fu_723_p2;
                tmp_49_reg_1156 <= tmp_49_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_45_2_reg_1167 <= tmp_45_2_fu_746_p2;
                tmp_51_reg_1172 <= tmp_51_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                tmp_53_reg_1183 <= tmp_53_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1))) then
                tmp_57_1_reg_1209 <= tmp_57_1_fu_781_p2;
                tmp_57_2_reg_1229 <= tmp_57_2_fu_801_p2;
                tmp_57_reg_1189 <= tmp_57_fu_765_p2;
                tmp_60_1_reg_1214 <= tmp_60_1_fu_786_p2;
                tmp_60_2_reg_1234 <= tmp_60_2_fu_806_p2;
                tmp_60_reg_1194 <= tmp_60_fu_769_p2;
                tmp_63_1_reg_1219 <= tmp_63_1_fu_791_p2;
                tmp_63_2_reg_1239 <= tmp_63_2_fu_811_p2;
                tmp_63_reg_1199 <= tmp_63_fu_773_p2;
                tmp_66_1_reg_1224 <= tmp_66_1_fu_796_p2;
                tmp_66_2_reg_1244 <= tmp_66_2_fu_816_p2;
                tmp_66_reg_1204 <= tmp_66_fu_777_p2;
            end if;
        end if;
    end process;
    k_addr_reg_862(31 downto 25) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_k_RVALID, m_axi_k_BVALID, ap_CS_fsm_state8, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state24, ap_ce, ap_sig_ioackin_m_axi_k_ARREADY, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_sig_ioackin_m_axi_k_AWREADY, ap_sig_ioackin_m_axi_k_WREADY, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_k_ARREADY))) and (ap_ce = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (ap_sig_ioackin_m_axi_k_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= tmp_32_reg_1049;

    ap_sig_ioackin_m_axi_k_ARREADY_assign_proc : process(m_axi_k_ARREADY, ap_reg_ioackin_m_axi_k_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_ARREADY)) then 
            ap_sig_ioackin_m_axi_k_ARREADY <= m_axi_k_ARREADY;
        else 
            ap_sig_ioackin_m_axi_k_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_k_AWREADY_assign_proc : process(m_axi_k_AWREADY, ap_reg_ioackin_m_axi_k_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_AWREADY)) then 
            ap_sig_ioackin_m_axi_k_AWREADY <= m_axi_k_AWREADY;
        else 
            ap_sig_ioackin_m_axi_k_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_k_WREADY_assign_proc : process(m_axi_k_WREADY, ap_reg_ioackin_m_axi_k_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_k_WREADY)) then 
            ap_sig_ioackin_m_axi_k_WREADY <= m_axi_k_WREADY;
        else 
            ap_sig_ioackin_m_axi_k_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_k_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            k_blk_n_AR <= m_axi_k_ARREADY;
        else 
            k_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_AW_assign_proc : process(m_axi_k_AWREADY, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            k_blk_n_AW <= m_axi_k_AWREADY;
        else 
            k_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_B_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            k_blk_n_B <= m_axi_k_BVALID;
        else 
            k_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_R_assign_proc : process(m_axi_k_RVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            k_blk_n_R <= m_axi_k_RVALID;
        else 
            k_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    k_blk_n_W_assign_proc : process(m_axi_k_WREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            k_blk_n_W <= m_axi_k_WREADY;
        else 
            k_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    k_offset_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_offset),32));
    m_axi_k_ARADDR <= k_offset_cast_fu_278_p1;
    m_axi_k_ARBURST <= ap_const_lv2_0;
    m_axi_k_ARCACHE <= ap_const_lv4_0;
    m_axi_k_ARID <= ap_const_lv1_0;
    m_axi_k_ARLEN <= ap_const_lv32_1;
    m_axi_k_ARLOCK <= ap_const_lv2_0;
    m_axi_k_ARPROT <= ap_const_lv3_0;
    m_axi_k_ARQOS <= ap_const_lv4_0;
    m_axi_k_ARREGION <= ap_const_lv4_0;
    m_axi_k_ARSIZE <= ap_const_lv3_0;
    m_axi_k_ARUSER <= ap_const_lv1_0;

    m_axi_k_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_reg_ioackin_m_axi_k_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_ARREADY))) then 
            m_axi_k_ARVALID <= ap_const_logic_1;
        else 
            m_axi_k_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_k_AWADDR <= k_addr_reg_862;
    m_axi_k_AWBURST <= ap_const_lv2_0;
    m_axi_k_AWCACHE <= ap_const_lv4_0;
    m_axi_k_AWID <= ap_const_lv1_0;
    m_axi_k_AWLEN <= ap_const_lv32_1;
    m_axi_k_AWLOCK <= ap_const_lv2_0;
    m_axi_k_AWPROT <= ap_const_lv3_0;
    m_axi_k_AWQOS <= ap_const_lv4_0;
    m_axi_k_AWREGION <= ap_const_lv4_0;
    m_axi_k_AWSIZE <= ap_const_lv3_0;
    m_axi_k_AWUSER <= ap_const_lv1_0;

    m_axi_k_AWVALID_assign_proc : process(ap_CS_fsm_state18, ap_ce, ap_reg_ioackin_m_axi_k_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_AWREADY))) then 
            m_axi_k_AWVALID <= ap_const_logic_1;
        else 
            m_axi_k_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_k_BREADY_assign_proc : process(m_axi_k_BVALID, ap_CS_fsm_state24, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_ce = ap_const_logic_1) and (m_axi_k_BVALID = ap_const_logic_1))) then 
            m_axi_k_BREADY <= ap_const_logic_1;
        else 
            m_axi_k_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_k_RREADY_assign_proc : process(m_axi_k_RVALID, ap_CS_fsm_state8, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_ce = ap_const_logic_1) and (m_axi_k_RVALID = ap_const_logic_1))) then 
            m_axi_k_RREADY <= ap_const_logic_1;
        else 
            m_axi_k_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_k_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_177_fu_821_p33),1024));
    m_axi_k_WID <= ap_const_lv1_0;
    m_axi_k_WLAST <= ap_const_logic_0;
    m_axi_k_WSTRB <= ap_const_lv128_lc_3;
    m_axi_k_WUSER <= ap_const_lv1_0;

    m_axi_k_WVALID_assign_proc : process(ap_CS_fsm_state19, ap_ce, ap_reg_ioackin_m_axi_k_WREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (ap_ce = ap_const_logic_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_k_WREADY))) then 
            m_axi_k_WVALID <= ap_const_logic_1;
        else 
            m_axi_k_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    sbox_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, tmp_fu_599_p1, tmp_23_fu_618_p1, tmp_25_fu_655_p1, tmp_27_fu_664_p1, tmp_46_fu_695_p1, tmp_48_fu_718_p1, tmp_50_fu_741_p1, tmp_52_fu_755_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sbox_address0 <= tmp_52_fu_755_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            sbox_address0 <= tmp_50_fu_741_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sbox_address0 <= tmp_48_fu_718_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_address0 <= tmp_46_fu_695_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_address0 <= tmp_27_fu_664_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sbox_address0 <= tmp_25_fu_655_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            sbox_address0 <= tmp_23_fu_618_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_address0 <= tmp_fu_599_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_606_p2 <= (tmp_767_fu_603_p1 xor ap_port_reg_rc_read);
    tmp_177_fu_821_p33 <= (((((((((((((((((((((((((((((((tmp_66_2_reg_1244 & tmp_63_2_reg_1239) & tmp_60_2_reg_1234) & tmp_57_2_reg_1229) & tmp_66_1_reg_1224) & tmp_63_1_reg_1219) & tmp_60_1_reg_1214) & tmp_57_1_reg_1209) & tmp_66_reg_1204) & tmp_63_reg_1199) & tmp_60_reg_1194) & tmp_57_reg_1189) & tmp_53_reg_1183) & tmp_51_reg_1172) & tmp_49_reg_1156) & tmp_47_reg_1129) & tmp_45_2_reg_1167) & tmp_42_2_reg_1151) & tmp_39_2_reg_1124) & tmp_36_2_reg_1103) & tmp_45_1_reg_1145) & tmp_42_1_reg_1118) & tmp_39_1_reg_1097) & tmp_36_1_reg_1080) & tmp_45_reg_1140) & tmp_42_reg_1113) & tmp_39_reg_1092) & tmp_36_reg_1075) & tmp_28_reg_1086) & tmp_26_reg_1064) & tmp_24_reg_1053) & tmp_22_reg_1038);
    tmp_22_fu_612_p2 <= (tmp1_fu_606_p2 xor sbox_q0);
    tmp_23_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_147_reg_880),32));
    tmp_24_fu_650_p2 <= (sbox_q0 xor tmp_148_reg_886);
    tmp_25_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_149_reg_891),32));
    tmp_26_fu_659_p2 <= (sbox_q0 xor tmp_150_reg_897);
    tmp_27_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_reg_902),32));
    tmp_28_fu_677_p2 <= (sbox_q0 xor tmp_152_reg_908);
    tmp_31_cast_cast_fu_636_p3 <= 
        ap_const_lv8_1B when (tmp_769_fu_628_p3(0) = '1') else 
        ap_const_lv8_0;
    tmp_32_fu_644_p2 <= (tmp_31_cast_cast_fu_636_p3 xor tmp_768_fu_622_p2);
    tmp_36_1_fu_672_p2 <= (tmp_157_reg_933 xor tmp_36_fu_668_p2);
    tmp_36_2_fu_691_p2 <= (tmp_161_reg_953 xor tmp_36_1_reg_1080);
    tmp_36_fu_668_p2 <= (tmp_153_reg_913 xor tmp_22_reg_1038);
    tmp_39_1_fu_686_p2 <= (tmp_158_reg_938 xor tmp_39_fu_682_p2);
    tmp_39_2_fu_709_p2 <= (tmp_162_reg_958 xor tmp_39_1_reg_1097);
    tmp_39_fu_682_p2 <= (tmp_154_reg_918 xor tmp_24_reg_1053);
    tmp_42_1_fu_704_p2 <= (tmp_159_reg_943 xor tmp_42_fu_700_p2);
    tmp_42_2_fu_732_p2 <= (tmp_163_reg_963 xor tmp_42_1_reg_1118);
    tmp_42_fu_700_p2 <= (tmp_155_reg_923 xor tmp_26_reg_1064);
    tmp_45_1_fu_727_p2 <= (tmp_160_reg_948 xor tmp_45_fu_723_p2);
    tmp_45_2_fu_746_p2 <= (tmp_164_reg_968 xor tmp_45_1_reg_1145);
    tmp_45_fu_723_p2 <= (tmp_156_reg_928 xor tmp_28_reg_1086);
    tmp_46_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_2_fu_691_p2),32));
    tmp_47_fu_713_p2 <= (sbox_q0 xor tmp_165_reg_973);
    tmp_48_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_2_fu_709_p2),32));
    tmp_49_fu_736_p2 <= (sbox_q0 xor tmp_166_reg_978);
    tmp_50_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_2_fu_732_p2),32));
    tmp_51_fu_750_p2 <= (sbox_q0 xor tmp_167_reg_983);
    tmp_52_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_2_fu_746_p2),32));
    tmp_53_fu_760_p2 <= (sbox_q0 xor tmp_168_reg_988);
    tmp_57_1_fu_781_p2 <= (tmp_173_reg_1013 xor tmp_57_fu_765_p2);
    tmp_57_2_fu_801_p2 <= (tmp_151_reg_902 xor tmp_57_1_fu_781_p2);
    tmp_57_fu_765_p2 <= (tmp_169_reg_993 xor tmp_47_reg_1129);
    tmp_60_1_fu_786_p2 <= (tmp_174_reg_1018 xor tmp_60_fu_769_p2);
    tmp_60_2_fu_806_p2 <= (tmp_s_reg_874 xor tmp_60_1_fu_786_p2);
    tmp_60_fu_769_p2 <= (tmp_170_reg_998 xor tmp_49_reg_1156);
    tmp_63_1_fu_791_p2 <= (tmp_175_reg_1023 xor tmp_63_fu_773_p2);
    tmp_63_2_fu_811_p2 <= (tmp_147_reg_880 xor tmp_63_1_fu_791_p2);
    tmp_63_fu_773_p2 <= (tmp_171_reg_1003 xor tmp_51_reg_1172);
    tmp_66_1_fu_796_p2 <= (tmp_176_reg_1028 xor tmp_66_fu_777_p2);
    tmp_66_2_fu_816_p2 <= (tmp_149_reg_891 xor tmp_66_1_fu_796_p2);
    tmp_66_fu_777_p2 <= (tmp_172_reg_1008 xor tmp_53_reg_1183);
    tmp_767_fu_603_p1 <= k_addr_read_reg_869(8 - 1 downto 0);
    tmp_768_fu_622_p2 <= std_logic_vector(shift_left(unsigned(ap_port_reg_rc_read),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    tmp_769_fu_628_p3 <= ap_port_reg_rc_read(7 downto 7);
    tmp_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_874),32));
end behav;
