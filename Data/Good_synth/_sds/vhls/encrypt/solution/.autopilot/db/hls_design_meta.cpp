#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_ctx_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_ctx_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_ctx_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_ctx_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_ctx_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_ctx_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_ctx_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_ctx_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_ctx_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_ctx_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_WDATA", 1024, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_WSTRB", 128, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_ctx_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_ctx_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_ctx_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_ctx_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_ctx_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_ctx_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_ctx_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_ctx_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_ctx_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_ctx_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_ctx_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_RDATA", 1024, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_ctx_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_ctx_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_ctx_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_ctx_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_ctx_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_ctx_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_ctx_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_ctx_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_buf_r_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_buf_r_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_buf_r_AWADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_buf_r_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_buf_r_AWLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_buf_r_AWSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_buf_r_AWBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_buf_r_AWLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_buf_r_AWCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_buf_r_AWPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_buf_r_AWQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_buf_r_AWREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_buf_r_AWUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_buf_r_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_buf_r_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_buf_r_WDATA", 32, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_buf_r_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_buf_r_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_buf_r_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_buf_r_WUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_buf_r_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_buf_r_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_buf_r_ARADDR", 32, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_buf_r_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_buf_r_ARLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_buf_r_ARSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_buf_r_ARBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_buf_r_ARLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_buf_r_ARCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_buf_r_ARPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_buf_r_ARQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_buf_r_ARREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_buf_r_ARUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_buf_r_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_buf_r_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_buf_r_RDATA", 32, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_buf_r_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_buf_r_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_buf_r_RUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_buf_r_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_buf_r_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_buf_r_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_buf_r_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_buf_r_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_buf_r_BUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("ctx_offset", 32, hls_in, 2, "ap_none", "in_data", 1),
	Port_Property("k_Addr_A", 32, hls_out, 3, "bram", "mem_address", 1),
	Port_Property("k_EN_A", 1, hls_out, 3, "bram", "mem_ce", 1),
	Port_Property("k_WEN_A", 1, hls_out, 3, "bram", "mem_we", 1),
	Port_Property("k_Din_A", 8, hls_out, 3, "bram", "mem_din", 1),
	Port_Property("k_Dout_A", 8, hls_in, 3, "bram", "mem_dout", 1),
	Port_Property("k_Clk_A", 1, hls_out, 3, "bram", "mem_clk", 1),
	Port_Property("k_Rst_A", 1, hls_out, 3, "bram", "mem_rst", 1),
	Port_Property("buf_offset", 32, hls_in, 4, "ap_none", "in_data", 1),
};
const char* HLS_Design_Meta::dut_name = "encrypt";
