// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_aes_mixColumns.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_aes_mixColumns::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_aes_mixColumns::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state1 = "1";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state2 = "10";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state3 = "100";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state4 = "1000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state5 = "10000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state6 = "100000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<26> a0_aes_mixColumns::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_2 = "10";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_9 = "1001";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_D = "1101";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_E = "1110";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_13 = "10011";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_3 = "11";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_A = "1010";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_F = "1111";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_10 = "10000";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_15 = "10101";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_4 = "100";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_B = "1011";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_11 = "10001";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_12 = "10010";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_17 = "10111";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_5 = "101";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_C = "1100";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_14 = "10100";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_19 = "11001";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_1 = "1";
const sc_lv<1> a0_aes_mixColumns::ap_const_lv1_0 = "0";
const sc_lv<5> a0_aes_mixColumns::ap_const_lv5_0 = "00000";
const sc_lv<3> a0_aes_mixColumns::ap_const_lv3_0 = "000";
const sc_lv<2> a0_aes_mixColumns::ap_const_lv2_0 = "00";
const sc_lv<4> a0_aes_mixColumns::ap_const_lv4_0 = "0000";
const sc_lv<1> a0_aes_mixColumns::ap_const_lv1_1 = "1";
const sc_lv<4> a0_aes_mixColumns::ap_const_lv4_1 = "1";
const sc_lv<4> a0_aes_mixColumns::ap_const_lv4_2 = "10";
const sc_lv<4> a0_aes_mixColumns::ap_const_lv4_3 = "11";
const sc_lv<5> a0_aes_mixColumns::ap_const_lv5_4 = "100";
const sc_lv<32> a0_aes_mixColumns::ap_const_lv32_7 = "111";
const sc_lv<8> a0_aes_mixColumns::ap_const_lv8_1 = "1";
const sc_lv<8> a0_aes_mixColumns::ap_const_lv8_1B = "11011";
const bool a0_aes_mixColumns::ap_const_boolean_1 = true;

a0_aes_mixColumns::a0_aes_mixColumns(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_169_p3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_169_p3 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_ARREADY);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_AWREADY);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_buf_r_WREADY);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_buf_r_blk_n_AR);
    sensitive << ( m_axi_buf_r_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_buf_r_blk_n_AW);
    sensitive << ( m_axi_buf_r_AWREADY );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );

    SC_METHOD(thread_buf_r_blk_n_B);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_buf_r_blk_n_R);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_buf_r_blk_n_W);
    sensitive << ( m_axi_buf_r_WREADY );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );

    SC_METHOD(thread_e_fu_274_p2);
    sensitive << ( d_reg_508 );
    sensitive << ( tmp_6_fu_269_p2 );

    SC_METHOD(thread_i_7_fu_259_p2);
    sensitive << ( i_reg_158 );

    SC_METHOD(thread_m_axi_buf_r_ARADDR);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( buf_addr_reg_453 );
    sensitive << ( buf_addr_12_reg_460 );
    sensitive << ( buf_addr_13_reg_467 );
    sensitive << ( buf_addr_14_reg_474 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_ARBURST);

    SC_METHOD(thread_m_axi_buf_r_ARCACHE);

    SC_METHOD(thread_m_axi_buf_r_ARID);

    SC_METHOD(thread_m_axi_buf_r_ARLEN);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_ARLOCK);

    SC_METHOD(thread_m_axi_buf_r_ARPROT);

    SC_METHOD(thread_m_axi_buf_r_ARQOS);

    SC_METHOD(thread_m_axi_buf_r_ARREGION);

    SC_METHOD(thread_m_axi_buf_r_ARSIZE);

    SC_METHOD(thread_m_axi_buf_r_ARUSER);

    SC_METHOD(thread_m_axi_buf_r_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_ARREADY );

    SC_METHOD(thread_m_axi_buf_r_AWADDR);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( buf_addr_reg_453 );
    sensitive << ( buf_addr_12_reg_460 );
    sensitive << ( buf_addr_13_reg_467 );
    sensitive << ( buf_addr_14_reg_474 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWBURST);

    SC_METHOD(thread_m_axi_buf_r_AWCACHE);

    SC_METHOD(thread_m_axi_buf_r_AWID);

    SC_METHOD(thread_m_axi_buf_r_AWLEN);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_AWLOCK);

    SC_METHOD(thread_m_axi_buf_r_AWPROT);

    SC_METHOD(thread_m_axi_buf_r_AWQOS);

    SC_METHOD(thread_m_axi_buf_r_AWREGION);

    SC_METHOD(thread_m_axi_buf_r_AWSIZE);

    SC_METHOD(thread_m_axi_buf_r_AWUSER);

    SC_METHOD(thread_m_axi_buf_r_AWVALID);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_BREADY);
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );

    SC_METHOD(thread_m_axi_buf_r_RREADY);
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_m_axi_buf_r_WDATA);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_9_reg_515 );
    sensitive << ( tmp_5_reg_520 );
    sensitive << ( tmp_1_reg_525 );
    sensitive << ( tmp_7_reg_530 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_m_axi_buf_r_WID);

    SC_METHOD(thread_m_axi_buf_r_WLAST);

    SC_METHOD(thread_m_axi_buf_r_WSTRB);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_m_axi_buf_r_WUSER);

    SC_METHOD(thread_m_axi_buf_r_WVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_reg_ioackin_m_axi_buf_r_WREADY );

    SC_METHOD(thread_sum1_fu_206_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_2_cast_fu_202_p1 );

    SC_METHOD(thread_sum2_fu_227_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_3_cast_fu_223_p1 );

    SC_METHOD(thread_sum3_fu_248_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_4_cast_fu_244_p1 );

    SC_METHOD(thread_sum_fu_185_p2);
    sensitive << ( buf_offset );
    sensitive << ( tmp_s_fu_177_p1 );

    SC_METHOD(thread_tmp1_fu_307_p2);
    sensitive << ( tmp_4_i_fu_299_p3 );
    sensitive << ( e_fu_274_p2 );

    SC_METHOD(thread_tmp2_fu_350_p2);
    sensitive << ( e_fu_274_p2 );
    sensitive << ( tmp_4_i1_fu_342_p3 );

    SC_METHOD(thread_tmp3_fu_393_p2);
    sensitive << ( e_fu_274_p2 );
    sensitive << ( tmp_4_i2_fu_385_p3 );

    SC_METHOD(thread_tmp_10_fu_279_p3);
    sensitive << ( x_assign_fu_265_p2 );

    SC_METHOD(thread_tmp_11_fu_287_p2);
    sensitive << ( x_assign_fu_265_p2 );

    SC_METHOD(thread_tmp_12_fu_322_p3);
    sensitive << ( x_assign_1_fu_318_p2 );

    SC_METHOD(thread_tmp_13_fu_330_p2);
    sensitive << ( x_assign_1_fu_318_p2 );

    SC_METHOD(thread_tmp_14_fu_365_p3);
    sensitive << ( x_assign_2_fu_361_p2 );

    SC_METHOD(thread_tmp_15_fu_373_p2);
    sensitive << ( x_assign_2_fu_361_p2 );

    SC_METHOD(thread_tmp_16_fu_408_p3);
    sensitive << ( x_assign_3_fu_404_p2 );

    SC_METHOD(thread_tmp_17_fu_416_p2);
    sensitive << ( x_assign_3_fu_404_p2 );

    SC_METHOD(thread_tmp_1_fu_399_p2);
    sensitive << ( c_reg_500 );
    sensitive << ( tmp3_fu_393_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_202_p1);
    sensitive << ( tmp_2_fu_196_p2 );

    SC_METHOD(thread_tmp_2_fu_196_p2);
    sensitive << ( tmp_8_fu_181_p1 );

    SC_METHOD(thread_tmp_2_i1_fu_336_p2);
    sensitive << ( tmp_13_fu_330_p2 );

    SC_METHOD(thread_tmp_2_i2_fu_379_p2);
    sensitive << ( tmp_15_fu_373_p2 );

    SC_METHOD(thread_tmp_2_i3_fu_422_p2);
    sensitive << ( tmp_17_fu_416_p2 );

    SC_METHOD(thread_tmp_2_i_fu_293_p2);
    sensitive << ( tmp_11_fu_287_p2 );

    SC_METHOD(thread_tmp_3_cast_fu_223_p1);
    sensitive << ( tmp_3_fu_217_p2 );

    SC_METHOD(thread_tmp_3_fu_217_p2);
    sensitive << ( tmp_8_fu_181_p1 );

    SC_METHOD(thread_tmp_4_cast_fu_244_p1);
    sensitive << ( tmp_4_fu_238_p2 );

    SC_METHOD(thread_tmp_4_fu_238_p2);
    sensitive << ( tmp_8_fu_181_p1 );

    SC_METHOD(thread_tmp_4_i1_fu_342_p3);
    sensitive << ( tmp_13_fu_330_p2 );
    sensitive << ( tmp_12_fu_322_p3 );
    sensitive << ( tmp_2_i1_fu_336_p2 );

    SC_METHOD(thread_tmp_4_i2_fu_385_p3);
    sensitive << ( tmp_15_fu_373_p2 );
    sensitive << ( tmp_14_fu_365_p3 );
    sensitive << ( tmp_2_i2_fu_379_p2 );

    SC_METHOD(thread_tmp_4_i3_fu_428_p3);
    sensitive << ( tmp_17_fu_416_p2 );
    sensitive << ( tmp_16_fu_408_p3 );
    sensitive << ( tmp_2_i3_fu_422_p2 );

    SC_METHOD(thread_tmp_4_i_fu_299_p3);
    sensitive << ( tmp_11_fu_287_p2 );
    sensitive << ( tmp_10_fu_279_p3 );
    sensitive << ( tmp_2_i_fu_293_p2 );

    SC_METHOD(thread_tmp_5_fu_356_p2);
    sensitive << ( b_reg_493 );
    sensitive << ( tmp2_fu_350_p2 );

    SC_METHOD(thread_tmp_6_fu_269_p2);
    sensitive << ( c_reg_500 );
    sensitive << ( x_assign_fu_265_p2 );

    SC_METHOD(thread_tmp_7_fu_436_p2);
    sensitive << ( tmp_6_fu_269_p2 );
    sensitive << ( tmp_4_i3_fu_428_p3 );

    SC_METHOD(thread_tmp_8_fu_181_p1);
    sensitive << ( i_reg_158 );

    SC_METHOD(thread_tmp_9_fu_313_p2);
    sensitive << ( a_reg_486 );
    sensitive << ( tmp1_fu_307_p2 );

    SC_METHOD(thread_tmp_fu_169_p3);
    sensitive << ( i_reg_158 );

    SC_METHOD(thread_tmp_s_fu_177_p1);
    sensitive << ( i_reg_158 );

    SC_METHOD(thread_x_assign_1_fu_318_p2);
    sensitive << ( b_reg_493 );
    sensitive << ( c_reg_500 );

    SC_METHOD(thread_x_assign_2_fu_361_p2);
    sensitive << ( c_reg_500 );
    sensitive << ( d_reg_508 );

    SC_METHOD(thread_x_assign_3_fu_404_p2);
    sensitive << ( a_reg_486 );
    sensitive << ( d_reg_508 );

    SC_METHOD(thread_x_assign_fu_265_p2);
    sensitive << ( a_reg_486 );
    sensitive << ( b_reg_493 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_buf_r_RVALID );
    sensitive << ( m_axi_buf_r_BVALID );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_169_p3 );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_AWREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_ARREADY );
    sensitive << ( ap_sig_ioackin_m_axi_buf_r_WREADY );

    ap_CS_fsm = "00000000000000000000000001";
    ap_reg_ioackin_m_axi_buf_r_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_buf_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_aes_mixColumns_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_buf_r_AWVALID, "(port)m_axi_buf_r_AWVALID");
    sc_trace(mVcdFile, m_axi_buf_r_AWREADY, "(port)m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, m_axi_buf_r_AWADDR, "(port)m_axi_buf_r_AWADDR");
    sc_trace(mVcdFile, m_axi_buf_r_AWID, "(port)m_axi_buf_r_AWID");
    sc_trace(mVcdFile, m_axi_buf_r_AWLEN, "(port)m_axi_buf_r_AWLEN");
    sc_trace(mVcdFile, m_axi_buf_r_AWSIZE, "(port)m_axi_buf_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_AWBURST, "(port)m_axi_buf_r_AWBURST");
    sc_trace(mVcdFile, m_axi_buf_r_AWLOCK, "(port)m_axi_buf_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_AWCACHE, "(port)m_axi_buf_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_AWPROT, "(port)m_axi_buf_r_AWPROT");
    sc_trace(mVcdFile, m_axi_buf_r_AWQOS, "(port)m_axi_buf_r_AWQOS");
    sc_trace(mVcdFile, m_axi_buf_r_AWREGION, "(port)m_axi_buf_r_AWREGION");
    sc_trace(mVcdFile, m_axi_buf_r_AWUSER, "(port)m_axi_buf_r_AWUSER");
    sc_trace(mVcdFile, m_axi_buf_r_WVALID, "(port)m_axi_buf_r_WVALID");
    sc_trace(mVcdFile, m_axi_buf_r_WREADY, "(port)m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, m_axi_buf_r_WDATA, "(port)m_axi_buf_r_WDATA");
    sc_trace(mVcdFile, m_axi_buf_r_WSTRB, "(port)m_axi_buf_r_WSTRB");
    sc_trace(mVcdFile, m_axi_buf_r_WLAST, "(port)m_axi_buf_r_WLAST");
    sc_trace(mVcdFile, m_axi_buf_r_WID, "(port)m_axi_buf_r_WID");
    sc_trace(mVcdFile, m_axi_buf_r_WUSER, "(port)m_axi_buf_r_WUSER");
    sc_trace(mVcdFile, m_axi_buf_r_ARVALID, "(port)m_axi_buf_r_ARVALID");
    sc_trace(mVcdFile, m_axi_buf_r_ARREADY, "(port)m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, m_axi_buf_r_ARADDR, "(port)m_axi_buf_r_ARADDR");
    sc_trace(mVcdFile, m_axi_buf_r_ARID, "(port)m_axi_buf_r_ARID");
    sc_trace(mVcdFile, m_axi_buf_r_ARLEN, "(port)m_axi_buf_r_ARLEN");
    sc_trace(mVcdFile, m_axi_buf_r_ARSIZE, "(port)m_axi_buf_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_buf_r_ARBURST, "(port)m_axi_buf_r_ARBURST");
    sc_trace(mVcdFile, m_axi_buf_r_ARLOCK, "(port)m_axi_buf_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_buf_r_ARCACHE, "(port)m_axi_buf_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_buf_r_ARPROT, "(port)m_axi_buf_r_ARPROT");
    sc_trace(mVcdFile, m_axi_buf_r_ARQOS, "(port)m_axi_buf_r_ARQOS");
    sc_trace(mVcdFile, m_axi_buf_r_ARREGION, "(port)m_axi_buf_r_ARREGION");
    sc_trace(mVcdFile, m_axi_buf_r_ARUSER, "(port)m_axi_buf_r_ARUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RVALID, "(port)m_axi_buf_r_RVALID");
    sc_trace(mVcdFile, m_axi_buf_r_RREADY, "(port)m_axi_buf_r_RREADY");
    sc_trace(mVcdFile, m_axi_buf_r_RDATA, "(port)m_axi_buf_r_RDATA");
    sc_trace(mVcdFile, m_axi_buf_r_RLAST, "(port)m_axi_buf_r_RLAST");
    sc_trace(mVcdFile, m_axi_buf_r_RID, "(port)m_axi_buf_r_RID");
    sc_trace(mVcdFile, m_axi_buf_r_RUSER, "(port)m_axi_buf_r_RUSER");
    sc_trace(mVcdFile, m_axi_buf_r_RRESP, "(port)m_axi_buf_r_RRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BVALID, "(port)m_axi_buf_r_BVALID");
    sc_trace(mVcdFile, m_axi_buf_r_BREADY, "(port)m_axi_buf_r_BREADY");
    sc_trace(mVcdFile, m_axi_buf_r_BRESP, "(port)m_axi_buf_r_BRESP");
    sc_trace(mVcdFile, m_axi_buf_r_BID, "(port)m_axi_buf_r_BID");
    sc_trace(mVcdFile, m_axi_buf_r_BUSER, "(port)m_axi_buf_r_BUSER");
    sc_trace(mVcdFile, buf_offset, "(port)buf_offset");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, buf_r_blk_n_AR, "buf_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, buf_r_blk_n_R, "buf_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, buf_r_blk_n_AW, "buf_r_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, buf_r_blk_n_W, "buf_r_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, buf_r_blk_n_B, "buf_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, buf_addr_reg_453, "buf_addr_reg_453");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_169_p3, "tmp_fu_169_p3");
    sc_trace(mVcdFile, buf_addr_12_reg_460, "buf_addr_12_reg_460");
    sc_trace(mVcdFile, buf_addr_13_reg_467, "buf_addr_13_reg_467");
    sc_trace(mVcdFile, buf_addr_14_reg_474, "buf_addr_14_reg_474");
    sc_trace(mVcdFile, i_7_fu_259_p2, "i_7_fu_259_p2");
    sc_trace(mVcdFile, i_7_reg_481, "i_7_reg_481");
    sc_trace(mVcdFile, a_reg_486, "a_reg_486");
    sc_trace(mVcdFile, b_reg_493, "b_reg_493");
    sc_trace(mVcdFile, c_reg_500, "c_reg_500");
    sc_trace(mVcdFile, d_reg_508, "d_reg_508");
    sc_trace(mVcdFile, tmp_9_fu_313_p2, "tmp_9_fu_313_p2");
    sc_trace(mVcdFile, tmp_9_reg_515, "tmp_9_reg_515");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_AWREADY, "ap_sig_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, tmp_5_fu_356_p2, "tmp_5_fu_356_p2");
    sc_trace(mVcdFile, tmp_5_reg_520, "tmp_5_reg_520");
    sc_trace(mVcdFile, tmp_1_fu_399_p2, "tmp_1_fu_399_p2");
    sc_trace(mVcdFile, tmp_1_reg_525, "tmp_1_reg_525");
    sc_trace(mVcdFile, tmp_7_fu_436_p2, "tmp_7_fu_436_p2");
    sc_trace(mVcdFile, tmp_7_reg_530, "tmp_7_reg_530");
    sc_trace(mVcdFile, i_reg_158, "i_reg_158");
    sc_trace(mVcdFile, sum_fu_185_p2, "sum_fu_185_p2");
    sc_trace(mVcdFile, sum1_fu_206_p2, "sum1_fu_206_p2");
    sc_trace(mVcdFile, sum2_fu_227_p2, "sum2_fu_227_p2");
    sc_trace(mVcdFile, sum3_fu_248_p2, "sum3_fu_248_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_ARREADY, "ap_reg_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_ARREADY, "ap_sig_ioackin_m_axi_buf_r_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_AWREADY, "ap_reg_ioackin_m_axi_buf_r_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_buf_r_WREADY, "ap_reg_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_buf_r_WREADY, "ap_sig_ioackin_m_axi_buf_r_WREADY");
    sc_trace(mVcdFile, tmp_s_fu_177_p1, "tmp_s_fu_177_p1");
    sc_trace(mVcdFile, tmp_8_fu_181_p1, "tmp_8_fu_181_p1");
    sc_trace(mVcdFile, tmp_2_fu_196_p2, "tmp_2_fu_196_p2");
    sc_trace(mVcdFile, tmp_2_cast_fu_202_p1, "tmp_2_cast_fu_202_p1");
    sc_trace(mVcdFile, tmp_3_fu_217_p2, "tmp_3_fu_217_p2");
    sc_trace(mVcdFile, tmp_3_cast_fu_223_p1, "tmp_3_cast_fu_223_p1");
    sc_trace(mVcdFile, tmp_4_fu_238_p2, "tmp_4_fu_238_p2");
    sc_trace(mVcdFile, tmp_4_cast_fu_244_p1, "tmp_4_cast_fu_244_p1");
    sc_trace(mVcdFile, x_assign_fu_265_p2, "x_assign_fu_265_p2");
    sc_trace(mVcdFile, tmp_6_fu_269_p2, "tmp_6_fu_269_p2");
    sc_trace(mVcdFile, tmp_11_fu_287_p2, "tmp_11_fu_287_p2");
    sc_trace(mVcdFile, tmp_10_fu_279_p3, "tmp_10_fu_279_p3");
    sc_trace(mVcdFile, tmp_2_i_fu_293_p2, "tmp_2_i_fu_293_p2");
    sc_trace(mVcdFile, tmp_4_i_fu_299_p3, "tmp_4_i_fu_299_p3");
    sc_trace(mVcdFile, e_fu_274_p2, "e_fu_274_p2");
    sc_trace(mVcdFile, tmp1_fu_307_p2, "tmp1_fu_307_p2");
    sc_trace(mVcdFile, x_assign_1_fu_318_p2, "x_assign_1_fu_318_p2");
    sc_trace(mVcdFile, tmp_13_fu_330_p2, "tmp_13_fu_330_p2");
    sc_trace(mVcdFile, tmp_12_fu_322_p3, "tmp_12_fu_322_p3");
    sc_trace(mVcdFile, tmp_2_i1_fu_336_p2, "tmp_2_i1_fu_336_p2");
    sc_trace(mVcdFile, tmp_4_i1_fu_342_p3, "tmp_4_i1_fu_342_p3");
    sc_trace(mVcdFile, tmp2_fu_350_p2, "tmp2_fu_350_p2");
    sc_trace(mVcdFile, x_assign_2_fu_361_p2, "x_assign_2_fu_361_p2");
    sc_trace(mVcdFile, tmp_15_fu_373_p2, "tmp_15_fu_373_p2");
    sc_trace(mVcdFile, tmp_14_fu_365_p3, "tmp_14_fu_365_p3");
    sc_trace(mVcdFile, tmp_2_i2_fu_379_p2, "tmp_2_i2_fu_379_p2");
    sc_trace(mVcdFile, tmp_4_i2_fu_385_p3, "tmp_4_i2_fu_385_p3");
    sc_trace(mVcdFile, tmp3_fu_393_p2, "tmp3_fu_393_p2");
    sc_trace(mVcdFile, x_assign_3_fu_404_p2, "x_assign_3_fu_404_p2");
    sc_trace(mVcdFile, tmp_17_fu_416_p2, "tmp_17_fu_416_p2");
    sc_trace(mVcdFile, tmp_16_fu_408_p3, "tmp_16_fu_408_p3");
    sc_trace(mVcdFile, tmp_2_i3_fu_422_p2, "tmp_2_i3_fu_422_p2");
    sc_trace(mVcdFile, tmp_4_i3_fu_428_p3, "tmp_4_i3_fu_428_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

a0_aes_mixColumns::~a0_aes_mixColumns() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void a0_aes_mixColumns::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_ARREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
                     esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_AWREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, m_axi_buf_r_WREADY.read())))) {
            ap_reg_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
         esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1))) {
        i_reg_158 = i_7_reg_481.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_158 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
        a_reg_486 = m_axi_buf_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
        b_reg_493 = m_axi_buf_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_169_p3.read(), ap_const_lv1_0))) {
        buf_addr_12_reg_460 = sum1_fu_206_p2.read();
        buf_addr_13_reg_467 = sum2_fu_227_p2.read();
        buf_addr_14_reg_474 = sum3_fu_248_p2.read();
        buf_addr_reg_453 = sum_fu_185_p2.read();
        i_7_reg_481 = i_7_fu_259_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
        c_reg_500 = m_axi_buf_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
        d_reg_508 = m_axi_buf_r_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1))) {
        tmp_1_reg_525 = tmp_1_fu_399_p2.read();
        tmp_5_reg_520 = tmp_5_fu_356_p2.read();
        tmp_7_reg_530 = tmp_7_fu_436_p2.read();
        tmp_9_reg_515 = tmp_9_fu_313_p2.read();
    }
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void a0_aes_mixColumns::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void a0_aes_mixColumns::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_fu_169_p3.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_fu_169_p3.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_ap_sig_ioackin_m_axi_buf_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = m_axi_buf_r_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_ARREADY = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_ap_sig_ioackin_m_axi_buf_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = m_axi_buf_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_AWREADY = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_ap_sig_ioackin_m_axi_buf_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_buf_r_WREADY = m_axi_buf_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_buf_r_WREADY = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_buf_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        buf_r_blk_n_AR = m_axi_buf_r_ARREADY.read();
    } else {
        buf_r_blk_n_AR = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_buf_r_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()))) {
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY.read();
    } else {
        buf_r_blk_n_AW = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_buf_r_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        buf_r_blk_n_B = m_axi_buf_r_BVALID.read();
    } else {
        buf_r_blk_n_B = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_buf_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        buf_r_blk_n_R = m_axi_buf_r_RVALID.read();
    } else {
        buf_r_blk_n_R = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_buf_r_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()))) {
        buf_r_blk_n_W = m_axi_buf_r_WREADY.read();
    } else {
        buf_r_blk_n_W = ap_const_logic_1;
    }
}

void a0_aes_mixColumns::thread_e_fu_274_p2() {
    e_fu_274_p2 = (d_reg_508.read() ^ tmp_6_fu_269_p2.read());
}

void a0_aes_mixColumns::thread_i_7_fu_259_p2() {
    i_7_fu_259_p2 = (!ap_const_lv5_4.is_01() || !i_reg_158.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_4) + sc_biguint<5>(i_reg_158.read()));
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            m_axi_buf_r_ARADDR = buf_addr_14_reg_474.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            m_axi_buf_r_ARADDR = buf_addr_13_reg_467.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            m_axi_buf_r_ARADDR = buf_addr_12_reg_460.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            m_axi_buf_r_ARADDR = buf_addr_reg_453.read();
        } else {
            m_axi_buf_r_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_buf_r_ARADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARBURST() {
    m_axi_buf_r_ARBURST = ap_const_lv2_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARCACHE() {
    m_axi_buf_r_ARCACHE = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARID() {
    m_axi_buf_r_ARID = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARLEN() {
    m_axi_buf_r_ARLEN = ap_const_lv32_1;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARLOCK() {
    m_axi_buf_r_ARLOCK = ap_const_lv2_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARPROT() {
    m_axi_buf_r_ARPROT = ap_const_lv3_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARQOS() {
    m_axi_buf_r_ARQOS = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARREGION() {
    m_axi_buf_r_ARREGION = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARSIZE() {
    m_axi_buf_r_ARSIZE = ap_const_lv3_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARUSER() {
    m_axi_buf_r_ARUSER = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_ARVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_ARREADY.read())))) {
        m_axi_buf_r_ARVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_ARVALID = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
             esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1))) {
            m_axi_buf_r_AWADDR = buf_addr_14_reg_474.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
            m_axi_buf_r_AWADDR = buf_addr_13_reg_467.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
            m_axi_buf_r_AWADDR = buf_addr_12_reg_460.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
            m_axi_buf_r_AWADDR = buf_addr_reg_453.read();
        } else {
            m_axi_buf_r_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        m_axi_buf_r_AWADDR = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWBURST() {
    m_axi_buf_r_AWBURST = ap_const_lv2_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWCACHE() {
    m_axi_buf_r_AWCACHE = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWID() {
    m_axi_buf_r_AWID = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWLEN() {
    m_axi_buf_r_AWLEN = ap_const_lv32_1;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWLOCK() {
    m_axi_buf_r_AWLOCK = ap_const_lv2_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWPROT() {
    m_axi_buf_r_AWPROT = ap_const_lv3_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWQOS() {
    m_axi_buf_r_AWQOS = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWREGION() {
    m_axi_buf_r_AWREGION = ap_const_lv4_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWSIZE() {
    m_axi_buf_r_AWSIZE = ap_const_lv3_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWUSER() {
    m_axi_buf_r_AWUSER = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_AWREADY.read())))) {
        m_axi_buf_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_AWVALID = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1)))) {
        m_axi_buf_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_BREADY = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_RREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1)))) {
        m_axi_buf_r_RREADY = ap_const_logic_1;
    } else {
        m_axi_buf_r_RREADY = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
            m_axi_buf_r_WDATA = tmp_7_reg_530.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
            m_axi_buf_r_WDATA = tmp_1_reg_525.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            m_axi_buf_r_WDATA = tmp_5_reg_520.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            m_axi_buf_r_WDATA = tmp_9_reg_515.read();
        } else {
            m_axi_buf_r_WDATA =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        m_axi_buf_r_WDATA =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WID() {
    m_axi_buf_r_WID = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WLAST() {
    m_axi_buf_r_WLAST = ap_const_logic_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WSTRB() {
    m_axi_buf_r_WSTRB = ap_const_lv1_1;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WUSER() {
    m_axi_buf_r_WUSER = ap_const_lv1_0;
}

void a0_aes_mixColumns::thread_m_axi_buf_r_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_buf_r_WREADY.read())))) {
        m_axi_buf_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_buf_r_WVALID = ap_const_logic_0;
    }
}

void a0_aes_mixColumns::thread_sum1_fu_206_p2() {
    sum1_fu_206_p2 = (!buf_offset.read().is_01() || !tmp_2_cast_fu_202_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_2_cast_fu_202_p1.read()));
}

void a0_aes_mixColumns::thread_sum2_fu_227_p2() {
    sum2_fu_227_p2 = (!buf_offset.read().is_01() || !tmp_3_cast_fu_223_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_3_cast_fu_223_p1.read()));
}

void a0_aes_mixColumns::thread_sum3_fu_248_p2() {
    sum3_fu_248_p2 = (!buf_offset.read().is_01() || !tmp_4_cast_fu_244_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_4_cast_fu_244_p1.read()));
}

void a0_aes_mixColumns::thread_sum_fu_185_p2() {
    sum_fu_185_p2 = (!buf_offset.read().is_01() || !tmp_s_fu_177_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(buf_offset.read()) + sc_biguint<32>(tmp_s_fu_177_p1.read()));
}

void a0_aes_mixColumns::thread_tmp1_fu_307_p2() {
    tmp1_fu_307_p2 = (tmp_4_i_fu_299_p3.read() ^ e_fu_274_p2.read());
}

void a0_aes_mixColumns::thread_tmp2_fu_350_p2() {
    tmp2_fu_350_p2 = (tmp_4_i1_fu_342_p3.read() ^ e_fu_274_p2.read());
}

void a0_aes_mixColumns::thread_tmp3_fu_393_p2() {
    tmp3_fu_393_p2 = (tmp_4_i2_fu_385_p3.read() ^ e_fu_274_p2.read());
}

void a0_aes_mixColumns::thread_tmp_10_fu_279_p3() {
    tmp_10_fu_279_p3 = x_assign_fu_265_p2.read().range(7, 7);
}

void a0_aes_mixColumns::thread_tmp_11_fu_287_p2() {
    tmp_11_fu_287_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_fu_265_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void a0_aes_mixColumns::thread_tmp_12_fu_322_p3() {
    tmp_12_fu_322_p3 = x_assign_1_fu_318_p2.read().range(7, 7);
}

void a0_aes_mixColumns::thread_tmp_13_fu_330_p2() {
    tmp_13_fu_330_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_1_fu_318_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void a0_aes_mixColumns::thread_tmp_14_fu_365_p3() {
    tmp_14_fu_365_p3 = x_assign_2_fu_361_p2.read().range(7, 7);
}

void a0_aes_mixColumns::thread_tmp_15_fu_373_p2() {
    tmp_15_fu_373_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_2_fu_361_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void a0_aes_mixColumns::thread_tmp_16_fu_408_p3() {
    tmp_16_fu_408_p3 = x_assign_3_fu_404_p2.read().range(7, 7);
}

void a0_aes_mixColumns::thread_tmp_17_fu_416_p2() {
    tmp_17_fu_416_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): x_assign_3_fu_404_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void a0_aes_mixColumns::thread_tmp_1_fu_399_p2() {
    tmp_1_fu_399_p2 = (tmp3_fu_393_p2.read() ^ c_reg_500.read());
}

void a0_aes_mixColumns::thread_tmp_2_cast_fu_202_p1() {
    tmp_2_cast_fu_202_p1 = esl_zext<32,4>(tmp_2_fu_196_p2.read());
}

void a0_aes_mixColumns::thread_tmp_2_fu_196_p2() {
    tmp_2_fu_196_p2 = (tmp_8_fu_181_p1.read() | ap_const_lv4_1);
}

void a0_aes_mixColumns::thread_tmp_2_i1_fu_336_p2() {
    tmp_2_i1_fu_336_p2 = (tmp_13_fu_330_p2.read() ^ ap_const_lv8_1B);
}

void a0_aes_mixColumns::thread_tmp_2_i2_fu_379_p2() {
    tmp_2_i2_fu_379_p2 = (tmp_15_fu_373_p2.read() ^ ap_const_lv8_1B);
}

void a0_aes_mixColumns::thread_tmp_2_i3_fu_422_p2() {
    tmp_2_i3_fu_422_p2 = (tmp_17_fu_416_p2.read() ^ ap_const_lv8_1B);
}

void a0_aes_mixColumns::thread_tmp_2_i_fu_293_p2() {
    tmp_2_i_fu_293_p2 = (tmp_11_fu_287_p2.read() ^ ap_const_lv8_1B);
}

void a0_aes_mixColumns::thread_tmp_3_cast_fu_223_p1() {
    tmp_3_cast_fu_223_p1 = esl_zext<32,4>(tmp_3_fu_217_p2.read());
}

void a0_aes_mixColumns::thread_tmp_3_fu_217_p2() {
    tmp_3_fu_217_p2 = (tmp_8_fu_181_p1.read() | ap_const_lv4_2);
}

void a0_aes_mixColumns::thread_tmp_4_cast_fu_244_p1() {
    tmp_4_cast_fu_244_p1 = esl_zext<32,4>(tmp_4_fu_238_p2.read());
}

void a0_aes_mixColumns::thread_tmp_4_fu_238_p2() {
    tmp_4_fu_238_p2 = (tmp_8_fu_181_p1.read() | ap_const_lv4_3);
}

void a0_aes_mixColumns::thread_tmp_4_i1_fu_342_p3() {
    tmp_4_i1_fu_342_p3 = (!tmp_12_fu_322_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_12_fu_322_p3.read()[0].to_bool())? tmp_2_i1_fu_336_p2.read(): tmp_13_fu_330_p2.read());
}

void a0_aes_mixColumns::thread_tmp_4_i2_fu_385_p3() {
    tmp_4_i2_fu_385_p3 = (!tmp_14_fu_365_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_14_fu_365_p3.read()[0].to_bool())? tmp_2_i2_fu_379_p2.read(): tmp_15_fu_373_p2.read());
}

void a0_aes_mixColumns::thread_tmp_4_i3_fu_428_p3() {
    tmp_4_i3_fu_428_p3 = (!tmp_16_fu_408_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_16_fu_408_p3.read()[0].to_bool())? tmp_2_i3_fu_422_p2.read(): tmp_17_fu_416_p2.read());
}

void a0_aes_mixColumns::thread_tmp_4_i_fu_299_p3() {
    tmp_4_i_fu_299_p3 = (!tmp_10_fu_279_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_10_fu_279_p3.read()[0].to_bool())? tmp_2_i_fu_293_p2.read(): tmp_11_fu_287_p2.read());
}

void a0_aes_mixColumns::thread_tmp_5_fu_356_p2() {
    tmp_5_fu_356_p2 = (tmp2_fu_350_p2.read() ^ b_reg_493.read());
}

void a0_aes_mixColumns::thread_tmp_6_fu_269_p2() {
    tmp_6_fu_269_p2 = (c_reg_500.read() ^ x_assign_fu_265_p2.read());
}

void a0_aes_mixColumns::thread_tmp_7_fu_436_p2() {
    tmp_7_fu_436_p2 = (tmp_4_i3_fu_428_p3.read() ^ tmp_6_fu_269_p2.read());
}

void a0_aes_mixColumns::thread_tmp_8_fu_181_p1() {
    tmp_8_fu_181_p1 = i_reg_158.read().range(4-1, 0);
}

void a0_aes_mixColumns::thread_tmp_9_fu_313_p2() {
    tmp_9_fu_313_p2 = (tmp1_fu_307_p2.read() ^ a_reg_486.read());
}

void a0_aes_mixColumns::thread_tmp_fu_169_p3() {
    tmp_fu_169_p3 = i_reg_158.read().range(4, 4);
}

void a0_aes_mixColumns::thread_tmp_s_fu_177_p1() {
    tmp_s_fu_177_p1 = esl_zext<32,5>(i_reg_158.read());
}

void a0_aes_mixColumns::thread_x_assign_1_fu_318_p2() {
    x_assign_1_fu_318_p2 = (c_reg_500.read() ^ b_reg_493.read());
}

void a0_aes_mixColumns::thread_x_assign_2_fu_361_p2() {
    x_assign_2_fu_361_p2 = (d_reg_508.read() ^ c_reg_500.read());
}

void a0_aes_mixColumns::thread_x_assign_3_fu_404_p2() {
    x_assign_3_fu_404_p2 = (d_reg_508.read() ^ a_reg_486.read());
}

void a0_aes_mixColumns::thread_x_assign_fu_265_p2() {
    x_assign_fu_265_p2 = (b_reg_493.read() ^ a_reg_486.read());
}

void a0_aes_mixColumns::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_169_p3.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && esl_seteq<1,1,1>(m_axi_buf_r_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_buf_r_AWREADY.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_buf_r_BVALID.read())))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 1048576 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_buf_r_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) && esl_seteq<1,1,1>(m_axi_buf_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state26;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

